{"version":3,"file":"codice-fiscale-utils.bundle.min.js","sources":["../src/const/cf-offsets.const.ts","../src/date-utils/date-matcher.const.ts","../src/date-utils/date-utils.class.ts","../src/const/matcher.const.ts","../src/enums/crc.enum.ts","../src/enums/birth-month.enum.ts","../src/classes/check-digitizer.class.ts","../src/functions/generator-wrapper.function.ts","../src/enums/gender-weight.enum.ts","../src/enums/omocodes.enum.ts","../src/classes/gender.class.ts","../src/const/logic.const.ts","../src/classes/parser.class.ts","../src/const/error-messages.const.ts","../src/classes/cfu-error.class.ts","../src/classes/pattern.class.ts","../src/classes/cf-mismatch-validator.class.ts","../src/classes/validator.class.ts","../src/index.ts"],"sourcesContent":["export const LASTNAME_OFFSET = 0;\r\nexport const LASTNAME_SIZE = 3;\r\nexport const FIRSTNAME_OFFSET = 3;\r\nexport const FIRSTNAME_SIZE = 3;\r\nexport const YEAR_OFFSET = 6;\r\nexport const YEAR_SIZE = 2;\r\nexport const MONTH_OFFSET = 8;\r\nexport const MONTH_SIZE = 1;\r\nexport const DAY_OFFSET = 9;\r\nexport const DAY_SIZE = 2;\r\nexport const DATE_OFFSET = YEAR_OFFSET;\r\nexport const DATE_SIZE = YEAR_SIZE + MONTH_SIZE + DAY_SIZE;\r\nexport const GENDER_OFFSET = DAY_OFFSET;\r\nexport const GENDER_SIZE = 1;\r\nexport const PLACE_OFFSET = 11;\r\nexport const PLACE_SIZE = 4;\r\nexport const CRC_OFFSET = 15;\r\nexport const CRC_SIZE = 1;\r\nexport const CF_SIZE =\r\n\tLASTNAME_SIZE + FIRSTNAME_SIZE + DATE_SIZE + PLACE_SIZE + CRC_SIZE;\r\n","const YEAR: string = \"[12][0-9]{3}\";\r\nconst MONTH: string = \"0[1-9]|1[0-2]\";\r\nconst DAY: string = \"0[1-9]|[12][0-9]|3[01]\";\r\nconst LEAP_MONTH: string = \"02\";\r\nconst DAYS_30_MONTHS: string = \"0[469]|11\";\r\nconst DAYS_31_MONTHS: string = \"0[13578]|1[02]\";\r\nconst MONTH_DAY: string = `(?:${MONTH})-(?:0[1-9]|[12]\\\\d)|(?:${DAYS_30_MONTHS})-30|(?:${DAYS_31_MONTHS})-3[01]`;\r\nconst HOURS: string = \"[01]\\\\d|2[0-3]\";\r\nconst MINUTES: string = \"[0-5]\\\\d\";\r\nconst SECONDS: string = MINUTES;\r\nconst MILLISECONDS: string = \"\\\\d{3}\";\r\nconst TIMEZONE: string = `Z|[-+](?:${HOURS})(?::?${MINUTES})?`;\r\nconst TIME: string = `(?:${HOURS})(?::${MINUTES}(?::${SECONDS}(\\\\.${MILLISECONDS})?)?(?:${TIMEZONE})?)?`;\r\nconst ISO8601_SHORT_DATE: string = `${YEAR}-(?:${MONTH_DAY})(?:T${TIME})?`;\r\nconst ISO8601_DATE_TIME: string = `${YEAR}(?:-(?:(?:${MONTH})|(?:${MONTH_DAY})(?:T${TIME})?))?`;\r\n\r\n/**\r\n * Date Matcher consts\r\n * @property {Object} DATE_VALIDATOR\r\n * @property {string} DATE_VALIDATOR.YEAR Matcher for ISO8601 4 digits year (limited to 1000-2999)\r\n * @property {string} DATE_VALIDATOR.MONTH Matcher for ISO8601 2 digits month (01-12)\r\n * @property {string} DATE_VALIDATOR.DAY Matcher for ISO8601 2 digits day (01-31)\r\n * @property {string} DATE_VALIDATOR.LEAP_MONTH Matcher for ISO8601 2 digits leap month\r\n * @property {string} DATE_VALIDATOR.DAYS_30_MONTHS Matcher for ISO8601 2 digits 30 days month\r\n * @property {string} DATE_VALIDATOR.DAYS_31_MONTHS Matcher for ISO8601 2 digits 31 days month\r\n * @property {string} DATE_VALIDATOR.MONTH_DAY Matcher for ISO8601 2 + 2 digits (28~31)month + day\r\n * @property {string} DATE_VALIDATOR.ISO8601_SHORT_DATE Matcher for ISO8601 date: 4+2+2 digits year + (28~31)month + day\r\n * @property {string} DATE_VALIDATOR.HOURS Matcher for ISO8601 2 digits hours (00-23)\r\n * @property {string} DATE_VALIDATOR.MINUTES Matcher for ISO8601 2 digits minutes (00-59)\r\n * @property {string} DATE_VALIDATOR.SECONDS Matcher for ISO8601 2 digits seconds (00-59)\r\n * @property {string} DATE_VALIDATOR.MILLISECONDS Matcher for ISO8601 3 digits milliseconds (000-999)\r\n * @property {string} DATE_VALIDATOR.TIMEZONE Matcher for ISO8601 timezone (Z or ±## or ±##:## or ±####)\r\n * @property {string} DATE_VALIDATOR.TIME Matcher for ISO8601 for time (T## , T##:## , T##:##:## , T##:##:##.###)\r\n * @property {string} DATE_VALIDATOR.ISO8601_DATE_TIME Matcher for ISO8601 date/time format\r\n */\r\nexport {\r\n\tDAY,\r\n\tDAYS_30_MONTHS,\r\n\tDAYS_31_MONTHS,\r\n\tHOURS,\r\n\tISO8601_DATE_TIME,\r\n\tISO8601_SHORT_DATE,\r\n\tLEAP_MONTH,\r\n\tMILLISECONDS,\r\n\tMINUTES,\r\n\tMONTH,\r\n\tMONTH_DAY,\r\n\tSECONDS,\r\n\tTIME,\r\n\tTIMEZONE,\r\n\tYEAR,\r\n};\r\n","import dayjs, { Dayjs } from \"dayjs\";\r\nimport type DateDay from \"./date-day.type\";\r\nimport { ISO8601_DATE_TIME } from \"./date-matcher.const\";\r\nimport type DateMonth from \"./date-month.type\";\r\nimport type MultiFormatDate from \"./multi-format-date.type\";\r\nexport default class DateUtils {\r\n\t/**\r\n\t * Parse a Dated and Gender information to create Date/Gender CF part\r\n\t * @param date Date instance, ISO8601 date string or array of numbers [year, month, day]\r\n\t * @returns Parsed Date or null if not valid\r\n\t */\r\n\tpublic static parseDate(date?: MultiFormatDate | null): Date | null {\r\n\t\tif (\r\n\t\t\t!(\r\n\t\t\t\tdate instanceof Date ||\r\n\t\t\t\t(typeof date === \"string\" &&\r\n\t\t\t\t\tnew RegExp(`^(?:${ISO8601_DATE_TIME})$`).test(date)) ||\r\n\t\t\t\t(Array.isArray(date) &&\r\n\t\t\t\t\tdate.length &&\r\n\t\t\t\t\t!date.some((value) => typeof value !== \"number\" || isNaN(value)))\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tlet parsedDate: Dayjs;\r\n\t\t\tif (Array.isArray(date)) {\r\n\t\t\t\tconst [year, month = 0, day = 1] = date;\r\n\t\t\t\tif (month >= 0 && month <= 11 && day > 0 && day <= 31) {\r\n\t\t\t\t\tparsedDate = dayjs(Date.UTC(year, month || 0, day || 1));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedDate = dayjs(date);\r\n\t\t\t}\r\n\t\t\treturn parsedDate.isValid() ? parsedDate.toDate() : null;\r\n\t\t} catch (err) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static ymdToDate(\r\n\t\tyear?: number | null,\r\n\t\tmonth?: DateMonth | null,\r\n\t\tday?: DateDay | null\r\n\t): Date | null {\r\n\t\treturn this.parseDate([year, month, day] as number[]);\r\n\t}\r\n}\r\n","export const CONSONANT_LIST: string = \"B-DF-HJ-NP-TV-Z\";\r\nexport const VOWEL_LIST: string = \"AEIOU\";\r\nexport const OMOCODE_NUMBER_LIST: string = \"\\\\dLMNP-V\";\r\nexport const OMOCODE_NON_ZERO_NUMBER_LIST: string = \"1-9MNP-V\";\r\nexport const OMOCODE_ZERO_LIST: string = \"0L\";\r\nexport const MONTH_LIST: string = \"A-EHLMPR-T\";\r\nexport const MONTH_30DAYS_LIST: string = \"DHPS\";\r\nexport const MONTH_31DAYS_LIST: string = \"ACELMRT\";\r\nexport const CITY_CODE_LIST: string = \"A-M\";\r\nexport const COUNTRY_CODE_LIST: string = \"Z\";\r\n\r\nexport const CF_NAME_MATCHER: string = `[A-Z][${VOWEL_LIST}][${VOWEL_LIST}X]|[${VOWEL_LIST}]X{2}|[${CONSONANT_LIST}]{2}[A-Z]`;\r\nexport const CF_SURNAME_MATCHER: string = CF_NAME_MATCHER;\r\nexport const CF_FULL_NAME_MATCHER: string = `(?:${CF_NAME_MATCHER}){2}`;\r\n\r\nexport const YEAR_MATCHER: string = `[${OMOCODE_NUMBER_LIST}]{2}`;\r\nexport const LEAP_YEAR_MATCHER: string =\r\n\t\"[02468LNQSU][048LQU]|[13579MPRTV][26NS]\";\r\nexport const MONTH_MATCHER: string = `[${MONTH_LIST}]`;\r\nexport const DAY_2X_MATCHER: string = \"[26NS]\";\r\nexport const DAY_3X_MATCHER: string = \"[37PT]\";\r\nexport const DAY_29_MATCHER: string = `[${OMOCODE_ZERO_LIST}4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[1256MNRS][${OMOCODE_NUMBER_LIST}]`;\r\nexport const DAY_30_MATCHER: string = `[${DAY_3X_MATCHER}][${OMOCODE_ZERO_LIST}]`;\r\nexport const DAY_31_MATCHER: string = `[${DAY_3X_MATCHER}][${OMOCODE_ZERO_LIST}1M]`;\r\n\r\nexport const DAY_MATCHER: string = `(?:${DAY_29_MATCHER}|${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}1M])`;\r\nexport const MALE_DAY_MATCHER: string = `(?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[12MN][${OMOCODE_NUMBER_LIST}]|[3P][${OMOCODE_ZERO_LIST}1M])`;\r\nexport const FEMALE_DAY_MATCHER: string = `(?:[4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[56RS][${OMOCODE_NUMBER_LIST}]|[7T][${OMOCODE_ZERO_LIST}1M])`;\r\nexport const MONTH_DAY_MATCHER: string = `${MONTH_MATCHER}(?:${DAY_29_MATCHER})|[${MONTH_30DAYS_LIST}]${DAY_30_MATCHER}|[${MONTH_31DAYS_LIST}]${DAY_31_MATCHER}`;\r\nexport const FULL_DATE_MATCHER: string = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[${OMOCODE_ZERO_LIST}4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[15MR][${OMOCODE_NUMBER_LIST}]|${DAY_2X_MATCHER}[0-8LMNP-U])|[${MONTH_30DAYS_LIST}]${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}]${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}]${DAY_2X_MATCHER}[9V])|(?:${LEAP_YEAR_MATCHER})B${DAY_2X_MATCHER}[9V]`;\r\nexport const MALE_FULL_DATE_MATCHER: string = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[1M][${OMOCODE_NUMBER_LIST}]|[2N][0-8LMNP-U])|[${MONTH_30DAYS_LIST}][3P][${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}][3P][${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}][2N][9V])|(?:${LEAP_YEAR_MATCHER})B[2N][9V]`;\r\nexport const FEMALE_FULL_DATE_MATCHER: string = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[5R][${OMOCODE_NUMBER_LIST}]|[6S][0-8LMNP-U])|[${MONTH_30DAYS_LIST}][7T][${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}][7T][${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}][6S][9V])|(?:${LEAP_YEAR_MATCHER})B[6S][9V]`;\r\n\r\nexport const CITY_CODE_MATCHER: string = `[${CITY_CODE_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2}|[${OMOCODE_ZERO_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]|[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]))`;\r\nexport const COUNTRY_CODE_MATCHER: string = `${COUNTRY_CODE_LIST}[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2}`;\r\nexport const BELFIORE_CODE_MATCHER: string = `(?:[${CITY_CODE_LIST}${COUNTRY_CODE_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2})|(?:[${CITY_CODE_LIST}][${OMOCODE_ZERO_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]|[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]))`;\r\n\r\nexport const CHECK_DIGIT: string = \"[A-Z]\";\r\n\r\nexport const CODICE_FISCALE: string = `${CF_FULL_NAME_MATCHER}(?:${FULL_DATE_MATCHER})(?:${BELFIORE_CODE_MATCHER})${CHECK_DIGIT}`;\r\n\r\nexport const PARTIAL_CF_NAME_MATCHER: string = `[A-Z][${VOWEL_LIST}]?|[${CONSONANT_LIST}]{1,2}`;\r\nexport const PARTIAL_CF_FULL_NAME: string = `(?:${PARTIAL_CF_NAME_MATCHER})|(?:(?:${CF_NAME_MATCHER})(?:${PARTIAL_CF_NAME_MATCHER})?)`;\r\nexport const PARTIAL_YEAR: string = `[${OMOCODE_NUMBER_LIST}]`;\r\nexport const PARTIAL_MONTH_DAY: string = `${MONTH_MATCHER}[${OMOCODE_ZERO_LIST}12456MNQRS]?|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}]${DAY_3X_MATCHER}`;\r\nexport const PARTIAL_FULL_DATE: string = `${PARTIAL_YEAR}|(?:${YEAR_MATCHER}(?:${PARTIAL_MONTH_DAY})?)`;\r\nexport const PARTIAL_BELFIORE_CODE_MATCHER: string = `[${CITY_CODE_LIST}${COUNTRY_CODE_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]?)?|[${COUNTRY_CODE_LIST}](?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NUMBER_LIST}]?)?`;\r\n\r\nexport const PARTIAL_CF: string = `${PARTIAL_CF_FULL_NAME}|(?:${CF_FULL_NAME_MATCHER}(?:(?:${PARTIAL_FULL_DATE})|(?:${FULL_DATE_MATCHER})(?:(?:${PARTIAL_BELFIORE_CODE_MATCHER})|(?:${BELFIORE_CODE_MATCHER})${CHECK_DIGIT}?)?)?)?`;\r\n","enum CRC {\r\n    \"B\",\r\n    \"A\",\r\n    \"K\",\r\n    \"P\",\r\n    \"L\",\r\n    \"C\",\r\n    \"Q\",\r\n    \"D\",\r\n    \"R\",\r\n    \"E\",\r\n    \"V\",\r\n    \"O\",\r\n    \"S\",\r\n    \"F\",\r\n    \"T\",\r\n    \"G\",\r\n    \"U\",\r\n    \"H\",\r\n    \"M\",\r\n    \"I\",\r\n    \"N\",\r\n    \"J\",\r\n    \"W\",\r\n    \"Z\",\r\n    \"Y\",\r\n    \"X\",\r\n}\r\n\r\nexport default CRC;\r\n","enum BirthMonth {\r\n\t\"A\",\r\n\t\"B\",\r\n\t\"C\",\r\n\t\"D\",\r\n\t\"E\",\r\n\t\"H\",\r\n\t\"L\",\r\n\t\"M\",\r\n\t\"P\",\r\n\t\"R\",\r\n\t\"S\",\r\n\t\"T\",\r\n}\r\n\r\nexport default BirthMonth;\r\n","import { CRC_OFFSET, LASTNAME_OFFSET } from \"../const/cf-offsets.const\";\r\nimport { PARTIAL_CF } from \"../const/matcher.const\";\r\nimport CRC from \"../enums/crc.enum\";\r\nimport generatorWrapper from \"../functions/generator-wrapper.function\";\r\nimport type IGeneratorWrapper from \"../interfaces/generator-wrapper.interface\";\r\nimport type CodiceFiscaleCRC from \"../types/codice-fiscale-crc.type\";\r\nclass CheckDigitizer {\r\n\t/**\r\n\t * Evaluate given partial CF to produce last check digit character\r\n\t * @param codiceFiscale Partial or complete Fiscal Code to evaluate to produce last character\r\n\t * @returns 16th CF char\r\n\t */\r\n\tpublic static checkDigit(codiceFiscale: string): CodiceFiscaleCRC | null {\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale === \"string\" &&\r\n\t\t\tnew RegExp(PARTIAL_CF).test(codiceFiscale)\r\n\t\t) {\r\n\t\t\tconst partialCF = codiceFiscale.substr(LASTNAME_OFFSET, CRC_OFFSET);\r\n\t\t\tlet partialCfValue = 0;\r\n\t\t\tfor (const charValue of this.evaluateChar(partialCF)) {\r\n\t\t\t\tpartialCfValue += charValue as number;\r\n\t\t\t}\r\n\t\t\treturn String.fromCharCode(\r\n\t\t\t\t(partialCfValue % this.CRC_MOD) + this.CHAR_OFFSET\r\n\t\t\t) as CodiceFiscaleCRC;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static evaluateChar(\r\n\t\tpartialCF: string = \"\"\r\n\t): IGeneratorWrapper<number, 0, void> {\r\n\t\treturn generatorWrapper(this.evaluateCharGenerator(partialCF));\r\n\t}\r\n\r\n\tprivate static CHAR_OFFSET: number = 65;\r\n\tprivate static CRC_MOD: number = 26;\r\n\r\n\t/**\r\n\t * Partial FiscalCode Evaluator\r\n\t * @param Partial Fiscal Code to evaluate\r\n\t * @yields character value odd/even\r\n\t */\r\n\tprivate static *evaluateCharGenerator(partialCF: string = \"\"): Generator {\r\n\t\tif (typeof partialCF === \"string\" && partialCF.length) {\r\n\t\t\tfor (let index = 0; index < partialCF.length; index++) {\r\n\t\t\t\tlet char: string = partialCF[index].toUpperCase();\r\n\t\t\t\tconst isNumber: boolean = /^\\d$/u.test(char);\r\n\t\t\t\tif (isNumber) {\r\n\t\t\t\t\t// Numbers have always (odd/even) the same values of corresponding letters (0-9 => A-J)\r\n\t\t\t\t\tchar = String.fromCharCode(parseInt(char, 10) + this.CHAR_OFFSET);\r\n\t\t\t\t}\r\n\t\t\t\t// Odd/Even are shifted/swapped\r\n\t\t\t\t// array starts from 0, \"Agenzia delle Entrate\" documentation counts the string from 1\r\n\t\t\t\tconst isOdd: boolean = !(index % 2); // Odd according to documentation\r\n\t\t\t\tif (isOdd) {\r\n\t\t\t\t\t// Odd positions\r\n\t\t\t\t\tyield parseInt(CRC[char as any], 10);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Even positions\r\n\t\t\t\t\tyield char.charCodeAt(0) - this.CHAR_OFFSET;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nexport default CheckDigitizer;\r\n","import type IGeneratorWrapper from \"../interfaces/generator-wrapper.interface\";\r\nexport default function generatorWrapper<\r\n\tT = unknown,\r\n\tTReturn = any,\r\n\tTNext = unknown\r\n>(generator: Generator): IGeneratorWrapper<T, TReturn, TNext> {\r\n\tgenerator[Symbol.iterator] = () => generator;\r\n\treturn generator as IGeneratorWrapper<T, TReturn, TNext>;\r\n}\r\n","enum GenderWeight {\r\n\t\"M\" = 0,\r\n\t\"F\" = 40,\r\n}\r\n\r\nexport default GenderWeight;\r\n","enum Omocodes {\r\n\t\"L\",\r\n\t\"M\",\r\n\t\"N\",\r\n\t\"P\",\r\n\t\"Q\",\r\n\t\"R\",\r\n\t\"S\",\r\n\t\"T\",\r\n\t\"U\",\r\n\t\"V\",\r\n}\r\n\r\nexport default Omocodes;\r\n","import { DateDay } from \"../date-utils/\";\r\nimport GenderWeight from \"../enums/gender-weight.enum\";\r\nimport type Genders from \"../types/genders.type\";\r\n\r\nclass Gender {\r\n\tpublic static getDay(genderDay: number): DateDay | null {\r\n\t\tconst plainDay = genderDay % GenderWeight.F;\r\n\t\treturn plainDay > 0 && plainDay <= this.MAX_MONTH_DAY\r\n\t\t\t? (plainDay as DateDay)\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tpublic static getGender(genderDay: number): Genders | null {\r\n\t\treturn (\r\n\t\t\tthis.toArray().find(\r\n\t\t\t\t(gender) =>\r\n\t\t\t\t\tgenderDay >= GenderWeight[gender] &&\r\n\t\t\t\t\tgenderDay <= GenderWeight[gender] + this.MAX_MONTH_DAY\r\n\t\t\t) || null\r\n\t\t);\r\n\t}\r\n\r\n\tpublic static genderizeDay(day: number, gender: Genders): number {\r\n\t\treturn day + GenderWeight[gender];\r\n\t}\r\n\r\n\tpublic static toArray(): Genders[] {\r\n\t\treturn [\"M\", \"F\"];\r\n\t}\r\n\r\n\tprivate static MAX_MONTH_DAY: number = 31;\r\n}\r\n\r\nexport default Gender;\r\n","export const CF_INTRODUCTION_DATE = new Date(\"1973-09-29\");\r\n","import dayjs from \"dayjs\";\r\nimport {\r\n\tIBelfioreConnector,\r\n\tBelfiorePlace,\r\n} from \"@marketto/belfiore-connector\";\r\nimport DiacriticRemover from \"@marketto/diacritic-remover\";\r\nimport {\r\n\tCRC_OFFSET,\r\n\tCRC_SIZE,\r\n\tDAY_OFFSET,\r\n\tDAY_SIZE,\r\n\tFIRSTNAME_OFFSET,\r\n\tFIRSTNAME_SIZE,\r\n\tGENDER_OFFSET,\r\n\tGENDER_SIZE,\r\n\tLASTNAME_OFFSET,\r\n\tLASTNAME_SIZE,\r\n\tMONTH_OFFSET,\r\n\tMONTH_SIZE,\r\n\tPLACE_OFFSET,\r\n\tPLACE_SIZE,\r\n\tYEAR_OFFSET,\r\n\tYEAR_SIZE,\r\n} from \"../const/cf-offsets.const\";\r\nimport { CF_NAME_MATCHER, CF_SURNAME_MATCHER } from \"../const/matcher.const\";\r\nimport { CONSONANT_LIST, VOWEL_LIST } from \"../const/matcher.const\";\r\nimport { DateDay, DateMonth, DateUtils, MultiFormatDate } from \"../date-utils\";\r\nimport BirthMonth from \"../enums/birth-month.enum\";\r\nimport GenderWeight from \"../enums/gender-weight.enum\";\r\nimport Omocodes from \"../enums/omocodes.enum\";\r\nimport type IPersonalInfo from \"../interfaces/personal-info.interface\";\r\nimport type Genders from \"../types/genders.type\";\r\nimport CheckDigitizer from \"./check-digitizer.class\";\r\nimport Gender from \"./gender.class\";\r\nimport { CF_INTRODUCTION_DATE } from \"../const/logic.const\";\r\n\r\nconst diacriticRemover = new DiacriticRemover();\r\n\r\nexport default class Parser {\r\n\tconstructor(private readonly belfioreConnector: IBelfioreConnector) {}\r\n\r\n\t/**\r\n\t * Default omocode bitmap\r\n\t */\r\n\tpublic OMOCODE_BITMAP: number = 0b0111011011000000;\r\n\r\n\t/**\r\n\t * Convert omocode CF into plain one\r\n\t * @param codiceFiscale Partial or complete Omocode/Regular CF to parse, starting from LastName\r\n\t * @returns Regular CF w/o omocodes chars\r\n\t */\r\n\tpublic cfDeomocode(codiceFiscale: string): string {\r\n\t\tif (codiceFiscale && codiceFiscale.length <= YEAR_OFFSET) {\r\n\t\t\treturn codiceFiscale;\r\n\t\t}\r\n\t\tconst deomocodedCf = this.partialCfDeomocode(codiceFiscale);\r\n\t\tif (deomocodedCf.length < CRC_OFFSET) {\r\n\t\t\treturn deomocodedCf;\r\n\t\t}\r\n\t\tconst partialDeomocodedCf = deomocodedCf.substring(\r\n\t\t\tLASTNAME_OFFSET,\r\n\t\t\tCRC_OFFSET\r\n\t\t);\r\n\t\treturn (\r\n\t\t\tpartialDeomocodedCf +\r\n\t\t\tthis.appyCaseToChar(\r\n\t\t\t\tCheckDigitizer.checkDigit(deomocodedCf) || \"\",\r\n\t\t\t\tdeomocodedCf.substring(CRC_OFFSET, CRC_OFFSET + CRC_SIZE)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic cfOmocode(codiceFiscale: string, omocodeId: number): string {\r\n\t\tif (!omocodeId) {\r\n\t\t\treturn this.cfDeomocode(codiceFiscale);\r\n\t\t}\r\n\t\tconst omocodedCf = codiceFiscale.split(\"\");\r\n\t\t// tslint:disable-next-line: prefer-for-of\r\n\t\tfor (let i = codiceFiscale.length - 1, o = 0; i >= 0; i--) {\r\n\t\t\t// tslint:disable-next-line: no-bitwise\r\n\t\t\tif ((2 ** i) & this.OMOCODE_BITMAP) {\r\n\t\t\t\t// tslint:disable-next-line: no-bitwise\r\n\t\t\t\tconst charToEncode: boolean = !!(omocodeId & (2 ** o));\r\n\t\t\t\tconst isOmocode: boolean = isNaN(parseInt(omocodedCf[i], 10));\r\n\t\t\t\tif (charToEncode !== isOmocode) {\r\n\t\t\t\t\tconst char: any = omocodedCf[i].toUpperCase();\r\n\t\t\t\t\tomocodedCf[i] = Omocodes[char];\r\n\t\t\t\t}\r\n\t\t\t\to++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst crc = omocodedCf[CRC_OFFSET];\r\n\t\tif (crc) {\r\n\t\t\tconst partialCf = omocodedCf.slice(LASTNAME_OFFSET, CRC_OFFSET).join(\"\");\r\n\t\t\tomocodedCf[CRC_OFFSET] = this.appyCaseToChar(\r\n\t\t\t\tCheckDigitizer.checkDigit(partialCf) || \"\",\r\n\t\t\t\tcrc\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn omocodedCf.join(\"\");\r\n\t}\r\n\r\n\tpublic cfOmocodeId(codiceFiscale: string): number {\r\n\t\tconst cfOmocodeBitmap = codiceFiscale\r\n\t\t\t.split(\"\")\r\n\t\t\t// tslint:disable-next-line: no-bitwise\r\n\t\t\t.filter((char, index) => (2 ** index) & this.OMOCODE_BITMAP)\r\n\t\t\t.map((char) => (/^[a-z]$/i.test(diacriticRemover[char]) ? 1 : 0))\r\n\t\t\t.join(\"\");\r\n\t\treturn parseInt(cfOmocodeBitmap, 2);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse lastName information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Partial/possible lastName\r\n\t */\r\n\tpublic cfToLastName(codiceFiscale: string): string | null {\r\n\t\tconst cfLastNamePart = codiceFiscale?.substring(\r\n\t\t\tLASTNAME_OFFSET,\r\n\t\t\tLASTNAME_OFFSET + LASTNAME_SIZE\r\n\t\t);\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcfLastNamePart.length !== LASTNAME_SIZE ||\r\n\t\t\t!new RegExp(`^(?:${CF_SURNAME_MATCHER})`, \"iu\").test(cfLastNamePart)\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst lastNameCf = codiceFiscale.substring(\r\n\t\t\tLASTNAME_OFFSET,\r\n\t\t\tLASTNAME_OFFSET + LASTNAME_SIZE\r\n\t\t);\r\n\r\n\t\tconst [cons = \"\"] =\r\n\t\t\tlastNameCf.match(new RegExp(`^[${CONSONANT_LIST}]{1,3}`, \"ig\")) || [];\r\n\t\tconst [vow = \"\"] =\r\n\t\t\tlastNameCf.match(new RegExp(`[${VOWEL_LIST}]{1,3}`, \"ig\")) || [];\r\n\r\n\t\tconst matchingLength = cons.length + vow.length;\r\n\r\n\t\tif (\r\n\t\t\tmatchingLength < 2 ||\r\n\t\t\t(matchingLength < 3 && lastNameCf[2].toUpperCase() !== \"X\")\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (cons.length) {\r\n\t\t\tcase 3:\r\n\t\t\t\treturn (cons + vow).split(\"\").join(this.JOLLY_CHAR) + this.JOLLY_CHAR;\r\n\t\t\tcase 2:\r\n\t\t\t\treturn `${cons[0]}${vow[0]}*${cons[1]}${this.JOLLY_CHAR}`;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn `${cons[0]}${vow}${this.JOLLY_CHAR}`;\r\n\t\t\tdefault:\r\n\t\t\t\treturn `${vow}${vow.length === 3 ? this.JOLLY_CHAR : \"\"}`;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse firstName information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Partial/possible firstName\r\n\t */\r\n\tpublic cfToFirstName(codiceFiscale: string): string | null {\r\n\t\tconst cfFirstNamePart = codiceFiscale?.substring(\r\n\t\t\tFIRSTNAME_OFFSET,\r\n\t\t\tFIRSTNAME_OFFSET + FIRSTNAME_SIZE\r\n\t\t);\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcfFirstNamePart?.length !== FIRSTNAME_SIZE ||\r\n\t\t\t!new RegExp(`^(${CF_NAME_MATCHER})$`, \"iu\").test(cfFirstNamePart)\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.cfToLastName(cfFirstNamePart);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse gender information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Male or female\r\n\t */\r\n\tpublic cfToGender(codiceFiscale: string): Genders | null {\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcodiceFiscale.length < GENDER_OFFSET + GENDER_SIZE\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst cfGenderPart = codiceFiscale.substring(\r\n\t\t\tGENDER_OFFSET,\r\n\t\t\tGENDER_OFFSET + GENDER_SIZE\r\n\t\t);\r\n\t\tconst genderInt =\r\n\t\t\tparseInt(this.partialCfDeomocode(cfGenderPart, GENDER_OFFSET), 10) * 10;\r\n\t\treturn Gender.getGender(genderInt);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse birth year information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Birth Year (4 digits)\r\n\t */\r\n\tpublic cfToBirthYear(codiceFiscale: string): number | null {\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcodiceFiscale.length < YEAR_OFFSET + YEAR_SIZE\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst cfBirthYearPart = codiceFiscale.substring(\r\n\t\t\tYEAR_OFFSET,\r\n\t\t\tYEAR_OFFSET + YEAR_SIZE\r\n\t\t);\r\n\t\tconst birthYear: number = parseInt(\r\n\t\t\tthis.partialCfDeomocode(cfBirthYearPart, YEAR_OFFSET),\r\n\t\t\t10\r\n\t\t);\r\n\r\n\t\tif (isNaN(birthYear)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst current2DigitsYear: number = parseInt(dayjs().format(\"YY\"), 10);\r\n\r\n\t\tconst century: number = (birthYear > current2DigitsYear ? 1 : 0) * 100;\r\n\t\treturn dayjs()\r\n\t\t\t.subtract(current2DigitsYear - birthYear + century, \"years\")\r\n\t\t\t.year();\r\n\t}\r\n\r\n\t/**\r\n\t * Parse birth month information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Birth Month (0...11 - Date notation)\r\n\t */\r\n\tpublic cfToBirthMonth(codiceFiscale: string): DateMonth | null {\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcodiceFiscale.length < MONTH_OFFSET + MONTH_SIZE\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst cfBirthMonthPart: any = codiceFiscale\r\n\t\t\t.substring(MONTH_OFFSET, MONTH_OFFSET + MONTH_SIZE)\r\n\t\t\t.toUpperCase();\r\n\t\tconst birthMonth = BirthMonth[cfBirthMonthPart];\r\n\t\tif (typeof birthMonth !== \"number\" || birthMonth < 0 || birthMonth > 11) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn birthMonth as DateMonth;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse birth day information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Birth day (1..31)\r\n\t */\r\n\tpublic cfToBirthDay(codiceFiscale: string): DateDay | null {\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcodiceFiscale.length < DAY_OFFSET + DAY_SIZE\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst cfBirthDayPart = codiceFiscale.substring(\r\n\t\t\tDAY_OFFSET,\r\n\t\t\tDAY_OFFSET + DAY_SIZE\r\n\t\t);\r\n\t\tconst birthDay: number = parseInt(\r\n\t\t\tthis.partialCfDeomocode(cfBirthDayPart, DAY_OFFSET),\r\n\t\t\t10\r\n\t\t);\r\n\r\n\t\tif (isNaN(birthDay)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn Gender.getDay(birthDay);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse birth date information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @returns Birth Date\r\n\t */\r\n\tpublic cfToBirthDate(codiceFiscale: string): Date | null {\r\n\t\tconst birthDay = this.cfToBirthDay(codiceFiscale);\r\n\t\tif (!birthDay) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst birthMonth = this.cfToBirthMonth(codiceFiscale);\r\n\t\tif (typeof birthMonth !== \"number\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst birthYear = this.cfToBirthYear(codiceFiscale);\r\n\r\n\t\treturn DateUtils.ymdToDate(birthYear, birthMonth, birthDay);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse birth place information\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @param checkBirthDateConsistency Ensure birthday is between creation and expiran date of the cf city or country, default value: true\r\n\t * @returns Birth place\r\n\t */\r\n\tpublic async cfToBirthPlace(\r\n\t\tcodiceFiscale: string,\r\n\t\tcheckBirthDateConsistency: boolean = true\r\n\t): Promise<BelfiorePlace | null> {\r\n\t\tif (\r\n\t\t\ttypeof codiceFiscale !== \"string\" ||\r\n\t\t\tcodiceFiscale.length < PLACE_OFFSET + PLACE_SIZE\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst cfBirthPlacePart = codiceFiscale.substring(\r\n\t\t\tPLACE_OFFSET,\r\n\t\t\tPLACE_OFFSET + PLACE_SIZE\r\n\t\t);\r\n\t\tconst belfioreCode: string = this.partialCfDeomocode(\r\n\t\t\tcfBirthPlacePart,\r\n\t\t\tPLACE_OFFSET\r\n\t\t);\r\n\r\n\t\tconst birthPlace: BelfiorePlace | undefined | null =\r\n\t\t\tawait this.belfioreConnector.findByCode(belfioreCode);\r\n\t\tif (!birthPlace) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst { creationDate, expirationDate } = birthPlace;\r\n\t\tif ((creationDate || expirationDate) && checkBirthDateConsistency) {\r\n\t\t\tconst birthDate = this.cfToBirthDate(codiceFiscale);\r\n\t\t\tconst isBirthDateAfterCfIntroduction = dayjs(CF_INTRODUCTION_DATE)\r\n\t\t\t\t// Adding some tolerance\r\n\t\t\t\t.add(5, \"years\")\r\n\t\t\t\t.isBefore(birthDate, \"day\");\r\n\r\n\t\t\t// Skipping birthDate vs Creation/Expiration check for people born up to 5y after cf introduction\r\n\t\t\tif (birthDate && isBirthDateAfterCfIntroduction) {\r\n\t\t\t\tconst datePlaceConsistency =\r\n\t\t\t\t\t// BirthDay is before expiration date\r\n\t\t\t\t\t(!expirationDate ||\r\n\t\t\t\t\t\tdayjs(birthDate).isBefore(expirationDate, \"day\")) &&\r\n\t\t\t\t\t// BirthDay is after creation date\r\n\t\t\t\t\t(!creationDate || dayjs(birthDate).isAfter(creationDate, \"day\"));\r\n\t\t\t\tif (!datePlaceConsistency) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn birthPlace;\r\n\t}\r\n\r\n\t/**\r\n\t * @param fiscalCode 16 character Codice Fiscale to decode\r\n\t * @returns Decoded CF Info\r\n\t */\r\n\tpublic async cfDecode(fiscalCode: string): Promise<IPersonalInfo> {\r\n\t\tconst year = this.cfToBirthYear(fiscalCode) || undefined;\r\n\t\t// 0 is a month\r\n\t\tconst month = this.cfToBirthMonth(fiscalCode) ?? undefined;\r\n\t\tconst day = this.cfToBirthDay(fiscalCode) || undefined;\r\n\t\tconst date = DateUtils.ymdToDate(year, month, day) || undefined;\r\n\t\tconst place = await this.cfToBirthPlace(fiscalCode);\r\n\t\tconst personalInfo: IPersonalInfo = {\r\n\t\t\tfirstName: this.cfToFirstName(fiscalCode) || undefined,\r\n\t\t\tlastName: this.cfToLastName(fiscalCode) || undefined,\r\n\r\n\t\t\tday,\r\n\t\t\tmonth,\r\n\t\t\tyear,\r\n\r\n\t\t\tdate,\r\n\r\n\t\t\tgender: this.cfToGender(fiscalCode) || undefined,\r\n\t\t\tplace: place || undefined,\r\n\r\n\t\t\tomocodeId: this.cfOmocodeId(fiscalCode),\r\n\t\t};\r\n\r\n\t\tif (year && month && day) {\r\n\t\t\tpersonalInfo.date = new Date(Date.UTC(year, month, day));\r\n\t\t}\r\n\r\n\t\treturn personalInfo;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse lastName to cf part\r\n\t * @param lastName Partial or complete CF to parse\r\n\t * @returns partial cf\r\n\t */\r\n\tpublic lastNameToCf(lastName?: string | null): string | null {\r\n\t\tif (!lastName || (lastName || \"\").trim().length < 2) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (!/^[A-Z ']{1,32}$/iu.test(diacriticRemover.replace(lastName))) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst consonants = this.charExtractor(lastName, CONSONANT_LIST);\r\n\t\tconst vowels = this.charExtractor(lastName, VOWEL_LIST);\r\n\r\n\t\tconst partialCf = (consonants + vowels).padEnd(3, \"X\").substring(0, 3);\r\n\r\n\t\tif (partialCf.length < 3) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn partialCf.toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Parse firstName to cf part\r\n\t * @param firstName Partial or complete CF to parse\r\n\t * @returns partial cf\r\n\t */\r\n\tpublic firstNameToCf(firstName?: string | null): string | null {\r\n\t\tif (!firstName || (firstName || \"\").trim().length < 2) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst consonants = this.charExtractor(firstName, CONSONANT_LIST);\r\n\t\tif (consonants.length >= 4) {\r\n\t\t\treturn (consonants[0] + consonants.substring(2, 4)).toUpperCase();\r\n\t\t}\r\n\t\treturn this.lastNameToCf(firstName);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse year to cf part\r\n\t * @param year Birth year 2 or 4 digit string, number above 19XX or below 100\r\n\t * @returns partial cf\r\n\t */\r\n\tpublic yearToCf(year: string | number): string | null {\r\n\t\tlet parsedYear: number;\r\n\t\tif (typeof year === \"string\") {\r\n\t\t\tparsedYear = parseInt(year, 10);\r\n\t\t} else {\r\n\t\t\tparsedYear = year;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\t!(\r\n\t\t\t\ttypeof parsedYear === \"number\" &&\r\n\t\t\t\t!isNaN(parsedYear) &&\r\n\t\t\t\t(parsedYear >= 1900 || parsedYear < 100)\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn `0${parsedYear}`.substr(-2);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse month information\r\n\t * @param month Month number 0..11\r\n\t * @returns Birth Month CF code\r\n\t */\r\n\tpublic monthToCf(month: DateMonth | number): string | null {\r\n\t\tif (month < 0 || month > 11) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn BirthMonth[month] || null;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse day information\r\n\t * @param day Day number 1..31\r\n\t * @param gender Gender enum value\r\n\t * @returns Birth Day CF code\r\n\t */\r\n\tpublic dayGenderToCf(day: DateDay | number, gender: Genders): string | null {\r\n\t\tif (day < 1 || day > 31) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst genderValue = GenderWeight[gender as any];\r\n\t\tif (typeof genderValue !== \"number\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn `0${day + genderValue}`.substr(-2);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse Year, Month, Day to Dated\r\n\t * @param year 4 digits Year\r\n\t * @param month 1 or 2 digits Month 0..11\r\n\t * @param day 1,2 digits Day 1..31\r\n\t * @returns Date or null if provided year/month/day are not valid\r\n\t */\r\n\tpublic yearMonthDayToDate(\r\n\t\tyear: number | null | undefined,\r\n\t\tmonth: DateMonth | null | undefined = 0,\r\n\t\tday: DateDay | null | undefined = 1\r\n\t): Date | null {\r\n\t\tif (\r\n\t\t\t!year ||\r\n\t\t\tyear < 1861 ||\r\n\t\t\t[month, day].some((param) => typeof param !== \"number\")\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst date = dayjs(Date.UTC(year, month || 0, day || 1));\r\n\t\tif (\r\n\t\t\t!date.isValid() ||\r\n\t\t\tdate.year() !== year ||\r\n\t\t\tdate.month() !== month ||\r\n\t\t\tdate.date() !== day\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn date.toDate();\r\n\t}\r\n\r\n\t/**\r\n\t * Parse Place information to return city or country details\r\n\t * @param place Belfiore place instance, belfiore code or city/country name\r\n\t * @returns BelfiorePlace instance with the target city or country details\r\n\t */\r\n\tpublic async parsePlace(\r\n\t\tplace: BelfiorePlace | string\r\n\t): Promise<BelfiorePlace | null> {\r\n\t\tlet verifiedBirthPlace: BelfiorePlace | null | undefined;\r\n\t\tif (!place) {\r\n\t\t\treturn null;\r\n\t\t} else if (typeof place === \"object\" && place.belfioreCode) {\r\n\t\t\tverifiedBirthPlace = await this.belfioreConnector.findByCode(\r\n\t\t\t\tplace.belfioreCode\r\n\t\t\t);\r\n\t\t} else if (typeof place === \"string\") {\r\n\t\t\tverifiedBirthPlace =\r\n\t\t\t\t(await this.belfioreConnector.findByCode(place)) ||\r\n\t\t\t\t(await this.belfioreConnector.findByName(place));\r\n\t\t}\r\n\t\treturn verifiedBirthPlace || null;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse Date and Gender information to create Date/Gender CF part\r\n\t * @param date Date instance, ISO8601 date string or array of numbers [year, month, day]\r\n\t * @param gender Gender enum value\r\n\t * @returns Birth date and Gender CF code\r\n\t */\r\n\tpublic dateGenderToCf(date: MultiFormatDate, gender: Genders): string | null {\r\n\t\tconst parsedDate = DateUtils.parseDate(date);\r\n\t\tif (!parsedDate) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst cfYear = this.yearToCf(parsedDate.getFullYear());\r\n\t\tconst cfMonth = this.monthToCf(parsedDate.getMonth());\r\n\t\tconst cfDayGender = this.dayGenderToCf(parsedDate.getDate(), gender);\r\n\r\n\t\treturn `${cfYear}${cfMonth}${cfDayGender}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse place name and province to Belfiore code\r\n\t * @param cityOrCountryName City or Country name\r\n\t * @param provinceId Province code for cities\r\n\t * @returns Matching place belfiore code, if only once is matching criteria\r\n\t */\r\n\t/**\r\n\t * Parse a Date and Gender information to create Date/Gender CF part\r\n\t * @param birthDate Date instance, ISO8601 date string or array of numbers [year, month, day]\r\n\t * @param cityOrCountryName City or Country name\r\n\t * @param provinceId Province code for cities\r\n\t * @returns Matching place belfiore code, if only once is matching criteria\r\n\t */\r\n\tpublic async placeToCf(\r\n\t\tcityOrCountryName: string,\r\n\t\tprovinceId?: string\r\n\t): Promise<string | null>;\r\n\tpublic async placeToCf(\r\n\t\tbirthDate: MultiFormatDate,\r\n\t\tcityOrCountryName: string,\r\n\t\tprovinceId?: string\r\n\t): Promise<string | null>;\r\n\tpublic async placeToCf(\r\n\t\tdateOrName: MultiFormatDate,\r\n\t\tnameOrProvince?: string,\r\n\t\tprovinceId?: string\r\n\t): Promise<string | null> {\r\n\t\tconst birthDate: Date | null = DateUtils.parseDate(dateOrName);\r\n\t\tlet name: string;\r\n\t\tlet province: string | undefined;\r\n\t\tif (!birthDate && typeof dateOrName === \"string\") {\r\n\t\t\tname = dateOrName;\r\n\t\t\tprovince = nameOrProvince;\r\n\t\t} else if (nameOrProvince) {\r\n\t\t\tname = nameOrProvince;\r\n\t\t\tprovince = provinceId;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet placeFinder: IBelfioreConnector | undefined = this.belfioreConnector;\r\n\t\tif (province) {\r\n\t\t\tplaceFinder = placeFinder.byProvince(province);\r\n\t\t}\r\n\t\tif (birthDate && placeFinder) {\r\n\t\t\tplaceFinder = placeFinder.from(birthDate);\r\n\t\t}\r\n\t\tif (placeFinder) {\r\n\t\t\tconst foundPlace: BelfiorePlace | null = await new Parser(\r\n\t\t\t\tplaceFinder\r\n\t\t\t).parsePlace(name);\r\n\t\t\tif (foundPlace) {\r\n\t\t\t\treturn foundPlace.belfioreCode;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates full CF\r\n\t * @returns Complete CF\r\n\t */\r\n\tpublic async encodeCf({\r\n\t\tlastName,\r\n\t\tfirstName,\r\n\r\n\t\tyear,\r\n\t\tmonth,\r\n\t\tday,\r\n\t\tdate,\r\n\r\n\t\tgender,\r\n\t\tplace,\r\n\r\n\t\tomocodeId = 0,\r\n\t}: Omit<IPersonalInfo, \"place\"> & {\r\n\t\tplace?: BelfiorePlace | string | undefined;\r\n\t}): Promise<string | null> {\r\n\t\tconst dtParams =\r\n\t\t\tDateUtils.parseDate(date) || this.yearMonthDayToDate(year, month, day);\r\n\t\tif (!(dtParams && lastName && firstName && gender && place)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst generator = [\r\n\t\t\tasync () => this.lastNameToCf(lastName),\r\n\t\t\tasync () => this.firstNameToCf(firstName),\r\n\t\t\tasync () => this.dateGenderToCf(dtParams, gender),\r\n\t\t\tasync () =>\r\n\t\t\t\tawait this.placeToCf(\r\n\t\t\t\t\tdtParams,\r\n\t\t\t\t\t(place as BelfiorePlace)?.belfioreCode || (place as string)\r\n\t\t\t\t),\r\n\t\t];\r\n\t\tlet cf = \"\";\r\n\t\tfor (const cfPartGenerator of generator) {\r\n\t\t\tconst cfValue = await cfPartGenerator();\r\n\t\t\tif (!cfValue) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tcf += cfValue;\r\n\t\t}\r\n\r\n\t\treturn this.cfOmocode(cf, omocodeId);\r\n\t}\r\n\r\n\tprivate JOLLY_CHAR: string = \"*\";\r\n\r\n\tprivate checkBitmap(offset: number): boolean {\r\n\t\t// tslint:disable-next-line: no-bitwise\r\n\t\treturn !!((2 ** offset) & this.OMOCODE_BITMAP);\r\n\t}\r\n\r\n\tprivate charOmocode(char: string, offset: number): string {\r\n\t\tif (/^[A-Z]$/giu.test(char) && this.checkBitmap(offset)) {\r\n\t\t\treturn Omocodes[char.toUpperCase() as any];\r\n\t\t}\r\n\r\n\t\treturn char;\r\n\t}\r\n\r\n\tprivate charExtractor(text: string, CHAR_LIST: string): string {\r\n\t\tconst charMatcher = new RegExp(`[${CHAR_LIST}]{1,24}`, \"ig\");\r\n\t\tconst diacriticFreeText = diacriticRemover.replace(text).trim();\r\n\t\tconst matchingChars = diacriticFreeText.match(charMatcher);\r\n\t\treturn (matchingChars || []).join(\"\");\r\n\t}\r\n\r\n\t/**\r\n\t * Convert omocode full or chunk CF into plain one\r\n\t * @param partialCodiceFiscale Partial or complete Omocode/Regular CF to parse\r\n\t * @param offset starting point of the given chunk in the 16 char CF\r\n\t * @returns Regular version w/o omocodes chars of the given chunk\r\n\t */\r\n\tprivate partialCfDeomocode(\r\n\t\tpartialCodiceFiscale: string,\r\n\t\toffset: number = 0\r\n\t): string {\r\n\t\tconst charReplacer = (char: string, position: number) =>\r\n\t\t\tthis.charOmocode(char, position + offset);\r\n\t\treturn partialCodiceFiscale.replace(/[\\dA-Z]/giu, charReplacer);\r\n\t}\r\n\r\n\tprivate appyCaseToChar(targetChar: string, counterCaseChar: string): string {\r\n\t\tif (targetChar && counterCaseChar) {\r\n\t\t\tconst isUpperCase =\r\n\t\t\t\tcounterCaseChar[0] === counterCaseChar[0].toUpperCase();\r\n\t\t\tconst isLowerCase =\r\n\t\t\t\tcounterCaseChar[0] === counterCaseChar[0].toLowerCase();\r\n\r\n\t\t\tif (isUpperCase && !isLowerCase) {\r\n\t\t\t\treturn targetChar[0].toUpperCase();\r\n\t\t\t} else if (!isUpperCase && isLowerCase) {\r\n\t\t\t\treturn targetChar[0].toLowerCase();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn targetChar[0];\r\n\t}\r\n}\r\n","const INVALID_SURNAME: string =\r\n\t\"Provided lastName is not valid, only letters, diacritics and apostrophe allowed\";\r\nconst INVALID_NAME: string =\r\n\t\"Provided name is not valid, only letters, diacritics and apostrophe allowed\";\r\nconst INVALID_DAY: string = \"Provided day is not valid\";\r\nconst INVALID_GENDER: string = \"Provided gender is not valid\";\r\nconst INVALID_DAY_OR_GENDER: string =\r\n\t\"Provided day and/or gender are not valid\";\r\nconst INVALID_YEAR: string =\r\n\t\"Provided year is not valid, only 2 or 4 digit numbers are allowed\";\r\nconst INVALID_DATE: string = \"Provided date is not valid\";\r\nconst INVALID_PLACE_NAME: string = \"Proviced City/Country name is not valid\";\r\n\r\nexport {\r\n\tINVALID_DATE,\r\n\tINVALID_DAY,\r\n\tINVALID_DAY_OR_GENDER,\r\n\tINVALID_GENDER,\r\n\tINVALID_NAME,\r\n\tINVALID_PLACE_NAME,\r\n\tINVALID_SURNAME,\r\n\tINVALID_YEAR,\r\n};\r\n","import * as ErrorMessages from \"../const/error-messages.const\";\r\n\r\nclass CfuError extends Error {\r\n    constructor(errorMessage: string)\r\n    constructor(errorCode: string) {\r\n        super((Object.entries(ErrorMessages).find(([errId]) => errId === errorCode) || [])[1] || errorCode);\r\n    }\r\n}\r\n\r\nexport default CfuError;\r\n","import {\r\n\tBelfiorePlace,\r\n\tIBelfioreConnector,\r\n} from \"@marketto/belfiore-connector\";\r\nimport DiacriticRemover from \"@marketto/diacritic-remover\";\r\nimport {\r\n\tINVALID_DATE,\r\n\tINVALID_DAY,\r\n\tINVALID_DAY_OR_GENDER,\r\n\tINVALID_GENDER,\r\n\tINVALID_NAME,\r\n\tINVALID_SURNAME,\r\n\tINVALID_YEAR,\r\n} from \"../const/error-messages.const\";\r\nimport {\r\n\tBELFIORE_CODE_MATCHER,\r\n\tCF_NAME_MATCHER,\r\n\tCF_SURNAME_MATCHER,\r\n\tCHECK_DIGIT,\r\n\tCODICE_FISCALE,\r\n\tCONSONANT_LIST,\r\n\tDAY_MATCHER,\r\n\tFEMALE_DAY_MATCHER,\r\n\tFEMALE_FULL_DATE_MATCHER,\r\n\tFULL_DATE_MATCHER,\r\n\tMALE_DAY_MATCHER,\r\n\tMALE_FULL_DATE_MATCHER,\r\n\tMONTH_MATCHER,\r\n\tVOWEL_LIST,\r\n\tYEAR_MATCHER,\r\n} from \"../const/matcher.const\";\r\nimport {\r\n\tDATE_MATCHER,\r\n\tDateDay,\r\n\tDateMonth,\r\n\tDateUtils,\r\n\tMultiFormatDate,\r\n} from \"../date-utils/\";\r\nimport Omocodes from \"../enums/omocodes.enum\";\r\nimport type IPersonalInfo from \"../interfaces/personal-info.interface\";\r\nimport type Genders from \"../types/genders.type\";\r\nimport CfuError from \"./cfu-error.class\";\r\nimport Gender from \"./gender.class\";\r\nimport Parser from \"./parser.class\";\r\nimport dayjs from \"dayjs\";\r\n\r\nconst diacriticRemover = new DiacriticRemover();\r\n\r\nexport default class Pattern {\r\n\tprivate parser: Parser;\r\n\r\n\tconstructor(private readonly belfioreConnector: IBelfioreConnector) {\r\n\t\tthis.parser = new Parser(belfioreConnector);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given lastName or generic\r\n\t * @param lastName Optional lastName to generate validation regexp\r\n\t * @return CF Surname matcher\r\n\t * @throw INVALID_SURNAME\r\n\t */\r\n\tpublic cfLastName(lastName?: string): RegExp {\r\n\t\tlet matcher: string = CF_SURNAME_MATCHER;\r\n\t\tif (lastName) {\r\n\t\t\tif (!this.lastName().test(lastName)) {\r\n\t\t\t\tthrow new CfuError(INVALID_SURNAME);\r\n\t\t\t}\r\n\t\t\tmatcher = this.parser.lastNameToCf(lastName) || matcher;\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given name or generic\r\n\t * @param name Optional name to generate validation regexp\r\n\t * @return CF name matcher\r\n\t * @throw INVALID_NAME\r\n\t */\r\n\tpublic cfFirstName(name?: string): RegExp {\r\n\t\tlet matcher: string = CF_NAME_MATCHER;\r\n\t\tif (name) {\r\n\t\t\tif (!this.lastName().test(name)) {\r\n\t\t\t\tthrow new CfuError(INVALID_NAME);\r\n\t\t\t}\r\n\t\t\tmatcher = this.parser.firstNameToCf(name) || matcher;\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given year or generic\r\n\t * @param year Optional year to generate validation regexp\r\n\t * @return CF year matcher\r\n\t */\r\n\tpublic cfYear(year?: number): RegExp {\r\n\t\tlet matcher: string = YEAR_MATCHER;\r\n\t\tif (year) {\r\n\t\t\tconst parsedYear = this.parser.yearToCf(year);\r\n\t\t\tif (parsedYear) {\r\n\t\t\t\tmatcher = this.deomocode(parsedYear);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new CfuError(INVALID_YEAR);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given month or generic\r\n\t * @param month Optional month to generate validation regexp\r\n\t * @return CF month matcher\r\n\t */\r\n\tpublic cfMonth(month?: DateMonth) {\r\n\t\tlet matcher: string = MONTH_MATCHER;\r\n\t\tif (month) {\r\n\t\t\tmatcher = this.parser.monthToCf(month) || matcher;\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given day or generic\r\n\t * @param day Optional day to generate validation regexp\r\n\t * @return CF day matcher\r\n\t */\r\n\tpublic cfDay(day?: DateDay): RegExp {\r\n\t\tlet matcher = DAY_MATCHER;\r\n\t\tif (day) {\r\n\t\t\tconst parsedDayM = this.parser.dayGenderToCf(day, \"M\");\r\n\t\t\tconst parsedDayF = this.parser.dayGenderToCf(day, \"F\");\r\n\t\t\tif (parsedDayM && parsedDayF) {\r\n\t\t\t\tconst matcherM: string = this.deomocode(parsedDayM);\r\n\t\t\t\tconst matcherF: string = this.deomocode(parsedDayF);\r\n\t\t\t\tmatcher = `(?:${matcherM})|(?:${matcherF})`;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new CfuError(INVALID_DAY);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given year or generic\r\n\t * @param day Optional day to generate validation regexp\r\n\t * @param gender Gender @see Genders\r\n\t * @return CF day and gender matcher\r\n\t */\r\n\tpublic cfDayGender(day?: DateDay, gender?: Genders): RegExp {\r\n\t\tif (!gender) {\r\n\t\t\treturn this.cfDay(day);\r\n\t\t}\r\n\t\tlet matcher;\r\n\t\tif (day) {\r\n\t\t\tconst parsedDayGender = this.parser.dayGenderToCf(day, gender);\r\n\t\t\tif (parsedDayGender) {\r\n\t\t\t\tmatcher = this.deomocode(parsedDayGender);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new CfuError(INVALID_DAY_OR_GENDER);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tswitch (gender) {\r\n\t\t\t\tcase \"M\":\r\n\t\t\t\t\tmatcher = MALE_DAY_MATCHER;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"F\":\r\n\t\t\t\t\tmatcher = FEMALE_DAY_MATCHER;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new CfuError(INVALID_GENDER);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Validation regexp for the given year or generic\r\n\t * @param date Optional date to generate validation regexp\r\n\t * @param gender @see Genders\r\n\t * @return CF date and gender matcher\r\n\t */\r\n\tpublic cfDateGender(\r\n\t\tdate?: MultiFormatDate | null,\r\n\t\tgender?: Genders | null\r\n\t): RegExp {\r\n\t\tif (date && !DateUtils.parseDate(date)) {\r\n\t\t\tthrow new CfuError(INVALID_DATE);\r\n\t\t}\r\n\t\tif (gender && !Gender.toArray().includes(gender)) {\r\n\t\t\tthrow new CfuError(INVALID_GENDER);\r\n\t\t}\r\n\t\tlet matcher = FULL_DATE_MATCHER;\r\n\t\tif (date) {\r\n\t\t\tconst parsedDateGender =\r\n\t\t\t\tgender && this.parser.dateGenderToCf(date, gender);\r\n\t\t\tif (parsedDateGender) {\r\n\t\t\t\tmatcher = this.deomocode(parsedDateGender);\r\n\t\t\t} else {\r\n\t\t\t\tconst parseDeomocode = (g: Genders): string => {\r\n\t\t\t\t\tconst parsedGender = this.parser.dateGenderToCf(date, g);\r\n\t\t\t\t\tif (!parsedGender) {\r\n\t\t\t\t\t\tthrow new CfuError(INVALID_DATE);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn parsedGender && this.deomocode(parsedGender);\r\n\t\t\t\t};\r\n\t\t\t\tmatcher = `(?:${Gender.toArray().map(parseDeomocode).join(\"|\")})`;\r\n\t\t\t}\r\n\t\t} else if (gender === \"M\") {\r\n\t\t\tmatcher = MALE_FULL_DATE_MATCHER;\r\n\t\t} else if (gender === \"F\") {\r\n\t\t\tmatcher = FEMALE_FULL_DATE_MATCHER;\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * @param placeName Optional place name to generate validation regexp\r\n\t * @return CF place matcher\r\n\t */\r\n\t/**\r\n\t * @param date Optional date to generate validation regexp\r\n\t * @param placeName Optional place name to generate validation regexp\r\n\t * @return CF place matcher\r\n\t */\r\n\tpublic async cfPlace(placeName?: string | null): Promise<RegExp>;\r\n\tpublic async cfPlace(\r\n\t\tbirthDate?: MultiFormatDate | null,\r\n\t\tplaceName?: string | null\r\n\t): Promise<RegExp>;\r\n\tpublic async cfPlace(\r\n\t\tbirthDateOrName?: MultiFormatDate | null,\r\n\t\tplaceName?: string | null\r\n\t): Promise<RegExp> {\r\n\t\tlet matcher = BELFIORE_CODE_MATCHER;\r\n\t\tif (birthDateOrName) {\r\n\t\t\tconst birthDate: Date | null = DateUtils.parseDate(birthDateOrName);\r\n\r\n\t\t\tif (birthDate && placeName) {\r\n\t\t\t\tconst place: string = placeName;\r\n\t\t\t\tconst parsedPlace = await this.parser.placeToCf(birthDate, place);\r\n\t\t\t\tmatcher = this.deomocode(parsedPlace || \"\");\r\n\t\t\t} else if (!birthDate && typeof birthDateOrName === \"string\") {\r\n\t\t\t\tconst place: string = birthDateOrName;\r\n\t\t\t\tconst parsedPlace = await this.parser.placeToCf(place);\r\n\t\t\t\tmatcher = this.deomocode(parsedPlace || \"\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Generates full CF validator based on given optional input or generic\r\n\t * @param personalInfo Input Object\r\n\t * @return CodiceFiscale matcher\r\n\t */\r\n\tpublic async codiceFiscale(\r\n\t\tpersonalInfo?: Omit<IPersonalInfo, \"place\"> & {\r\n\t\t\tplace?: BelfiorePlace | string | undefined;\r\n\t\t}\r\n\t): Promise<RegExp> {\r\n\t\tlet matcher = CODICE_FISCALE;\r\n\t\tif (personalInfo) {\r\n\t\t\tconst parsedCf = await this.parser.encodeCf(personalInfo);\r\n\r\n\t\t\tif (parsedCf) {\r\n\t\t\t\tmatcher = this.deomocode(parsedCf);\r\n\t\t\t} else {\r\n\t\t\t\tconst { lastName, firstName, year, month, day, date, gender, place } =\r\n\t\t\t\t\tpersonalInfo;\r\n\t\t\t\tif (\r\n\t\t\t\t\tlastName ||\r\n\t\t\t\t\tfirstName ||\r\n\t\t\t\t\tyear ||\r\n\t\t\t\t\tmonth ||\r\n\t\t\t\t\tday ||\r\n\t\t\t\t\tdate ||\r\n\t\t\t\t\tgender ||\r\n\t\t\t\t\tplace\r\n\t\t\t\t) {\r\n\t\t\t\t\tlet dtParams: Date | null = null;\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tdtParams = DateUtils.parseDate(date);\r\n\t\t\t\t\t} else if (year) {\r\n\t\t\t\t\t\tdtParams = this.parser.yearMonthDayToDate(year, month, day);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst generator: (() => Promise<RegExp>)[] = [\r\n\t\t\t\t\t\tasync () => this.cfLastName(lastName),\r\n\t\t\t\t\t\tasync () => this.cfFirstName(firstName),\r\n\t\t\t\t\t\tasync () => this.cfDateGender(dtParams, gender),\r\n\t\t\t\t\t\tasync () =>\r\n\t\t\t\t\t\t\tawait this.cfPlace(\r\n\t\t\t\t\t\t\t\tdtParams,\r\n\t\t\t\t\t\t\t\t(place as BelfiorePlace)?.belfioreCode || (place as string)\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t];\r\n\r\n\t\t\t\t\tmatcher = \"\";\r\n\t\t\t\t\tfor (const validator of generator) {\r\n\t\t\t\t\t\tconst cfMatcher = (await validator()).toString();\r\n\t\t\t\t\t\tconst match = cfMatcher.match(/\\^(.{1,256})\\$/);\r\n\t\t\t\t\t\tconst cfValue: string | null | undefined = match && match[1];\r\n\r\n\t\t\t\t\t\tif (!cfValue) {\r\n\t\t\t\t\t\t\tthrow new Error(`Unable to handle [${cfMatcher}]`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmatcher += `(?:${cfValue})`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Final addition of CheckDigit\r\n\t\t\t\t\tmatcher += CHECK_DIGIT;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\tprivate LETTER_SET: string = `[A-Z${diacriticRemover.matcherBy(\r\n\t\t/^[A-Z]$/iu\r\n\t)}]`;\r\n\tprivate SEPARATOR_SET: string = \"(?:'?\\\\s{0,4})\";\r\n\r\n\t/**\r\n\t * Returns lastName validator based on given cf or generic\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @return Generic or specific regular expression\r\n\t */\r\n\tpublic lastName(codiceFiscale?: string): RegExp {\r\n\t\tlet matcher: string = `${this.LETTER_SET}{1,24}`;\r\n\t\tif (codiceFiscale && /^[A-Z]{1,3}/iu.test(codiceFiscale)) {\r\n\t\t\tconst lastNameCf: string = codiceFiscale.substr(0, 3);\r\n\t\t\tconst diacriticizer = (matchingChars: string) =>\r\n\t\t\t\tmatchingChars\r\n\t\t\t\t\t.split(\"\")\r\n\t\t\t\t\t.map((char) => `[${diacriticRemover.insensitiveMatcher[char]}]`);\r\n\r\n\t\t\tconst [cons, vow] = [\r\n\t\t\t\t`^[${CONSONANT_LIST}]{1,3}`,\r\n\t\t\t\t`[${VOWEL_LIST}]{1,3}`,\r\n\t\t\t].map((charMatcher) =>\r\n\t\t\t\tdiacriticizer(\r\n\t\t\t\t\t(lastNameCf.match(new RegExp(charMatcher, \"ig\")) || [])[0] || \"\"\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\tconst diacriticsVowelList: string =\r\n\t\t\t\tVOWEL_LIST +\r\n\t\t\t\tdiacriticRemover.matcherBy(new RegExp(`^[${VOWEL_LIST}]$`, \"ui\"));\r\n\t\t\tconst diacriticsVowelMatcher: string = `[${diacriticsVowelList}]`;\r\n\t\t\tconst midDiacriticVowelMatcher: string = `(?:${diacriticsVowelMatcher}${this.SEPARATOR_SET}){0,24}`;\r\n\t\t\tconst endingDiacritcVowelMatcher: string = `(?:${this.SEPARATOR_SET}${midDiacriticVowelMatcher}${diacriticsVowelMatcher})?`;\r\n\t\t\tswitch (cons.length) {\r\n\t\t\t\tcase 3: {\r\n\t\t\t\t\tconst divider = midDiacriticVowelMatcher;\r\n\t\t\t\t\tmatcher =\r\n\t\t\t\t\t\tdivider +\r\n\t\t\t\t\t\tcons.join(`${this.SEPARATOR_SET}${divider}`) +\r\n\t\t\t\t\t\t`(?:${this.SEPARATOR_SET}${this.LETTER_SET}{0,24}${this.LETTER_SET})?`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 2: {\r\n\t\t\t\t\tconst possibilities = [\r\n\t\t\t\t\t\t`${vow[0]}${midDiacriticVowelMatcher}${this.SEPARATOR_SET}${cons[0]}${midDiacriticVowelMatcher}${cons[1]}`,\r\n\t\t\t\t\t\t`${cons[0]}${this.SEPARATOR_SET}` +\r\n\t\t\t\t\t\t\tvow.join(`${this.SEPARATOR_SET}`) +\r\n\t\t\t\t\t\t\t`${this.SEPARATOR_SET}${midDiacriticVowelMatcher}${cons[1]}`,\r\n\t\t\t\t\t\tcons.join(`${this.SEPARATOR_SET}`) +\r\n\t\t\t\t\t\t\t`${this.SEPARATOR_SET}${vow[0]}`,\r\n\t\t\t\t\t];\r\n\t\t\t\t\tmatcher = `(?:${possibilities.join(\r\n\t\t\t\t\t\t\"|\"\r\n\t\t\t\t\t)})${endingDiacritcVowelMatcher}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 1: {\r\n\t\t\t\t\tconst possibilities = [\r\n\t\t\t\t\t\tvow.slice(0, 2).join(`${this.SEPARATOR_SET}`) +\r\n\t\t\t\t\t\t\tmidDiacriticVowelMatcher +\r\n\t\t\t\t\t\t\tcons.join(`${this.SEPARATOR_SET}`),\r\n\t\t\t\t\t\t`${vow[0]}${this.SEPARATOR_SET}` +\r\n\t\t\t\t\t\t\tcons.join(`${this.SEPARATOR_SET}`) +\r\n\t\t\t\t\t\t\tvow[1],\r\n\t\t\t\t\t\t[cons[0], ...vow.slice(0, 2)].join(`${this.SEPARATOR_SET}`),\r\n\t\t\t\t\t];\r\n\t\t\t\t\tmatcher = `(?:${possibilities.join(\r\n\t\t\t\t\t\t\"|\"\r\n\t\t\t\t\t)})${endingDiacritcVowelMatcher}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tmatcher = `${vow.join(\r\n\t\t\t\t\t\t`${this.SEPARATOR_SET}`\r\n\t\t\t\t\t)}${endingDiacritcVowelMatcher}`;\r\n\t\t\t}\r\n\r\n\t\t\tif (vow?.length + cons?.length < 3) {\r\n\t\t\t\treturn this.isolatedInsensitiveTailor(`\\\\s{0,4}(${matcher})\\\\s{0,4}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.isolatedInsensitiveTailor(\r\n\t\t\t`\\\\s{0,4}((?:${matcher})(?:${this.SEPARATOR_SET}${this.LETTER_SET}{1,24}){0,24})\\\\s{0,4}`\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns name validator based on given cf or generic\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @return Generic or specific regular expression\r\n\t */\r\n\tpublic firstName(codiceFiscale?: string): RegExp {\r\n\t\tif (\r\n\t\t\tcodiceFiscale &&\r\n\t\t\tnew RegExp(`^[A-Z]{3}[${CONSONANT_LIST}]{3}`, \"iu\").test(codiceFiscale)\r\n\t\t) {\r\n\t\t\tconst nameCf: string = codiceFiscale.substr(3, 3);\r\n\r\n\t\t\tconst cons: string[] = (\r\n\t\t\t\t(nameCf.match(new RegExp(`^[${CONSONANT_LIST}]{1,3}`, \"ig\")) ||\r\n\t\t\t\t\t[])[0] || \"\"\r\n\t\t\t)\r\n\t\t\t\t.split(\"\")\r\n\t\t\t\t.map((char) => `[${diacriticRemover.insensitiveMatcher[char]}]`);\r\n\r\n\t\t\tconst [diacriticsVowelList, diacriticsConsonantList]: string[] = [\r\n\t\t\t\tVOWEL_LIST,\r\n\t\t\t\tCONSONANT_LIST,\r\n\t\t\t].map(\r\n\t\t\t\t(chars) =>\r\n\t\t\t\t\tchars + diacriticRemover.matcherBy(new RegExp(`^[${chars}]$`, \"ui\"))\r\n\t\t\t);\r\n\r\n\t\t\tconst matcher: string =\r\n\t\t\t\t`(?:[${diacriticsVowelList}]{1,24}${this.SEPARATOR_SET}){0,24}${cons[0]}${this.SEPARATOR_SET}(?:[${diacriticsVowelList}]{1,24}${this.SEPARATOR_SET}){0,24}(?:[${diacriticsConsonantList}]${this.SEPARATOR_SET}(?:[${diacriticsVowelList}]{1,24}${this.SEPARATOR_SET}){0,24})?` +\r\n\t\t\t\tcons\r\n\t\t\t\t\t.slice(1, 3)\r\n\t\t\t\t\t.join(\r\n\t\t\t\t\t\t`(?:[${diacriticsVowelList}]{1,24}${this.SEPARATOR_SET}){0,24}`\r\n\t\t\t\t\t) +\r\n\t\t\t\t`(?:${this.SEPARATOR_SET}${this.LETTER_SET}{1,24}){0,24}`;\r\n\r\n\t\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t\t}\r\n\t\treturn this.lastName((codiceFiscale || \"\").substr(3, 3));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns iso8601 date validator based on given cf or generic\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @return Generic or specific regular expression\r\n\t */\r\n\tpublic date(codiceFiscale?: string): RegExp {\r\n\t\tlet matcher: string = DATE_MATCHER.ISO8601_DATE_TIME;\r\n\t\tif (codiceFiscale) {\r\n\t\t\tconst parsedDate = this.parser.cfToBirthDate(codiceFiscale);\r\n\t\t\tif (parsedDate) {\r\n\t\t\t\tconst dateIso8601: string = parsedDate.toJSON();\r\n\t\t\t\tif (dayjs().diff(dayjs(parsedDate), \"y\") < 50) {\r\n\t\t\t\t\tconst century: number = parseInt(dateIso8601.substr(0, 2), 10);\r\n\t\t\t\t\tconst centuries: string[] = [century - 1, century].map((year) =>\r\n\t\t\t\t\t\tyear.toString().padStart(2, \"0\")\r\n\t\t\t\t\t);\r\n\t\t\t\t\tmatcher = `(?:${centuries.join(\"|\")})` + dateIso8601.substr(2, 8);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmatcher = dateIso8601.substr(0, 10);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.isolatedInsensitiveTailor(\r\n\t\t\t`${matcher}(?:T${DATE_MATCHER.TIME}(?:${DATE_MATCHER.TIMEZONE})?)?`\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns gender validator based on given cf or generic\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @return Generic or specific regular expression\r\n\t */\r\n\tpublic gender(codiceFiscale?: string): RegExp {\r\n\t\tconst parsedGender = codiceFiscale && this.parser.cfToGender(codiceFiscale);\r\n\t\tconst matcher: string = parsedGender || `[${Gender.toArray().join(\"\")}]`;\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns place validator based on given cf or generic\r\n\t * @param codiceFiscale Partial or complete CF to parse\r\n\t * @return Generic or specific regular expression\r\n\t */\r\n\tpublic async place(codiceFiscale?: string): Promise<RegExp> {\r\n\t\tlet matcher: string = \".{1,32}\";\r\n\t\tconst parsedPlace =\r\n\t\t\tcodiceFiscale && (await this.parser.cfToBirthPlace(codiceFiscale));\r\n\r\n\t\tif (parsedPlace) {\r\n\t\t\tconst nameMatcher: string = parsedPlace.name.replace(/./gu, (c) =>\r\n\t\t\t\tdiacriticRemover[c] === c ? c : `[${c}${diacriticRemover[c]}]`\r\n\t\t\t);\r\n\t\t\tmatcher = `(?:(?:${nameMatcher})|${parsedPlace.belfioreCode})`;\r\n\t\t}\r\n\r\n\t\treturn this.isolatedInsensitiveTailor(matcher);\r\n\t}\r\n\r\n\tpublic deomocode(omocode: string): string {\r\n\t\treturn omocode.replace(/\\d/gu, (n: any) => `[${n}${Omocodes[n]}]`);\r\n\t}\r\n\r\n\tprivate isolatedInsensitiveTailor(matcher: string): RegExp {\r\n\t\treturn new RegExp(`^(?:${matcher})$`, \"iu\");\r\n\t}\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport {\r\n\tIBelfioreConnector,\r\n\tBelfiorePlace,\r\n} from \"@marketto/belfiore-connector\";\r\nimport {\r\n\tCRC_OFFSET,\r\n\tCRC_SIZE,\r\n\tDATE_OFFSET,\r\n\tDATE_SIZE,\r\n\tFIRSTNAME_OFFSET,\r\n\tFIRSTNAME_SIZE,\r\n\tGENDER_OFFSET,\r\n\tGENDER_SIZE,\r\n\tLASTNAME_OFFSET,\r\n\tLASTNAME_SIZE,\r\n\tPLACE_OFFSET,\r\n\tPLACE_SIZE,\r\n\tYEAR_OFFSET,\r\n\tYEAR_SIZE,\r\n} from \"../const/cf-offsets.const\";\r\nimport { DateUtils, MultiFormatDate } from \"../date-utils/\";\r\nimport type IPersonalInfo from \"../interfaces/personal-info.interface\";\r\nimport type Genders from \"../types/genders.type\";\r\nimport CheckDigitizer from \"./check-digitizer.class\";\r\nimport Parser from \"./parser.class\";\r\nimport Pattern from \"./pattern.class\";\r\nimport type IMismatchVerboseErrors from \"../interfaces/mismatch-verbose-errors.interface\";\r\n\r\nexport default class CFMismatchValidator {\r\n\tprivate pattern: Pattern;\r\n\tprivate parser: Parser;\r\n\tconstructor(\r\n\t\tbelfioreConnector: IBelfioreConnector,\r\n\t\tprivate readonly codiceFiscale: string\r\n\t) {\r\n\t\tthis.pattern = new Pattern(belfioreConnector);\r\n\t\tthis.parser = new Parser(belfioreConnector);\r\n\t}\r\n\r\n\tprivate get hasLastName() {\r\n\t\treturn this.codiceFiscale?.length >= LASTNAME_OFFSET + LASTNAME_SIZE;\r\n\t}\r\n\r\n\tprivate get hasFirstName() {\r\n\t\treturn this.codiceFiscale?.length >= FIRSTNAME_OFFSET + FIRSTNAME_SIZE;\r\n\t}\r\n\tprivate get hasBirthYear() {\r\n\t\treturn this.codiceFiscale?.length >= YEAR_OFFSET + YEAR_SIZE;\r\n\t}\r\n\tprivate get hasBirthDate() {\r\n\t\treturn this.codiceFiscale?.length >= DATE_OFFSET + DATE_SIZE;\r\n\t}\r\n\tprivate get hasGender() {\r\n\t\treturn this.codiceFiscale?.length >= GENDER_OFFSET + GENDER_SIZE;\r\n\t}\r\n\tprivate get hasBirthPlace() {\r\n\t\treturn this.codiceFiscale?.length >= PLACE_OFFSET + PLACE_SIZE;\r\n\t}\r\n\r\n\tprivate get hasCRC() {\r\n\t\treturn this.codiceFiscale?.length >= CRC_OFFSET + CRC_SIZE;\r\n\t}\r\n\r\n\tpublic async matchPersonalInfo(\r\n\t\tpersonalInfo: Omit<IPersonalInfo, \"place\"> & {\r\n\t\t\tplace?: string | BelfiorePlace;\r\n\t\t}\r\n\t): Promise<boolean> {\r\n\t\treturn (await this.pattern.codiceFiscale(personalInfo)).test(\r\n\t\t\tthis.codiceFiscale\r\n\t\t);\r\n\t}\r\n\tpublic async mismatchPersonalInfo(\r\n\t\tpersonalInfo: Omit<IPersonalInfo, \"place\"> & {\r\n\t\t\tplace?: string | BelfiorePlace;\r\n\t\t}\r\n\t): Promise<boolean> {\r\n\t\treturn !!(\r\n\t\t\tthis.codiceFiscale &&\r\n\t\t\tpersonalInfo &&\r\n\t\t\tpersonalInfo.lastName &&\r\n\t\t\tpersonalInfo.firstName &&\r\n\t\t\t(personalInfo.date ||\r\n\t\t\t\t(personalInfo.day && personalInfo.month && personalInfo.year)) &&\r\n\t\t\tpersonalInfo.gender &&\r\n\t\t\tpersonalInfo.place &&\r\n\t\t\t!(await this.matchPersonalInfo(personalInfo))\r\n\t\t);\r\n\t}\r\n\r\n\tpublic matchLastName(lastName?: string): boolean {\r\n\t\treturn (\r\n\t\t\tthis.hasLastName &&\r\n\t\t\tthis.pattern.lastName(this.codiceFiscale).test(lastName || \"\")\r\n\t\t);\r\n\t}\r\n\tpublic mismatchLastName(lastName?: string): boolean {\r\n\t\treturn this.hasLastName && !!lastName && !this.matchLastName(lastName);\r\n\t}\r\n\r\n\tpublic matchFirstName(firstName: string): boolean {\r\n\t\treturn (\r\n\t\t\tthis.hasFirstName &&\r\n\t\t\tthis.pattern.firstName(this.codiceFiscale).test(firstName || \"\")\r\n\t\t);\r\n\t}\r\n\tpublic mismatchFirstName(firstName: string): boolean {\r\n\t\treturn this.hasFirstName && !!firstName && !this.matchFirstName(firstName);\r\n\t}\r\n\r\n\tpublic matchBirthDate(birthDate: MultiFormatDate): boolean {\r\n\t\tif (this.hasBirthDate) {\r\n\t\t\tconst parsedCfDate = this.parser.cfToBirthDate(this.codiceFiscale);\r\n\t\t\tconst parsedDate = DateUtils.parseDate(birthDate);\r\n\t\t\tif (parsedCfDate && parsedDate) {\r\n\t\t\t\treturn dayjs(parsedCfDate).isSame(parsedDate, \"d\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic mismatchBirthDate(birthDate: MultiFormatDate): boolean {\r\n\t\treturn (\r\n\t\t\tthis.hasBirthYear &&\r\n\t\t\t!!DateUtils.parseDate(birthDate) &&\r\n\t\t\t!this.matchBirthDate(birthDate)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic matchGender(gender: Genders | string): boolean {\r\n\t\treturn (\r\n\t\t\tthis.hasGender &&\r\n\t\t\tthis.pattern.gender(this.codiceFiscale).test(gender || \"\")\r\n\t\t);\r\n\t}\r\n\r\n\tpublic mismatchGender(gender: Genders | string): boolean {\r\n\t\treturn this.hasGender && !!gender && !this.matchGender(gender);\r\n\t}\r\n\r\n\t/**\r\n\t * @param birthPlace BirthPlace, place name or BelfioreCode\r\n\t */\r\n\tpublic async matchBirthPlace(\r\n\t\tbirthPlace: BelfiorePlace | string\r\n\t): Promise<boolean> {\r\n\t\tif (this.hasBirthPlace && birthPlace) {\r\n\t\t\tconst matcher = await this.pattern.place(this.codiceFiscale);\r\n\t\t\tconst parsedBirthPlace = await this.parser.parsePlace(birthPlace);\r\n\r\n\t\t\treturn !!parsedBirthPlace && matcher.test(parsedBirthPlace?.belfioreCode);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param birthPlace BirthPlace, place name or BelfioreCode\r\n\t */\r\n\tpublic async mismatchBirthPlace(\r\n\t\tbirthPlace: BelfiorePlace | string\r\n\t): Promise<boolean> {\r\n\t\treturn (\r\n\t\t\tthis.hasBirthPlace &&\r\n\t\t\t!!birthPlace &&\r\n\t\t\t!(await this.matchBirthPlace(birthPlace))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Check the given cf validity by form, birth date/place and digit code\r\n\t * @param codiceFiscale Complete CF to parse\r\n\t * @return Verbose errors\r\n\t */\r\n\tpublic get errors(): Promise<IMismatchVerboseErrors | null> {\r\n\t\treturn Promise.all([\r\n\t\t\tthis.parser.cfToBirthPlace(this.codiceFiscale, false),\r\n\t\t\tthis.parser.cfToBirthPlace(this.codiceFiscale, true),\r\n\t\t])\r\n\t\t\t.then(([placeCheck, placeCreationExpirationCheck]) => ({\r\n\t\t\t\t// Checking lastName validity\r\n\t\t\t\t...(this.parser.cfToLastName(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { lastName: \"MISSING_OR_INVALID_LAST_NAME\" }),\r\n\t\t\t\t// Checking firstName validity\r\n\t\t\t\t...(this.parser.cfToFirstName(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { firstName: \"MISSING_OR_INVALID_FIRST_NAME\" }),\r\n\t\t\t\t// Checking Date validity\r\n\t\t\t\t...(this.parser.cfToBirthDate(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { date: \"MISSING_OR_INVALID_DATE\" }),\r\n\t\t\t\t// Checking Day validity\r\n\t\t\t\t...(this.parser.cfToBirthDay(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { date: \"MISSING_OR_INVALID_DAY\" }),\r\n\t\t\t\t// Checking Month validity\r\n\t\t\t\t...(this.parser.cfToBirthMonth(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { date: \"MISSING_OR_INVALID_MONTH\" }),\r\n\t\t\t\t// Checking Year validity\r\n\t\t\t\t...(this.parser.cfToBirthYear(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { date: \"MISSING_OR_INVALID_YEAR\" }),\r\n\t\t\t\t// Checking Gender validity\r\n\t\t\t\t...(this.parser.cfToGender(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { gender: \"MISSING_DAY\" }),\r\n\t\t\t\t// Checking Place validity\r\n\t\t\t\t...(placeCheck ? {} : { place: \"MISSING_OR_INVALID_PLACE\" }),\r\n\t\t\t\t// Checking Place Creation/Expiration vs Birthdate validity\r\n\t\t\t\t...(placeCreationExpirationCheck\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: {\r\n\t\t\t\t\t\t\tplace: \"PLACE_EXPIRED_OR_NOT_YET_CREATED_ON_BIRTDATE\",\r\n\t\t\t\t\t\t\tdate: \"BIRTHDATE_OUT_OF_BIRTH_PLACE_LIFE_RANGE\",\r\n\t\t\t\t\t  }),\r\n\t\t\t\t// Checking 16th char check digit validity\r\n\t\t\t\t...(this.codiceFiscale\r\n\t\t\t\t\t?.substring(CRC_OFFSET, CRC_OFFSET + CRC_SIZE)\r\n\t\t\t\t\t?.toUpperCase() === CheckDigitizer.checkDigit(this.codiceFiscale)\r\n\t\t\t\t\t? {}\r\n\t\t\t\t\t: { crc: \"INVALID_CRC_CODE\" }),\r\n\r\n\t\t\t\t// Checking length\r\n\t\t\t\t...(this.hasCRC ? {} : { crc: \"MISSING_CRC_CODE\" }),\r\n\t\t\t}))\r\n\t\t\t.then((errors) => (Object.keys(errors).length ? errors : null));\r\n\t}\r\n\r\n\t/**\r\n\t * Check the given cf validity by form, birth date/place and digit code\r\n\t * @return Generic or specific regular expression\r\n\t */\r\n\tpublic get valid(): Promise<boolean> {\r\n\t\treturn Promise.all([\r\n\t\t\tthis.pattern.codiceFiscale(),\r\n\t\t\tthis.parser.cfToBirthPlace(this.codiceFiscale),\r\n\t\t]).then(\r\n\t\t\t([cfPattern, cfToBirthPlace]) =>\r\n\t\t\t\t!(\r\n\t\t\t\t\t// Checking length\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t!this.hasCRC ||\r\n\t\t\t\t\t\t// Checking form validity\r\n\t\t\t\t\t\t!cfPattern.test(this.codiceFiscale) ||\r\n\t\t\t\t\t\t// Checking 16th char check digit validity\r\n\t\t\t\t\t\tthis.codiceFiscale\r\n\t\t\t\t\t\t\t?.substring(CRC_OFFSET, CRC_OFFSET + CRC_SIZE)\r\n\t\t\t\t\t\t\t?.toUpperCase() !==\r\n\t\t\t\t\t\t\tCheckDigitizer.checkDigit(this.codiceFiscale) ||\r\n\t\t\t\t\t\t// Checking Birth date/place validity\r\n\t\t\t\t\t\t!cfToBirthPlace\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\tpublic get invalid(): Promise<boolean> {\r\n\t\treturn this.valid.then((isValid) => !!this.codiceFiscale && !isValid);\r\n\t}\r\n}\r\n","import {\r\n\tIBelfioreConnector,\r\n\tBelfiorePlace,\r\n} from \"@marketto/belfiore-connector\";\r\nimport { DateUtils, MultiFormatDate } from \"../date-utils/\";\r\nimport type Genders from \"../types/genders.type\";\r\nimport CFMismatchValidator from \"./cf-mismatch-validator.class\";\r\nimport Parser from \"./parser.class\";\r\nimport Pattern from \"./pattern.class\";\r\nimport { CF_INTRODUCTION_DATE } from \"../const/logic.const\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport default class Validator {\r\n\tprivate parser: Parser;\r\n\tprivate pattern: Pattern;\r\n\r\n\tconstructor(private readonly belfioreConnector: IBelfioreConnector) {\r\n\t\tthis.parser = new Parser(belfioreConnector);\r\n\t\tthis.pattern = new Pattern(belfioreConnector);\r\n\t}\r\n\r\n\tpublic codiceFiscale(codiceFiscale: string): CFMismatchValidator {\r\n\t\treturn new CFMismatchValidator(this.belfioreConnector, codiceFiscale);\r\n\t}\r\n\r\n\tpublic isLastNameValid(lastName: string): boolean {\r\n\t\treturn this.pattern.lastName().test(lastName);\r\n\t}\r\n\tpublic isLastNameInvalid(lastName: string): boolean {\r\n\t\treturn !!lastName && !this.isLastNameValid(lastName);\r\n\t}\r\n\r\n\tpublic isFirstNameValid(firstName: string): boolean {\r\n\t\treturn this.pattern.firstName().test(firstName);\r\n\t}\r\n\tpublic isFirstNameInvalid(firstName: string): boolean {\r\n\t\treturn !!firstName && !this.isFirstNameValid(firstName);\r\n\t}\r\n\r\n\tpublic isBirthDateValid(birthDate: MultiFormatDate): boolean {\r\n\t\treturn !!DateUtils.parseDate(birthDate);\r\n\t}\r\n\tpublic isBirthDateInvalid(birthDate: MultiFormatDate): boolean {\r\n\t\treturn !!birthDate && !this.isBirthDateValid(birthDate);\r\n\t}\r\n\r\n\tpublic isGenderValid(gender: Genders | string): boolean {\r\n\t\treturn this.pattern.gender().test(gender);\r\n\t}\r\n\tpublic isGenderInvalid(gender: Genders | string): boolean {\r\n\t\treturn !!gender && !this.isGenderValid(gender);\r\n\t}\r\n\r\n\tpublic async isBirthPlaceValid(\r\n\t\tbirthPlace: BelfiorePlace | string\r\n\t): Promise<boolean> {\r\n\t\tconst parsedBirthPlace = await this.parser.parsePlace(birthPlace);\r\n\t\treturn (\r\n\t\t\t!!parsedBirthPlace &&\r\n\t\t\t!!(await this.belfioreConnector.findByCode(parsedBirthPlace.belfioreCode))\r\n\t\t);\r\n\t}\r\n\tpublic async isBirthPlaceInvalid(\r\n\t\tbirthPlace: BelfiorePlace | string\r\n\t): Promise<boolean> {\r\n\t\treturn !!birthPlace && !(await this.isBirthPlaceValid(birthPlace));\r\n\t}\r\n\r\n\tpublic async birthDatePlaceMatch(\r\n\t\tbirthDate: MultiFormatDate,\r\n\t\tbirthPlace: BelfiorePlace | string\r\n\t): Promise<boolean> {\r\n\t\tconst parsedPlace = await this.parser.parsePlace(birthPlace);\r\n\t\treturn (\r\n\t\t\tthis.isBirthDateValid(birthDate) &&\r\n\t\t\t!!parsedPlace &&\r\n\t\t\t(!!(await this.belfioreConnector\r\n\t\t\t\t.from(birthDate)\r\n\t\t\t\t.findByCode(parsedPlace.belfioreCode)) ||\r\n\t\t\t\t// Ignoring control for people born before CF introduction\r\n\t\t\t\t!dayjs(DateUtils.parseDate(birthDate)).isAfter(\r\n\t\t\t\t\tCF_INTRODUCTION_DATE,\r\n\t\t\t\t\t\"day\"\r\n\t\t\t\t))\r\n\t\t);\r\n\t}\r\n\tpublic async birthDatePlaceMismatch(\r\n\t\tbirthDate: MultiFormatDate,\r\n\t\tbirthPlace: BelfiorePlace | string\r\n\t): Promise<boolean> {\r\n\t\tconst parsedPlace = await this.parser.parsePlace(birthPlace);\r\n\t\treturn (\r\n\t\t\tthis.isBirthDateValid(birthDate) &&\r\n\t\t\t!!parsedPlace &&\r\n\t\t\t!(await this.birthDatePlaceMatch(birthDate, birthPlace))\r\n\t\t);\r\n\t}\r\n\r\n\tpublic async birthPlaceDateMatch(\r\n\t\tbirthPlace: BelfiorePlace | string,\r\n\t\tbirthDate: MultiFormatDate\r\n\t): Promise<boolean> {\r\n\t\treturn await this.birthDatePlaceMatch(birthDate, birthPlace);\r\n\t}\r\n\r\n\tpublic async birthPlaceDateMismatch(\r\n\t\tbirthPlace: BelfiorePlace | string,\r\n\t\tbirthDate: MultiFormatDate\r\n\t): Promise<boolean> {\r\n\t\treturn await this.birthDatePlaceMismatch(birthDate, birthPlace);\r\n\t}\r\n}\r\n","import {\r\n\tBelfiorePlace,\r\n\tIBelfioreConnector,\r\n} from \"@marketto/belfiore-connector\";\r\nimport CFMismatchValidator from \"./classes/cf-mismatch-validator.class\";\r\nimport CheckDigitizer from \"./classes/check-digitizer.class\";\r\nimport Gender from \"./classes/gender.class\";\r\nimport Parser from \"./classes/parser.class\";\r\nimport Pattern from \"./classes/pattern.class\";\r\nimport Validator from \"./classes/validator.class\";\r\nimport * as VALIDATOR from \"./const/matcher.const\";\r\nimport * as Matcher from \"./const/matcher.const\";\r\nimport {\r\n\tDATE_MATCHER,\r\n\ttype DateDay,\r\n\ttype DateMonth,\r\n\tDateUtils,\r\n\ttype MultiFormatDate,\r\n} from \"./date-utils/\";\r\nimport BirthMonth from \"./enums/birth-month.enum\";\r\nimport CRC from \"./enums/crc.enum\";\r\nimport Omocodes from \"./enums/omocodes.enum\";\r\nimport type Genders from \"./types/genders.type\";\r\nimport IMismatchVerboseErrors from \"./interfaces/mismatch-verbose-errors.interface\";\r\n\r\nexport type {\r\n\tBelfiorePlace,\r\n\tDateDay,\r\n\tDateMonth,\r\n\tGenders,\r\n\tMultiFormatDate,\r\n\tIMismatchVerboseErrors,\r\n};\r\n\r\nexport default class CodiceFiscaleUtils {\r\n\tpublic readonly validator: Validator;\r\n\tpublic readonly parser: Parser;\r\n\tpublic readonly pattern: Pattern;\r\n\r\n\tconstructor(public readonly belfioreConnector: IBelfioreConnector) {\r\n\t\tthis.validator = new Validator(belfioreConnector);\r\n\t\tthis.parser = new Parser(belfioreConnector);\r\n\t\tthis.pattern = new Pattern(belfioreConnector);\r\n\t}\r\n}\r\n\r\nexport {\r\n\tBirthMonth,\r\n\tCheckDigitizer,\r\n\tCRC,\r\n\tDATE_MATCHER,\r\n\tDateUtils,\r\n\tGender,\r\n\tOmocodes,\r\n\tVALIDATOR,\r\n\tMatcher,\r\n\tCFMismatchValidator,\r\n\tParser,\r\n\tPattern,\r\n\tValidator,\r\n\tCodiceFiscaleUtils,\r\n};\r\n"],"names":["CRC_OFFSET","YEAR","MONTH","DAYS_30_MONTHS","DAYS_31_MONTHS","MONTH_DAY","HOURS","MINUTES","SECONDS","MILLISECONDS","TIMEZONE","TIME","ISO8601_SHORT_DATE","ISO8601_DATE_TIME","DateUtils","parseDate","date","Date","RegExp","test","Array","isArray","length","some","value","isNaN","parsedDate","year","month","day","dayjs","UTC","isValid","toDate","err","ymdToDate","this","CONSONANT_LIST","VOWEL_LIST","OMOCODE_NUMBER_LIST","OMOCODE_NON_ZERO_NUMBER_LIST","OMOCODE_ZERO_LIST","MONTH_LIST","MONTH_30DAYS_LIST","MONTH_31DAYS_LIST","CITY_CODE_LIST","COUNTRY_CODE_LIST","CF_NAME_MATCHER","CF_SURNAME_MATCHER","CF_FULL_NAME_MATCHER","YEAR_MATCHER","LEAP_YEAR_MATCHER","MONTH_MATCHER","DAY_2X_MATCHER","DAY_3X_MATCHER","DAY_29_MATCHER","DAY_30_MATCHER","DAY_31_MATCHER","DAY_MATCHER","MALE_DAY_MATCHER","FEMALE_DAY_MATCHER","MONTH_DAY_MATCHER","FULL_DATE_MATCHER","MALE_FULL_DATE_MATCHER","FEMALE_FULL_DATE_MATCHER","CITY_CODE_MATCHER","COUNTRY_CODE_MATCHER","BELFIORE_CODE_MATCHER","CHECK_DIGIT","CODICE_FISCALE","PARTIAL_CF_NAME_MATCHER","PARTIAL_CF_FULL_NAME","PARTIAL_YEAR","PARTIAL_MONTH_DAY","PARTIAL_FULL_DATE","PARTIAL_BELFIORE_CODE_MATCHER","PARTIAL_CF","CRC","BirthMonth","CRC$1","CheckDigitizer","checkDigit","codiceFiscale","partialCF","substr","partialCfValue","charValue","evaluateChar","String","fromCharCode","CRC_MOD","CHAR_OFFSET","generator","evaluateCharGenerator","Symbol","iterator","index","char","toUpperCase","parseInt","charCodeAt","GenderWeight","BirthMonth$1","Omocodes","GenderWeight$1","Omocodes$1","Gender","getDay","genderDay","plainDay","F","MAX_MONTH_DAY","getGender","toArray","find","gender","genderizeDay","CF_INTRODUCTION_DATE","diacriticRemover","DiacriticRemover","Parser","constructor","belfioreConnector","OMOCODE_BITMAP","JOLLY_CHAR","cfDeomocode","deomocodedCf","partialCfDeomocode","substring","appyCaseToChar","cfOmocode","omocodeId","omocodedCf","split","i","o","Math","pow","crc","partialCf","slice","join","cfOmocodeId","cfOmocodeBitmap","filter","map","cfToLastName","cfLastNamePart","LASTNAME_OFFSET","lastNameCf","cons","match","vow","matchingLength","cfToFirstName","cfFirstNamePart","FIRSTNAME_OFFSET","cfToGender","GENDER_OFFSET","cfGenderPart","genderInt","cfToBirthYear","YEAR_OFFSET","cfBirthYearPart","birthYear","current2DigitsYear","format","century","subtract","cfToBirthMonth","MONTH_OFFSET","cfBirthMonthPart","birthMonth","cfToBirthDay","DAY_OFFSET","cfBirthDayPart","birthDay","cfToBirthDate","cfToBirthPlace","codiceFiscale_1","checkBirthDateConsistency","PLACE_OFFSET","cfBirthPlacePart","belfioreCode","birthPlace","findByCode","creationDate","expirationDate","birthDate","isBirthDateAfterCfIntroduction","add","isBefore","isAfter","cfDecode","fiscalCode","undefined","_a","place","personalInfo","firstName","lastName","lastNameToCf","trim","replace","charExtractor","padEnd","firstNameToCf","consonants","yearToCf","parsedYear","monthToCf","dayGenderToCf","genderValue","yearMonthDayToDate","param","parsePlace","verifiedBirthPlace","findByName","dateGenderToCf","getFullYear","getMonth","getDate","placeToCf","dateOrName","nameOrProvince","provinceId","name","province","placeFinder","byProvince","from","foundPlace","encodeCf","__awaiter","arguments","dtParams","cf","cfPartGenerator","cfValue","checkBitmap","offset","charOmocode","text","CHAR_LIST","charMatcher","partialCodiceFiscale","position","targetChar","counterCaseChar","isUpperCase","isLowerCase","toLowerCase","INVALID_SURNAME","INVALID_NAME","INVALID_DAY","INVALID_GENDER","INVALID_DAY_OR_GENDER","INVALID_YEAR","INVALID_DATE","CfuError","Error","errorCode","super","Object","entries","ErrorMessages","errId","Pattern","LETTER_SET","matcherBy","SEPARATOR_SET","parser","cfLastName","matcher","isolatedInsensitiveTailor","cfFirstName","cfYear","deomocode","cfMonth","cfDay","parsedDayM","parsedDayF","cfDayGender","parsedDayGender","cfDateGender","includes","parsedDateGender","parseDeomocode","g","parsedGender","cfPlace","birthDateOrName","placeName","parsedPlace","parsedCf","validator","cfMatcher","toString","diacriticizer","matchingChars","insensitiveMatcher","diacriticsVowelMatcher","midDiacriticVowelMatcher","endingDiacritcVowelMatcher","divider","diacriticsVowelList","diacriticsConsonantList","chars","DATE_MATCHER.ISO8601_DATE_TIME","dateIso8601","toJSON","diff","padStart","DATE_MATCHER.TIME","DATE_MATCHER.TIMEZONE","c","omocode","n","CFMismatchValidator","pattern","hasLastName","hasFirstName","hasBirthYear","hasBirthDate","DATE_OFFSET","hasGender","hasBirthPlace","hasCRC","matchPersonalInfo","mismatchPersonalInfo","matchLastName","mismatchLastName","matchFirstName","mismatchFirstName","matchBirthDate","parsedCfDate","isSame","mismatchBirthDate","matchGender","mismatchGender","matchBirthPlace","parsedBirthPlace","mismatchBirthPlace","errors","Promise","all","then","placeCheck","placeCreationExpirationCheck","assign","_b","keys","valid","cfPattern","invalid","Validator","isLastNameValid","isLastNameInvalid","isFirstNameValid","isFirstNameInvalid","isBirthDateValid","isBirthDateInvalid","isGenderValid","isGenderInvalid","isBirthPlaceValid","isBirthPlaceInvalid","birthDatePlaceMatch","birthDatePlaceMismatch","birthPlaceDateMatch","birthPlaceDateMismatch","CodiceFiscaleUtils"],"mappings":"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AAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,EAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACH,CAAA,CAAA,CA3BD,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CA2BJ,CAAA,CAAA,CAAA,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CC7BKC,GD6BLC,CAAeF,CAAAA,CAAAA,CAAAA,CAAAA,CEvBf,CAAMG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAME,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWC,CACxB,CAAA,CAAA,CAAA,CAAA,CAC0B,CAAlBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACP,CAAIhE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO0D,CAAYzD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK+D,CAC3B,CAAA,CAAA,CACD,MAAMC,CAAYD,CAAAA,CAAAA,CAAcE,CNjBJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CMiB4BpF,CACxD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIqF,CAAiB,CAAA,CAAA,CACrB,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CAAalD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKmD,CAAaJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACzCE,CAAkBC,CAAAA,CAAAA,CAAAA,CAEnB,OAAOE,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZJ,CAAiBjD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKsD,CAAWtD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKuD,CAExC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACD,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACP,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOJ,CACbJ,CAAAA,CAAoB,CAEpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CC3BAS,CD2BwBxD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKyD,CAAsBV,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CC1B1CW,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY,CAAMH,CAAAA,CAAAA,CAAAA,CAAAA,CAC5BA,CANgB,CAAA,CAAA,CAAA,CAAA,CAItBA,CD4BA,CAUO,CAAQC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAsBV,CAAoB,CAAA,CAAA,CAAA,CAAA,CACzD,GAAyB,CAAdA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BA,CAAU7D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC9C,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI0E,CAAQ,CAAA,CAAA,CAAGA,CAAQb,CAAAA,CAAAA,CAAU7D,CAAQ0E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,CACtD,CAAA,CAAA,CAAA,CAAIC,CAAed,CAAAA,CAAAA,CAAUa,GAAOE,CACV,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAQ/E,CAAK8E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAGtCA,CAAOT,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOC,CAAaU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASF,CAAM,CAAA,CAAA,CAAA,CAAA,CAAM7D,CAAKuD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAI7BK,CAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAG1BG,CAAStB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIoB,GAAc,CAG3BA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKG,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKhE,CAAKuD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEjC,CAEF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CACP,CAAA,CA9BcX,CAAWW,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CACtBX,CAAAA,CAAAA,CAAAA,CAAAA,CAAOU,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CDpClC,CAAKZ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACJA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,CAAA,CAAA,CAbD,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAaJ,CAAA,CAAA,CAAA,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CGfKuB,CHeLC,CAAAA,CAAAA,CAAAA,CAAAA,CAAexB,CGff,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKuB,CACJA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GACA,CAHD,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAGJ,CAAA,CAAA,CAAA,CAAA,CAED,CCLKE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CDKLC,CAAeH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CCLf,CAAKE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACJA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,CAXD,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAWJ,CAAA,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAE,CAAeF,CAAAA,CAAAA,CAAAA,CAAAA,CCTf,CAAMG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACE,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOC,CACpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CAAWD,CAAAA,CAAAA,CAAYP,CAAaS,CAAAA,CAAAA,CAAAA,CAC1C,CAAOD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,GAAKA,CAAYzE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2E,CACpCF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACD,CACH,CAAA,CAAA,CAAA,CAEM,CAAOG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUJ,CACvB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACCxE,CAAK6E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUC,CACbC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACAP,CAAaP,CAAAA,CAAAA,CAAAA,CAAAA,CAAac,IAC1BP,CAAaP,CAAAA,CAAAA,CAAAA,CAAAA,CAAac,CAAU/E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2E,CACtC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEN,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOK,CAAavF,CAAAA,CAAasF,CACvC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOtF,CAAMwE,CAAAA,CAAAA,CAAAA,CAAac,CAC1B,CAAA,CAEM,cAAOF,CACb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAAC,CAAA,CAAA,CAAA,CAAK,CACb,CAAA,CAAA,CAAA,CAAA,CAEcP,CAAaK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CC9BjC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMM,CAAuB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIpG,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CCoCvCqG,CAAmB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIC,EAEf,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACpB,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA6BC,CAAAtF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBsF,CAAjBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAKtBtF,CAAcuF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CAonBxBvF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUwF,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAznByC,CAY/D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAY3C,CAClB,CAAA,CAAA,CAAA,CAAA,CAAIA,CAAiBA,CAAAA,CAAAA,CAAAA,CAAc5D,CZhDV,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CYiDxB,CAAO4D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAER,CAAM4C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe1F,CAAK2F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmB7C,CAC7C,CAAA,CAAA,CAAA,CAAA,CAAI4C,CAAaxG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAStB,EACzB,CAAO8H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAMR,CAJ4BA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaE,CZ3DZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CY6D5BhI,CAIAoC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6F,CACJjD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeC,CAAW6C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB,CAC3CA,CAAAA,CAAAA,CAAAA,CAAaE,CAAUhI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYA,CAGrC,CAAA,CAAA,CAAA,CAEM,CAAAkI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUhD,CAAuBiD,CAAAA,CAAAA,CAAAA,CACvC,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAAO/F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKyF,CAAY3C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEzB,CAAMkD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAalD,CAAcmD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,IAEvC,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIC,CAAIpD,CAAAA,CAAAA,CAAc5D,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGiH,CAAI,CAAA,CAAA,CAAGD,CAAK,CAAA,CAAA,CAAA,CAAGA,CAErD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKE,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAKH,CAAAA,CAAAA,CAAAA,CAAKlG,KAAKuF,CAAgB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAInC,CAFiCQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaK,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAKF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACxB9G,CAAM0E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASiC,CAAWE,CAAAA,CAAAA,CAAAA,CAAI,CACzB,CAAA,CAAA,CAAA,CAAA,CAC/B,CAAMrC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYmC,EAAWE,CAAGpC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChCkC,CAAWE,CAAAA,CAAAA,CAAAA,CAAK/B,CAASN,CAAAA,CAAAA,CAAAA,CACzB,CACDsC,CAAAA,CAAAA,CACA,CAEF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMG,CAAMN,CAAAA,CAAAA,CAAWpI,CACvB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI0I,CAAK,CAAA,CACR,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYP,CAAWQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZ7FD,CY6FwB5I,CAAAA,CAAAA,CAAAA,CAAY6I,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACrET,CAAWpI,CAAAA,CAAAA,CAAAA,CAAAA,CAAcoC,CAAK6F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7BjD,CAAeC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW0D,CAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CACxCD,EAED,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAON,CAAWS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CACvB,CAAA,CAAA,CAEM,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY5D,CAClB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM6D,CAAkB7D,CAAAA,CAAAA,CACtBmD,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAENW,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAC/C,EAAMD,CAAWwC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAKxC,CAAS5D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKuF,CAC5CsB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKhD,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAW9E,CAAKmG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBrB,CAAS,CAAA,CAAA,CAAA,CAAA,CAAI,CAC7D4C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,IACP,CAAO1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS4C,CAAiB,CAAA,CAAA,CACjC,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAahE,CAAAA,CAAAA,CACnB,CAAMiE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBjE,eAAAA,CAAe8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZtHT,CYwH5BoB,CAAAA,CAAAA,CAAAA,CAED,CAC0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAlBlE,CZ1HmB,CAAA,CAAA,CAAA,CAAA,CAAA,CY2H1BiE,CAAe7H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACd,CAAIJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAO8B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAuB,CAAM7B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKgI,CAErD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAGR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAME,EAAanE,CAAc8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZlIJ,CYoI5BoB,CAAAA,CAAAA,CAAAA,CAAAA,CAGME,CAAO,CAAA,CAAA,CAAA,CAAA,CACbD,CAAWE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAAIrI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAKmB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAwB,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC7DmH,CAAM,CAAA,CAAA,CAAA,CAAA,CACZH,EAAWE,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIrI,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIoB,CAAoB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAU,CAEzDmH,CAAAA,CAAAA,CAAAA,CAAiBH,CAAKhI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASkI,CAAIlI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEzC,CACCmI,CAAAA,CAAAA,CAAAA,CAAiB,CAChBA,CAAAA,CAAAA,CAAAA,CAAiB,GAAqC,CAAhCJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CAAGnD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAErC,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAAQoD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKhI,CACZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,CACJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAQgI,CAAOE,CAAAA,CAAAA,CAAAA,CAAKnB,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIQ,CAAKzG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwF,CAAcxF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwF,CAC5D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,CACJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAAG0B,CAAAA,CAAAA,CAAAA,CAAK,CAAKE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAI,CAAMF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAAKlH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwF,aAC9C,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CACJ,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG0B,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKE,CAAMpH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwF,CAChC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACC,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG4B,CAAqB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAfA,CAAIlI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAec,KAAKwF,CAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEvD,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8B,CAAcxE,CAAAA,CAAAA,CACpB,CAAMyE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAkBzE,eAAAA,CAAe8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZrKT,CYuK7B4B,CAAAA,CAAAA,CAAAA,CAED,CAC0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAlB1E,GZzKoB,CY0K3ByE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAfA,CAAAA,CAAAA,CAAiBrI,CAChB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIJ,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK6B,CAAqB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM5B,CAAKwI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAI3CvH,CAAK8G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaS,CAFjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAE,CAAW3E,CAAAA,CAAAA,CACjB,CAC0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAlBA,CACPA,CAAAA,CAAAA,CAAAA,CAAc5D,CAASwI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEvB,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAER,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe7E,CAAc8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZzLX,EY2LvB8B,CAEKE,CAAAA,CAAAA,CAAAA,CAAAA,CACgE,CAArE7D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS/D,CAAK2F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmBgC,CZ9LV,CAAA,CAAA,CAAA,CY8LwC,CAChE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOrD,CAAOM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgD,CACxB,CAAA,CAOM,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc/E,GACpB,CAC0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAlBA,CACPA,CAAAA,CAAAA,CAAAA,CAAc5D,CAAS4I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEvB,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAER,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAkBjF,CAAc8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZlNb,CYoNxBkC,CAAAA,CAAAA,CAAAA,CAEKE,CAAoBjE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACzB/D,KAAK2F,CAAmBoC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZvNA,CYwNxB,CAAA,CAAA,CAAA,CAAA,CAAA,CAGD,CAAI1I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM2I,CACT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAGR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CAA6BlE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASrE,CAAQwI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAE5DC,CAA6D,CAAA,CAAA,CAAA,CAAA,CAAA,CAA1CH,CAAYC,CAAAA,CAAAA,CAAqB,CAAI,CAAA,CAAA,CAAA,CAC9D,CAAOvI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACL0I,CAASH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAqBD,CAAYG,CAAAA,CAAAA,CAAS,CACnD5I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACF,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8I,CAAevF,CACrB,CAAA,CAAA,CAAA,CAAA,CAC0B,CAAlBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACPA,CAAc5D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASoJ,CAEvB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAGR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CAAwBzF,CAAAA,CAAAA,CAC5B8C,CZnPwB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CYmPA0C,CACxBxE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACI0E,EAAa9F,CAAW6F,CAAAA,CAAAA,CAAAA,CAAAA,CAC9B,CAA0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAfC,CAA2BA,CAAAA,CAAAA,CAAAA,CAAa,CAAKA,CAAAA,CAAAA,CAAAA,CAAa,CAC7D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEDA,CACP,CAOM,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAa3F,CACnB,CAAA,CAAA,CAAA,CAAA,CAC0B,iBAAlBA,CACPA,CAAAA,CAAAA,CAAAA,CAAc5D,CAASwJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEvB,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB7F,CAAc8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CZvQb,CYyQvB8C,CAAAA,CAAAA,CAAAA,CAAAA,CAEKE,CAAmB7E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACxB/D,CAAK2F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmBgD,CZ5QD,CAAA,CAAA,CAAA,CY6QvB,CAGD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAItJ,CAAMuJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACF,CAEDtE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOC,CAAOqE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrB,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAc/F,CAAAA,CAAAA,CACpB,CAAM8F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW5I,KAAKyI,CAAa3F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACnC,CAAK8F,CAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAAMJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaxI,CAAKqI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAevF,CACvC,CAAA,CAAA,CAAA,CAAA,CAA0B,CAAf0F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACV,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,MAAMR,CAAYhI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6H,CAAc/E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAErC,CAAOpE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUqB,CAAUiI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWQ,CAAYI,CAAAA,CAAAA,CAClD,CAQY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAE,CAAcC,CAAAA,CAAAA,kCAC1BjG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACAkG,CAAqC,CAAA,CAAA,CAAA,CAAA,CAErC,CAC0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAlBlG,CACPA,CAAAA,CAAAA,CAAAA,CAAc5D,CAAS+J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEvB,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmBpG,EAAc8C,CZtTb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CYwTzBqD,CAEKE,CAAAA,CAAAA,CAAAA,CAAAA,CAAuBnJ,CAAK2F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjCuD,CZ3TyB,CAAA,CAAA,CAAA,CAAA,CY+TpBE,CACCpJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKsF,CAAkB+D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWF,CACzC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKC,CACJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,KAGR,CAAME,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAAYC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAAmBH,CAAAA,CAAAA,CAAAA,CACzC,CAAKE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgBC,CAAmBP,CAAAA,CAAAA,CAAAA,CAAAA,CAA2B,CAClE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMQ,CAAYxJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6I,CAAc/F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC/B2G,EAAiC/J,CAAMuF,CAAAA,CAAAA,CAAAA,CAAAA,CAE3CyE,CAAI,CAAA,CAAA,CAAA,CAAA,CAAG,CACPC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASH,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGtB,CAAIA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaC,CAAgC,CAAA,CAOhD,CAJGF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACD7J,CAAM8J,CAAAA,CAAAA,CAAAA,CAAWG,SAASJ,CAAgB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEzCD,CAAgB5J,CAAAA,CAAAA,CAAAA,CAAM8J,CAAWI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQN,CAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEzD,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAER,CACD,CACD,CAAOF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EACP,CAAA,CAAA,CAMY,CAAAS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASC,iDACrB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMvK,CAAOS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6H,CAAciC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeC,EAEzCvK,CAA2C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAnCwK,CAAAhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKqI,CAAeyB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAAE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC3CtK,CAAMO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKyI,CAAaqB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeC,CACvCnL,CAAAA,CAAAA,CAAOF,EAAUqB,CAAUR,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMC,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQsK,CAChDE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcjK,CAAK8I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAegB,CAClCI,CAAAA,CAAAA,CAAAA,CAA8B,CACnCC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWnK,CAAKsH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcwC,CAAeC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7CK,SAAUpK,CAAK8G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAagD,CAAeC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAE3CtK,CACAD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACAD,CAEAX,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEAmG,CAAQ/E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKyH,CAAWqC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeC,CACvCE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOA,CAASF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEhBhE,CAAW/F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0G,CAAYoD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAO7B,CAJIvK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQC,CAASC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACpByK,CAAatL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAIC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKA,CAAKc,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIJ,CAAMC,CAAAA,CAAAA,CAAOC,KAG7CyK,IACP,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAaD,CAAAA,CAAAA,CACnB,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaA,CAAY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIE,CAAOpL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,CACjD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAGR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,oBAAoBH,CAAKmG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBqF,CAAQH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtD,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAGM7D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAHavG,CAAKwK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcJ,CAAUnK,CAAAA,CAAAA,CAAAA,CACjCD,CAAKwK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcJ,CAAUlK,CAAAA,CAAAA,CAAAA,CAAAA,CAEJuK,OAAO,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK7E,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG,CAEpE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIW,CAAUrH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,CACf,CAAA,CAAA,CAAA,CAAA,CAAA,CAEDqH,CAAUzC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjB,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4G,CAAcP,CAAAA,CAAAA,CACpB,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcA,CAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIG,CAAOpL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,CACnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAER,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMyL,CAAa3K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwK,CAAcL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWlK,CACjD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI0K,EAAWzL,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAChByL,CAAW,CAAA,CAAA,CAAA,CAAKA,CAAW/E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAAG,CAAA,CAAA,CAAA,CAAA,CAAI9B,CAE9C9D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKqK,CAAaF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACzB,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAS,CAASrL,CAAAA,CAAAA,CACf,IAAIsL,CAOJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CALCA,CADmB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAATtL,CACGwE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASxE,CAAM,CAAA,CAAA,CAAA,CAAA,CAEfA,CAKU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAfsL,CACNxL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMwL,CACNA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc,CAAQA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAa,KAG9B,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIA,CAAa7H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQ,CAChC,CAAA,CAOM,CAAA8H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUtL,CAChB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIA,CAAQ,CAAA,CAAA,CAAA,CAAKA,CAAQ,CAAA,CAAA,CAAA,CACjB,CAGDkD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWlD,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC5B,CAQM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuL,CAActL,CAAAA,CAAuBsF,CAC3C,CAAA,CAAA,CAAA,CAAA,CAAItF,CAAM,CAAA,CAAA,CAAA,CAAKA,CAAM,CAAA,CAAA,CAAA,CACpB,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAAMuL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc/G,GAAac,CACjC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2B,CAAhBiG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACH,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIvL,CAAMuL,CAAAA,CAAAA,CAAAA,CAAAA,CAAchI,CAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACvC,CASM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiI,CACN1L,CAAAA,CACAC,CAAsC,CAAA,CAAA,CACtCC,EAAkC,CAElC,CAAA,CAAA,CAAA,CAAA,CAAA,CACEF,CACDA,CAAAA,CAAAA,CAAAA,CAAO,CACP,CAAA,CAAA,CAAA,CAAA,CAAA,CAACC,CAAOC,CAAAA,CAAAA,CAAAA,CAAKN,CAAM+L,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA2B,CAAVA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEpC,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAER,CAAMtM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOc,EAAMb,CAAKc,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIJ,CAAMC,CAAAA,CAAAA,CAAAA,CAAS,CAAGC,CAAAA,CAAAA,CAAAA,CAAO,CACrD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACEb,CAAKgB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACNhB,CAAKW,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWA,CAChBX,CAAAA,CAAAA,CAAAA,CAAKY,CAAYA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjBZ,CAAKA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWa,CAIVb,CAAAA,CAAAA,CAAKiB,CAFJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGR,CAOY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsL,CACZlB,CAAAA,CAAAA,0CAEA,IAAImB,CACJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKnB,CAEuB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAVA,CAAsBA,CAAAA,CAAAA,CAAAA,CAAMd,CAC7CiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA2BpL,CAAKsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAkB+D,CACjDY,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMd,CAEoB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAVc,CACjBmB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACQpL,KAAKsF,CAAkB+D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWY,CAClCjK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKsF,CAAkB+F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWpB,CAEpCmB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAsB,CAVrB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAWR,CAAA,CAAA,CAQM,CAAAE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe1M,CAAuBmG,CAAAA,CAAAA,CAAAA,CAC5C,MAAMzF,CAAaZ,CAAAA,CAAAA,CAAUC,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACvC,CAAKU,CAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAOR,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAJQU,CAAK4K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAStL,CAAWiM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACxBvL,CAAK8K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUxL,CAAWkM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtBxL,CAAK+K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAczL,CAAWmM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW1G,CAG7D,CAAA,CAAA,CAAA,CAwBY,CAAA2G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZC,CACAC,CAAAA,CAAAA,CACAC,4CAEA,CAAMrC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAyB9K,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgN,CACnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIG,CACAC,CAAAA,CAAAA,CACJ,CAAKvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAmC,CAAfmC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAGlB,CAAIC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAIV,OAAO,CAHPE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOF,CACPG,CAAAA,CAAAA,CAAWF,CAGX,CAAA,CAAA,CAAA,CAAA,CAAA,CAPAC,CAAOH,CAAAA,CAAAA,CACPI,CAAWH,CAAAA,CAAAA,CAQZ,CAAII,CAAAA,CAAAA,CAAAA,CAAAA,CAA8ChM,CAAKsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAOvD,CANIyG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACHC,EAAcA,CAAYC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWF,CAElCvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAawC,CAChBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcA,CAAYE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK1C,CAE5BwC,CAAAA,CAAAA,CAAAA,CAAAA,CAAa,CAChB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMG,CAAyC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI/G,CAClD4G,CAAAA,CAAAA,CAAAA,CAAAA,CACCb,CAAWW,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACb,CAAIK,CAAAA,CAAAA,CAAAA,CACH,CAAOA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWhD,CAEnB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACD,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EACP,CAAA,CAAA,CAMY,CAAAiD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQpC,CAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqC,EAAArM,CAAAsM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAlC,CACrBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQD,CACRA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS5K,CAETA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIC,CACJA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKC,CACLA,CAAAA,CAAAA,CAAAA,CAAAA,CAAGb,CACHA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAImG,OAEJA,CAAMkF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACNA,CAAKlE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAELA,CAAY,CAAA,CAAA,CAAA,CAAA,CAIZ,CAAMwG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACL7N,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUC,CAASoB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKiL,CAAmB1L,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMC,CAAOC,CAAAA,CAAAA,CAAAA,CACnE,KAAM8M,CAAYnC,CAAAA,CAAAA,CAAAA,CAAAA,CAAYD,CAAapF,CAAAA,CAAAA,CAAAA,CAAAA,CAAUkF,CACpD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAER,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMzG,CAAY,CAAA,CACjB,CAAY6I,CAAAA,CAAAA,CAAAA,CAAAA,CAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAAA,CAAKqK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaD,CAAS,CAAA,CAAA,CAAA,CAAA,CACvC,CAAYiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0K,CAAcP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CACzC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAWkC,EAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKsL,CAAeiB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUxH,CAAO,CAAA,CAAA,CAAA,CAAA,CACjD,CAAWsH,CAAAA,CAAAA,CAAAA,CAAAA,CAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACV,aAAMA,CAAK0L,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACVa,CACCtC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAyBd,CAAiBc,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC3C,CAEH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIuC,CAAK,CAAA,CAAA,CAAA,CACT,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CAAmBjJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CACxC,CAAMkJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgBD,CACtB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKC,CACJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAERF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAME,CACN,CAED,CAAO1M,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8F,CAAU0G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIzG,KAC1B,CAIO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4G,CAAYC,CAAAA,CAAAA,CAEnB,CAAWxG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAKwG,CAAU5M,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKuF,CAC/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEO,CAAAsH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYhJ,CAAc+I,CAAAA,CAAAA,CAAAA,CACjC,MAAI,CAAa7N,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8E,CAAS7D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2M,CAAYC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACxCzI,CAASN,CAAAA,CAAAA,CAAAA,CAAKC,CAGfD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACP,CAEO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2G,CAAcsC,CAAAA,CAAcC,CACnC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,EAAc,CAAIlO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAIiO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAoB,CAGvD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAF0B7H,CAAiBqF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQuC,CAAMxC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjBnD,CAAM6F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrB,CAAIvG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAClC,CAAA,CAAA,CAQO,kBAAAd,CACPsH,CAAAA,CACAL,CAAiB,CAAA,CAAA,CAAA,CAIjB,CAAOK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAqB1C,CAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAFf,CAAC1G,CAAAA,CAAcqJ,CACnClN,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6M,CAAYhJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMqJ,CAAWN,CAAAA,CAAAA,CAAAA,CAAAA,CAEnC,CAEO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA/G,CAAesH,CAAAA,CAAoBC,CAC1C,CAAA,CAAA,CAAA,CAAA,CAAID,CAAcC,CAAAA,CAAAA,CAAAA,CAAiB,CAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CACLD,CAAAA,CAAAA,CAAgB,CAAOA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgB,CAAGtJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrCwJ,EACLF,CAAgB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOA,CAAgB,CAAA,CAAA,CAAA,CAAGG,CAE3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIF,CAAgBC,CAAAA,CAAAA,CAAAA,CAAAA,CACnB,CAAOH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CAAGrJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACf,CAAKuJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeC,CAC1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOH,EAAW,CAAGI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEtB,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOJ,CAAW,CAAA,CAAA,CAClB,CCntsB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACtBC,CAAyB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACzuB,6JACM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,sCCTnC,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBC,CAEnB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA3I,CAAY4I,CACRC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOC,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQC,CAAevJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAAEwJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWA,CAAUL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc,CAAI,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMA,CAC5F,CAAA,CAAA,CCwCL,CAAM/I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmB,IAAIC,CAEf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOoJ,CAGpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAlJ,CAA6BC,CAAAA,CAAAA,CAAAtF,CAAiBsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAjBA,CAuQrBtF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUwO,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOtJ,CAAiBuJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACpD,CAEOzO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAa0O,cAAW,CAzQ/B1O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIvJ,CAAOE,CAAAA,CAAAA,CAAAA,CACzB,CAQM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsJ,CAAWxE,CAAAA,CAAAA,CACjB,CAAIyE,CAAAA,CAAAA,CAAAA,CAAAA,CAAkBjO,CACtB,CAAA,CAAA,CAAA,CAAIwJ,CAAU,CAAA,CACb,CAAKpK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKoK,CAAWrL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKqL,CACzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM,CAAI2D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASP,CAEpBqB,CAAAA,CAAAA,CAAAA,CAAAA,CAAU7O,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOtE,CAAaD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAayE,CAChD,CACD,OAAO7O,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,CACtC,CAAA,CAQM,CAAAE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYjD,CAClB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI+C,CAAkBlO,CAAAA,CAAAA,CACtB,CAAImL,CAAAA,CAAAA,CAAAA,CAAM,CACT,CAAA,CAAA,CAAA,CAAK9L,CAAKoK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWrL,KAAK+M,CACzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM,CAAIiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASN,CAEpBoB,CAAAA,CAAAA,CAAAA,CAAAA,CAAU7O,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOjE,CAAcoB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS+C,CAC7C,CACD,CAAO7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8O,CAA0BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtC,CAOM,CAAAG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOzP,CACb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIsP,CAAkB/N,CAAAA,CAAAA,CACtB,CAAIvB,CAAAA,CAAAA,CAAAA,CAAM,CACT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMsL,CAAa7K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO/D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASrL,CACxC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIsL,CAGH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM,CAAIkD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASF,CAFnBgB,CAAAA,CAAAA,CAAAA,CAAAA,CAAU7O,CAAKiP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUpE,CAI1B,CAAA,CACD,CAAO7K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8O,CAA0BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtC,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAK,CAAQ1P,CACd,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIqP,CAAkB7N,CAAAA,CAAAA,CAItB,CAHIxB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACHqP,CAAU7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO7D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUtL,CAAUqP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEpC7O,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,CACtC,CAAA,CAOM,KAAAM,CAAM1P,CAAAA,CAAAA,CACZ,CAAIoP,CAAAA,CAAAA,CAAAA,CAAAA,CAAUvN,CACd,CAAA,CAAA,CAAA,CAAI7B,CAAK,CAAA,CACR,CAAM2P,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAapP,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO5D,CAActL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAC5C4P,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAarP,KAAK2O,CAAO5D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAActL,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAClD,CAAI2P,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcC,CAKjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM,CAAItB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASL,CAFnBmB,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAFe7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKiP,CAAUG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACfpP,CAAKiP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUI,CAKzC,CAAA,CAAA,CAAA,CAAA,CACD,CAAOrP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8O,CAA0BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtC,CAQM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAS,CAAY7P,CAAAA,CAAesF,CACjC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKA,CACJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO/E,KAAKmP,CAAM1P,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEnB,CAAIoP,CAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAAIpP,CAAAA,CAAAA,CAAAA,CAAK,CACR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM8P,CAAkBvP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO5D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAActL,CAAKsF,CAAAA,CAAAA,CAAAA,CACvD,CAAIwK,CAAAA,CAAAA,CAAAA,CAAAA,CAGH,MAAM,CAAIxB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASH,CAFnBiB,CAAAA,CAAAA,CAAAA,CAAAA,CAAU7O,CAAKiP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUM,CAI1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,CAAQxK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACP,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACJ8J,CAAUtN,CAAAA,CAAAA,CACV,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,IACJsN,CAAUrN,CAAAA,CAAAA,CACV,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACC,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIuM,CAASJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAGtB,CAAO3N,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8O,CAA0BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtC,CAQM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAW,CACN5Q,CAAAA,CACAmG,CAEA,CAAA,CAAA,CAAA,CAAA,CAAInG,CAASF,CAAAA,CAAAA,CAAAA,CAAAA,CAAUC,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChC,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAImP,CAASD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEpB,CAAI/I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWT,CAAOO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU4K,CAAS1K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACxC,MAAM,CAAIgJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASJ,CAEpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIkB,CAAUnN,CAAAA,CAAAA,CACd,CAAI9C,CAAAA,CAAAA,CAAAA,CAAM,CACT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM8Q,CACL3K,CAAAA,CAAAA,CAAAA,CAAU/E,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOrD,CAAe1M,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMmG,GAC5C,CAAI2K,CAAAA,CAAAA,CAAAA,CACHb,CAAU7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKiP,CAAUS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACnB,CACN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMC,CAAkBC,CAAAA,CAAAA,CAAAA,CAAAA,CACvB,CAAMC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe7P,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOrD,CAAe1M,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMgR,GACtD,CAAKC,CAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI9B,CAASD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEpB,CAAO+B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgB7P,CAAKiP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUY,CAAa,CAAA,CAAA,CAEpDhB,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMvK,CAAOO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgC,IAAI8I,CAAgBlJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAC1D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACD,CAAqB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAX1B,CACV8J,CAAAA,CAAAA,CAAUlN,CACW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAXoD,CACV8J,CAAAA,CAAAA,CAAAA,CAAAA,CAAUjN,CAEX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO5B,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,EACtC,CAgBY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiB,CACZC,CAAAA,CACAC,iCAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAInB,CAAU9M,CAAAA,CAAAA,CACd,CAAIgO,CAAAA,CAAAA,CAAAA,CAAiB,CACpB,CAAMvG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAyB9K,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUoR,CAEnD,CAAA,CAAA,CAAA,CAAA,CAAIvG,CAAawG,CAAAA,CAAAA,CAAAA,CAAW,CAC3B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM/F,CAAgB+F,CAAAA,CAAAA,CAChBC,CAAoBjQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAOjD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUlC,EAAWS,CAC3D4E,CAAAA,CAAAA,CAAAA,CAAU7O,CAAKiP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgB,CAAe,CAAA,CAAA,CAAA,CAAA,CACxC,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKzG,CAAwC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAApBuG,CAA8B,CAAA,CAC7D,CAAM9F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgB8F,CAChBE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAoBjQ,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOjD,CAAUzB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChD4E,CAAU7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKiP,CAAUgB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CACxC,CAAA,CAAA,CACD,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOjQ,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,KACtC,CAOY,CAAA/L,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZoH,iCAIA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI2E,CAAU5M,CAAAA,CAAAA,CACd,CAAIiI,CAAAA,CAAAA,CAAAA,CAAc,CACjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMgG,QAAiBlQ,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOvC,CAASlC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAE5C,CAAIgG,CAAAA,CAAAA,CAAAA,CACHrB,CAAU7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKiP,CAAUiB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACnB,CACN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM9F,CAAEA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQD,CAAEA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS5K,KAAEA,CAAIC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAAKC,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAAGb,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAAImG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAAMkF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,CAC5DC,CAAAA,CAAAA,CAAAA,CACD,CACCE,CAAAA,CAAAA,CAAAA,CAAAA,CACAD,CACA5K,CAAAA,CAAAA,CAAAA,CAAAA,CACAC,CACAC,CAAAA,CAAAA,CAAAA,CAAAA,CACAb,CACAmG,CAAAA,CAAAA,CAAAA,CAAAA,CACAkF,CACC,CAAA,CACD,CAAIsC,CAAAA,CAAAA,CAAAA,CAAAA,CAAwB,CACxB3N,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACH2N,CAAW7N,CAAAA,CAAAA,CAAUC,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrBW,CACVgN,CAAAA,CAAAA,CAAAA,CAAAA,CAAWvM,KAAK2O,CAAO1D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmB1L,CAAMC,CAAAA,CAAAA,CAAOC,CAExD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM+D,CAAuC,CAAA,CAC5C,CAAY6I,CAAAA,CAAAA,CAAAA,CAAAA,CAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK4O,WAAWxE,CAAS,CAAA,CAAA,CAAA,CAAA,CACrC,CAAYiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK+O,CAAY5E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CACvC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAWkC,CAAArM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwP,CAAajD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUxH,CAAO,CAAA,CAAA,CAAA,CAAA,CAC/C,CAAWsH,CAAAA,CAAAA,CAAAA,CAAAA,CAAArM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACV,CAAMA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8P,CACVvD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACCtC,eAAAA,CAAyBd,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBc,CAC3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAGH4E,CAAU,CAAA,CAAA,CAAA,CACV,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMsB,CAAa3M,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM4M,SAAmBD,CAAaE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChClJ,CAAQiJ,CAAAA,CAAAA,CAAUjJ,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACxBuF,CAAqCvF,CAAAA,CAAAA,CAAAA,CAASA,CAAM,CAAA,CAAA,CAAA,CAE1D,CAAKuF,CAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIsB,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAqBoC,MAEtCvB,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMnC,CACjB,CAAA,CAAA,CAAA,CAEDmC,CAAW7M,CAAAA,CAAAA,CACX,CACD,CACD,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOhC,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,KACtC,CAYM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAzE,CAAStH,CACf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI+L,CAAkB,CAAA,CAAA,CAAA,CAAG7O,CAAKwO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC9B,CAAI1L,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB,CAAgB/D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK+D,CAAgB,CAAA,CAAA,CACzD,CAAMmE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAqBnE,CAAcE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAG,CAAA,CAAA,CAAA,CAC7CsN,CAAiBC,CAAAA,CAAAA,CAAAA,CACtBA,CACEtK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CACNY,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKhD,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIqB,CAAiBsL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmB3M,CAElDqD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAME,CAAO,CAAA,CAAA,CACnB,KAAKnH,CACL,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIC,CACH2G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKmG,CACNsD,CAAAA,CAAAA,CAAAA,CAAAA,CACErJ,CAAWE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAAIrI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOkO,CAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAU,CAAI,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM,CAO1DyD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiC,IAFtCvQ,CACAgF,CAAAA,CAAAA,CAAAA,CAAiBuJ,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI3P,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKoB,CAAgB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEtDwQ,CAAmC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMD,CAAyBzQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CACvEiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAqC,CAAM3Q,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,gBAAgBgC,CAA2BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjG,CAAQvJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKhI,CACZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,CAAG,CAAA,CACP,CAAM0R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUF,CAChB7B,CAAAA,CAAAA,CACC+B,CACA1J,CAAAA,CAAAA,CAAKT,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGzG,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgBkC,CAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM5Q,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgB1O,CAAKwO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmBxO,CAAKwO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACzD,CACA,CAAA,CAAA,CAAA,CAAA,CACD,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CASJK,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CARY,CACrB,CAAGzH,CAAAA,CAAAA,CAAAA,CAAI,CAAKsJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA2B1Q,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgBxH,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKwJ,CAA2BxJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CACtG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGA,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKlH,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjBtH,EAAIX,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGzG,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjB,CAAG1O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CAAgBgC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA2BxJ,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CACzDA,CAAKT,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAAGzG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CACjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG1O,KAAK0O,CAAgBtH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAI,CAEAX,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7B,CACIkK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACL,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,CAUJ9B,CAAAA,CAAAA,CAAU,CATY,CAAA,CAAA,CAAA,CAAA,CAAA,CACrBzH,CAAIZ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAAG,CAAA,CAAA,CAAA,CAAGC,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGzG,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC5BgC,CACAxJ,CAAAA,CAAAA,CAAKT,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGzG,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACnB,CAAGtH,CAAAA,CAAAA,CAAAA,CAAI,CAAKpH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CAChBxH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKT,KAAK,CAAGzG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CAClBtH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAI,CACL,CAAA,CAAA,CAACF,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOE,CAAIZ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAAG,CAAA,CAAA,CAAA,CAAA,CAAIC,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGzG,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEdjI,KAC7B,CACIkK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACL,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACC9B,CAAU,CAAA,CAAA,CAAA,CAAGzH,CAAIX,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChB,CAAGzG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CACLiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAGN,CAAIvJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAKlI,SAASgI,CAAI,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAJA,CAAMhI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,CAChC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOc,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0B,CAAYD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEnD,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO7O,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACX,CAAeD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc7O,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgB1O,CAAKwO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAExD,CAOM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArE,CAAUrH,CAAAA,CAAAA,CAChB,CACCA,CAAAA,CAAAA,CAAAA,CAAAA,CACA,CAAIhE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAamB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAsB,CAAMlB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK+D,GACxD,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAEMoE,CAFiBpE,CAAAA,CAAAA,CAAAA,CAAAA,CAAcE,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG,CAGtCmE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAAIrI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAKmB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAwB,CACrD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEVgG,MAAM,CACNY,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKhD,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIqB,CAAiBsL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmB3M,CAEjDgN,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAqBC,CAAqC,CAAA,CAAA,CAChE5Q,CACAD,CAAAA,CAAAA,CAAAA,CACC4G,CACAkK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACAA,CAAQ7L,CAAAA,CAAAA,CAAAA,CAAiBuJ,UAAU,CAAI3P,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAKiS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CAG1DlC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACL,CAAOgC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA6B7Q,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAuBxH,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKlH,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAoBmC,CAA6B7Q,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,2BAA2BoC,CAA2B9Q,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CAAoBmC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA6B7Q,CAAK0O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtPxH,CACEV,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAAG,CAAA,CAAA,CAAA,CACTC,CACA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOoK,CAA6B7Q,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0O,CAE3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM1O,KAAK0O,CAAgB1O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwO,CAEjC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOxO,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,CACtC,CAAA,CACD,CAAO7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKoK,CAAUtH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB,CAAIE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAG,CAAA,CAAA,CAAA,CACrD,CAOM,CAAApE,CAAAA,CAAAA,CAAAA,CAAKkE,CACX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI+L,CAAkBmC,CAAAA,CAAAA,CACtB,CAAIlO,CAAAA,CAAAA,CAAAA,CAAe,CAClB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMxD,CAAaU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO9F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc/F,CAC7C,CAAA,CAAA,CAAA,CAAA,CAAIxD,EAAY,CACf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM2R,CAAsB3R,CAAAA,CAAAA,CAAW4R,CACvC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIxR,CAAQyR,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKzR,CAAMJ,CAAAA,CAAAA,CAAAA,CAAa,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI,CAC9C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM6I,CAAkBpE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASkN,CAAYjO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAAG,CAAA,CAAA,CAAA,CAAI,CAI3D6L,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAHkB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAC1G,CAAU,CAAA,CAAA,CAAGA,CAAStB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKtH,CACvDA,CAAAA,CAAAA,CAAAA,CAAK8Q,CAAWe,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,EAAG,CAEH3K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAAUwK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYjO,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG,CAC/D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA6L,CAAUoC,CAAAA,CAAAA,CAAYjO,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG,CAEjC,CAAA,CAAA,CACD,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOhD,KAAK8O,CACX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAGD,CAAcwC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAuBC,CAEzC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAOM,CAAAvM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOjC,CACb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACM+L,CADe/L,CAAAA,CAAAA,CAAAA,CAAiB9C,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOlH,CAAW3E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrB,IAAIwB,CAAOO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU4B,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAClE,CAAOzG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8O,CAA0BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtC,CAOY,CAAA,CAAA,CAAA,CAAA,CAAA5E,CAAMnH,CAAAA,CAAAA,0CAClB,CAAI+L,CAAAA,CAAAA,CAAAA,CAAAA,CAAkB,CACtB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAMoB,CACLnN,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAwB9C,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO7F,CAAehG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEpD,CAAImN,CAAAA,CAAAA,CAAAA,CAAa,CAIhBpB,CAAAA,CAAU,SAHkBoB,CAAYnE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKvB,CAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAQgH,CAC5DrM,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBqM,CAAOA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIA,CAAI,CAAA,CAAA,CAAA,CAAA,CAAIA,CAAIrM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBqM,CAEvBtB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY9G,CAC/C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAED,OAAOnJ,CAAK8O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA0BD,KACtC,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAI,CAAUuC,CAAAA,CAAAA,CAChB,CAAOA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQjH,CAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAASkH,CAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIA,CAAItN,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASsN,OAC5D,CAEO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA3C,CAA0BD,CAAAA,CAAAA,CACjC,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI/P,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO+P,CAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACtC,CC9dY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO6C,CAGpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArM,CACCC,CAAAA,CACiBxC,CAAA9C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAa8C,CAAbA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAEjB9C,CAAK2R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAAIpD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQjJ,CAC3BtF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIvJ,CAAOE,CAAAA,CAAAA,CAAAA,CACzB,CAED,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAYsM,SACX,CAA2B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAApB5H,CAAAhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAAe,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA9K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU8H,CACrC,CAED,CAAY6K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MACX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2B,CAApB7H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAhK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAAkH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAA9K,CAAUsI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrC,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAYsK,SACX,CAA2B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAApB9H,CAAAhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAAe,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA9K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU4I,CACrC,CACD,CAAYiK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OACX,CAA2B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAApB/H,CAAAhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAAe,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA9K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU8S,CACrC,CAAA,CACD,CAAYC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OACX,OAA2B,CAApBjI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAhK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAAkH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAA9K,CAAUwI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrC,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAYwK,QACX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2B,QAApBlI,CAAAhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAAe,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA9K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU+J,CACrC,CAAA,CAED,CAAYkJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OACX,CAA2B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAApBnI,EAAAhK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAAkH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAA9K,CAAUtB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrC,CAEY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwU,CACZlI,CAAAA,CAAAA,0CAIA,CAAclK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2R,CAAQ7O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcoH,CAAenL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACvDiB,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAEN,CAAA,CAAA,CACY,CAAAuP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZnI,4CAIA,CACClK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CACLoH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACAA,CAAaE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACbF,CAAaC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZD,CAAatL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZsL,CAAazK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOyK,EAAa1K,CAAS0K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAa3K,CACzD2K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAanF,CACbmF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaD,CACLjK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKoS,CAAkBlI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAEhC,CAAA,CAAA,CAEM,CAAAoI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAclI,CACpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACCpK,KAAK4R,CACL5R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2R,CAAQvH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAASpK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe/D,CAAKqL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY,CAE5D,CAAA,CAAA,CACM,CAAAmI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBnI,CACvB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOpK,CAAK4R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiBxH,CAAapK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKsS,CAAclI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7D,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAoI,CAAerI,CAAAA,CAAAA,CACrB,CACCnK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6R,CACL7R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2R,CAAQxH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUnK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe/D,KAAKoL,CAAa,CAAA,CAAA,CAAA,CAAA,CAE9D,CACM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsI,CAAkBtI,CAAAA,CAAAA,CACxB,CAAOnK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK6R,CAAkB1H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcnK,CAAKwS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAerI,CAChE,CAAA,CAEM,CAAAuI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAelJ,GACrB,CAAIxJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK+R,CAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACtB,CAAMY,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe3S,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO9F,CAAc7I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAC9CxD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaZ,CAAUC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU6K,CACvC,CAAA,CAAA,CAAA,CAAA,CAAImJ,GAAgBrT,CACnB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOI,CAAMiT,CAAAA,CAAAA,CAAAA,CAAcC,CAAOtT,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY,CAE/C,CAAA,CAAA,CAAA,CACD,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACP,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuT,CAAkBrJ,CAAAA,CAAAA,CACxB,CACCxJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8R,CACHpT,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUC,CAAU6K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACrBxJ,CAAK0S,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAelJ,CAEtB,CAAA,CAEM,CAAAsJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY/N,CAClB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACC/E,CAAKiS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACLjS,CAAK2R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQ5M,OAAO/E,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe/D,CAAKgG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAExD,CAAA,CAAA,CAEM,CAAAgO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAehO,CACrB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO/E,CAAKiS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAelN,CAAW/E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8S,CAAY/N,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACvD,CAKY,CAAAiO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZ5J,iCAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIpJ,CAAKkS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB9I,CAAY,CAAA,CACrC,CAAMyF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAgB7O,KAAK2R,CAAQ1H,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMjK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACxCmQ,CAAyBjT,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAOxD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW/B,CAEtD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAS6J,CAAoBpE,CAAAA,CAAAA,CAAAA,CAAQ9P,CAAKkU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAkB9J,aAC5D,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,IACP,CAKY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA+J,CACZ9J,CAAAA,CAAAA,0CAEA,CACCpJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKkS,iBACH9I,CACMpJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKgT,CAAgB5J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAE9B,CAAA,CAAA,CAOD,CAAW+J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACV,CAAOC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQC,CAAI,CAAA,CAAA,CAAA,CAClBrT,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO7F,CAAe9I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,eAAe,CAC/C9C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO7F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe9I,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAE9CwQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,CAAEC,CAAAA,CAAAA,CAAYC,cAAkC,CAAArF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAsF,OAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAtF,CAAAsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAEjDzT,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO7H,CAAa9G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAC/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,CACF,CAAA,CAAEsH,CAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEXpK,KAAK2O,CAAOrH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAActH,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChC,CAAE,CAAA,CACF,CAAEqH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,CAEZnK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO9F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc7I,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChC,CAAE,CAAA,CACF,CAAElE,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEPoB,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOlG,CAAazI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAC/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,CACF,CAAA,CAAElE,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEPoB,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOtG,CAAerI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,eACjC,CAAE,CAAA,CACF,CAAElE,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAEPoB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO9G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAc7H,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAChC,CAAE,CAAA,CACF,CAAElE,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CAEPoB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAOlH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWzH,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7B,CAAE,CAAA,CACF,CAAEiC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQ,CAETwO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAa,CAAE,CAAA,CAAG,CAAEtJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,CAE3BuJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACD,CAAE,CACF,CAAA,CACAvJ,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACPrL,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAIsC,CAD3C8U,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACD,CADC1J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAhK,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACN,CAAAkH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAA,CAAApE,UAAUhI,CAAYA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAsB,CAAA8V,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAA,CAC5C5P,CAAkBlB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeC,CAAW7C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CACjD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,CACF,CAAA,CAAEwD,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGNtG,KAAKmS,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAK,CAAA,CAAE7L,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC7B,CACDgN,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAMH,CAAYhF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOwF,CAAKR,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQjU,CAASiU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,CAC1D,CAAA,CAAA,CAAA,CAAA,CAAA,CAMD,CAAWS,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACV,CAAOR,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQC,CAAI,CAAA,CAAA,CAAA,CAClBrT,CAAK2R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQ7O,CACb9C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAO7F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAe9I,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC9BwQ,CACF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAEO,EAAW/K,cACZ,CAGG9I,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKmS,CAEL0B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU9U,CAAKiB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAG0B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,WAD/CkH,CAAAhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,oCACF8C,CAAUhI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYA,CAAsB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8V,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAC5C5P,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACFlB,CAAeC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW7C,CAAK8C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAE/BgG,EAEF,CAEH,CAAA,CAAA,CACD,CAAWgL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACV,CAAO9T,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK4T,CAAMN,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAM1T,CAAcI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK8C,CAAkBlD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7D,CCvPY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAOmU,CAIpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA1O,CAA6BC,CAAAA,CAAAA,CAAAtF,CAAiBsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAjBA,CAC5BtF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIvJ,CAAOE,CAAAA,CAAAA,CAAAA,CAAAA,CACzBtF,CAAK2R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAAIpD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQjJ,CAC3B,CAAA,CAEM,aAAAxC,CAAcA,CAAAA,CAAAA,CACpB,CAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI4O,CAAoB1R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKsF,CAAmBxC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACvD,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkR,CAAgB5J,CAAAA,CAAAA,CACtB,CAAOpK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2R,CAAQvH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWrL,KAAKqL,CACpC,CAAA,CACM,CAAA6J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAkB7J,CACxB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAASA,CAAapK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKgU,CAAgB5J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC3C,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8J,CAAiB/J,CAAAA,CAAAA,CACvB,CAAOnK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2R,QAAQxH,CAAYpL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKoL,CACrC,CAAA,CACM,CAAAgK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAmBhK,CACzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAASA,CAAcnK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKkU,CAAiB/J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7C,CAEM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiK,CAAiB5K,CAAAA,CAAAA,CACvB,CAAS9K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAUC,CAAU6K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAC7B,CACM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6K,CAAmB7K,CAAAA,CAAAA,CACzB,CAASA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcxJ,CAAKoU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB5K,CAC7C,CAAA,CAEM,CAAA8K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcvP,GACpB,CAAO/E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2R,CAAQ5M,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAShG,CAAKgG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAClC,CACM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwP,CAAgBxP,CAAAA,CAAAA,CACtB,CAASA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW/E,CAAKsU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcvP,CACvC,CAAA,CAEY,iBAAAyP,CACZpL,CAAAA,CAAAA,0CAEA,CAAM6J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAyBjT,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOxD,CAAW/B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACtD,CACG6J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACOjT,KAAKsF,CAAkB+D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW4J,CAAiB9J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAE7D,CAAA,CAAA,CACY,CAAAsL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZrL,iCAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAASA,CAAsBpJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKwU,CAAkBpL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EACtD,CAAA,CAAA,CAEY,CAAAsL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACZlL,CACAJ,CAAAA,CAAAA,CAAAA,0CAEA,MAAM6G,CAAoBjQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK2O,CAAOxD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW/B,CACjD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACCpJ,CAAKoU,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAiB5K,CACpByG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACQjQ,CAAKsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACb4G,CAAK1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACLH,CAAW4G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAY9G,iBAEvBzJ,CAAMhB,CAAAA,CAAAA,CAAUC,CAAU6K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAYI,CACtC3E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACA,UAGH,CACY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA0P,CACZnL,CAAAA,CACAJ,4CAEA,CAAM6G,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAoBjQ,CAAK2O,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOxD,CAAW/B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACjD,CACCpJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKoU,CAAiB5K,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACpByG,CACMjQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK0U,CAAoBlL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAWJ,MAE7C,CAEY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwL,CACZxL,CAAAA,CACAI,iCAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAaxJ,CAAK0U,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAoBlL,EAAWJ,KACjD,CAEY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyL,CACZzL,CAAAA,CACAI,iCAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAaxJ,CAAK2U,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAuBnL,EAAWJ,KACpD,CC5EY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO0L,CAKpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAzP,CAA4BC,CAAAA,CAAAA,CAAAtF,CAAiBsF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAjBA,CAC3BtF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAKmQ,CAAY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI4D,CAAUzO,CAAAA,CAAAA,CAAAA,CAAAA,CAC/BtF,KAAK2O,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAIvJ,CAAOE,CAAAA,CAAAA,CAAAA,CAAAA,CACzBtF,CAAK2R,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAU,CAAIpD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQjJ,CAC3B,CAAA,CAAA"}