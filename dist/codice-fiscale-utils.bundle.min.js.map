{"version":3,"file":"codice-fiscale-utils.bundle.min.js","sources":["../src/functions/generator-wrapper.function.ts","../src/belfiore-connector/classes/belfiore-connector.class.ts","../src/belfiore-connector/index.ts","../asset/cities-countries.ts","../src/date-utils/date-matcher.const.ts","../src/date-utils/date-utils.class.ts","../src/const/matcher.const.ts","../src/enums/crc.enum.ts","../src/enums/birth-month.enum.ts","../src/classes/check-digitizer.class.ts","../src/const/cf-offsets.const.ts","../src/enums/gender-weight.enum.ts","../src/enums/omocodes.enum.ts","../src/classes/gender.class.ts","../src/classes/parser.class.ts","../src/const/error-messages.const.ts","../src/classes/cfu-error.class.ts","../src/classes/pattern.class.ts","../src/classes/cf-mismatch-validator.class.ts","../src/classes/validator.class.ts"],"sourcesContent":["import IGeneratorWrapper from \"../interfaces/generator-wrapper.interface\";\nexport default function generatorWrapper<T = unknown, TReturn = any, TNext = unknown>(\n    generator: Generator): IGeneratorWrapper<T, TReturn, TNext> {\n    generator[Symbol.iterator] = () => generator;\n    return generator as IGeneratorWrapper<T, TReturn, TNext>;\n}\n","import moment, { Moment } from \"moment\";\nimport { MultiFormatDate } from \"../../date-utils\";\nimport generatorWrapper from \"../../functions/generator-wrapper.function\";\nimport IGeneratorWrapper from \"../../interfaces/generator-wrapper.interface\";\nimport IBelfioreCity from \"../interfaces/belfiore-city.interface\";\nimport IBelfioreCommonPlace from \"../interfaces/belfiore-common-place.interface\";\nimport IBelfioreCountry from \"../interfaces/belfiore-country.interface\";\nimport IBelfioreDbData from \"../interfaces/belfiore-db-data.interface\";\nimport IBelfioreDbLicense from \"../interfaces/belfiore-db-license.interface\";\nimport BelfioreConnectorConfig from \"../types/belfiore-connector-config.type\";\nimport BelfiorePlace from \"../types/belfiore-place.type\";\n\n/**\n * Handler for cities and countries Dataset\n */\nexport default class BelfioreConnector {\n    [belfioreCode: string]: BelfiorePlace | any;\n\n    /**\n     * Get Proxy\n     * @param resource target resource\n     * @param paramName property name to proxy\n     * @returns Proxied property\n     */\n    public static get(resource: BelfioreConnector, paramName: string, receiver: any): BelfiorePlace | any {\n        if (this.BELFIORE_CODE_MATCHER.test(paramName)) {\n            const base32name: string = this.belfioreToInt(paramName)\n                .toString(32)\n                .padStart(3, \"0\");\n\n            for (const sourceData of resource.data || []) {\n                const index: number = this.binaryfindIndex(sourceData.belfioreCode, base32name);\n                if (index >= 0) {\n                    return resource.locationByIndex(sourceData, index);\n                }\n            }\n        }\n\n        if (\n            (resource.codeMatcher || resource.province) && [\"cities\", \"countries\"].includes(paramName) ||\n            paramName === \"byProvince\" && (\n                resource.codeMatcher instanceof RegExp && resource.codeMatcher.test(\"Z000\")\n                || resource.province\n            )\n        ) {\n            return;\n        }\n        return Reflect.get(resource, paramName, receiver);\n    }\n\n    /**\n     * Binary find Index (works ONLY in sorted arrays)\n     * @param text Unique string of values of the same length (step)\n     * @param value Exact text to find\n     * @param start text start index for seeking the value\n     * @param end text end index for seeking the value\n     * @param step length of a single value to seek properly the text string\n     * @returns Found value Index or -1 if not found\n     * @private\n     */\n    public static binaryfindIndex(\n        sourceString: string,\n        targetText: string,\n        start: number = 0,\n        end: number = sourceString.length - 1,\n    ): number {\n        if (!sourceString.length) {\n            return -1;\n        }\n        const rangedStart: number = Math.max(start, 0);\n        const rangedEnd: number = Math.min(end, sourceString.length - 1);\n        const currentLength: number = rangedEnd - rangedStart + 1;\n        if (rangedStart > rangedEnd || currentLength % targetText.length) {\n            return -1;\n        }\n        const targetIndex: number =\n            rangedStart + Math.floor(currentLength / (2 * targetText.length)) * targetText.length;\n        const targetValue: string = sourceString.substr(targetIndex, targetText.length);\n        if (targetValue === targetText) {\n            return Math.ceil((targetIndex + 1) / targetText.length) - 1;\n        }\n        if (targetText > targetValue) {\n            return this.binaryfindIndex(sourceString, targetText, targetIndex + targetText.length, rangedEnd);\n        }\n        return this.binaryfindIndex(sourceString, targetText, rangedStart, targetIndex - 1);\n    }\n\n    /**\n     * Converts belfiore code into an int\n     */\n    public static belfioreToInt(code: string): number {\n        const upperCaseCode: string = code.toUpperCase();\n        return (upperCaseCode.charCodeAt(0) - 65) * 10 ** 3 + parseInt(upperCaseCode.substr(1), 10);\n    }\n\n    private static ITALY_KINGDOM_BIRTHDATE = \"1861-01-01\";\n    private static BELFIORE_CODE_MATCHER: RegExp = /^[A-Z]\\d{3}$/iu;\n\n    private static CITY_CODE_MATCHER: RegExp = /^[A-Y]\\d{3}$/iu;\n    private static COUNTRY_CODE_MATCHER: RegExp = /^Z\\d{3}$/iu;\n\n    /**\n     * Converts int to belfiore code\n     * @param code Belfiore int code\n     * @returns Standard belfiore code\n     */\n    private static belfioreFromInt(code: number): string {\n        const charIndex: number = Math.floor(code / 10 ** 3);\n        const char: string = String.fromCharCode(charIndex + 65);\n        const numValue: string = code.toString().substr(-3);\n        return `${char}${numValue.padStart(3, \"0\")}`;\n    }\n\n    /**\n     * Converst Base 32 number of days since 01/01/1861 to Moment instance\n     * @param base32daysFrom1861 Base 32 number of days from 1861-01-01\n     * @returns Moment instance date\n     */\n    private static decodeDate(base32daysFrom1861: string): Moment {\n        const italyBirthDatePastDays = parseInt(base32daysFrom1861, 32);\n        return moment(this.ITALY_KINGDOM_BIRTHDATE).add(italyBirthDatePastDays, \"days\");\n    }\n\n    /**\n     * Retrieve string at index posizion\n     * @param list concatenation of names\n     * @param index target name index\n     * @returns index-th string\n     */\n    private static nameByIndex(list: string, index: number): string {\n        if (typeof list !== \"string\") {\n            throw new Error(\"[BelfioreConnector.nameByIndex] Provided list is not a string\");\n        }\n        if (!list.length) {\n            throw new Error(\"[BelfioreConnector.nameByIndex] Provided list empty\");\n        }\n        let startIndex: number = 0;\n        let endIndex: number = list.indexOf(\"|\", startIndex + 1);\n        let counter: number = index;\n\n        while (counter > 0 && endIndex > startIndex) {\n            counter--;\n            startIndex = endIndex + 1;\n            endIndex = list.indexOf(\"|\", startIndex + 1);\n        }\n\n        if (index < 0 || counter > 0) {\n            throw new Error(`[BelfioreConnector.nameByIndex] Provided index ${index} is out range`);\n        }\n\n        if (!counter && endIndex < 0) {\n            return list.substring(startIndex);\n        }\n\n        return list.substring(startIndex, endIndex);\n    }\n\n    private data: IBelfioreDbData[];\n    private licenses: IBelfioreDbLicense[];\n    private sources: string[];\n    private activeDate: Moment | undefined;\n    private codeMatcher: RegExp | undefined;\n    private province: string | undefined;\n\n    constructor({\n        activeDate,\n        codeMatcher,\n        data,\n        licenses,\n        province,\n        sources,\n    }: BelfioreConnectorConfig) {\n        if (codeMatcher && province) {\n            throw new Error(\"Both codeMatcher and province were provided to Bolfiore, only one is allowed\");\n        }\n\n        this.activeDate = activeDate;\n        this.codeMatcher = codeMatcher;\n        this.data = data;\n        this.licenses = licenses;\n        this.province = province;\n        this.sources = sources;\n\n        return new Proxy<BelfioreConnector>(this, this.constructor as typeof BelfioreConnector);\n    }\n\n    /**\n     * Return belfiore places list\n     */\n    public toArray(): BelfiorePlace[] {\n        return [...this.scanData()] as BelfiorePlace[];\n    }\n\n    public get provinces(): string[] {\n        if (this.province) {\n            return [this.province];\n        } else if (this.codeMatcher !== BelfioreConnector.COUNTRY_CODE_MATCHER) {\n            return this.parseProvinces();\n        }\n        return [];\n    }\n\n    /**\n     * Search places matching given name\n     */\n    public searchByName(name: string): BelfiorePlace[] | null {\n        return name ? [...this.scanData(name)] as BelfiorePlace[] : null;\n    }\n\n    /**\n     * Find place matching given name, retuns place object if provided name match only 1 result\n     */\n    public findByName(name: string): BelfiorePlace | null {\n        if (!name) {\n            return null;\n        }\n        const startingNameMatcher = new RegExp(`^${name}$`, \"i\");\n        return this.scanData(startingNameMatcher).next().value;\n    }\n\n    /**\n     * Returns a Proxied version of Belfiore which filters results by given date\n     * @param date Target date to filter places active only for the given date\n     * @returns Belfiore instance filtered by active date\n     * @public\n     */\n    public active(date: MultiFormatDate = moment()): BelfioreConnector {\n        return new BelfioreConnector({\n            ...this.config,\n            activeDate: moment(date),\n        });\n    }\n\n    /**\n     * Returns a Belfiore instance filtered by the given province\n     * @param code Province Code (2 A-Z char)\n     * @returns Belfiore instance filtered by province code\n     * @public\n     */\n    public byProvince(code: string): BelfioreConnector | undefined {\n        if (typeof code !== \"string\" || !(/^[A-Z]{2}$/u).test(code)) {\n            return;\n        }\n        return new BelfioreConnector({\n            ...this.config,\n            codeMatcher: undefined,\n            province: code,\n        });\n    }\n\n    /**\n     * Returns a Proxied version of Belfiore which filters results by place type\n     */\n    public get cities(): BelfioreConnector {\n        return new BelfioreConnector({\n            ...this.config,\n            codeMatcher: BelfioreConnector.CITY_CODE_MATCHER,\n            province: undefined,\n        });\n    }\n\n    /**\n     * Returns a Proxied version of Belfiore which filters results by place type\n     */\n    public get countries(): BelfioreConnector {\n        return new BelfioreConnector({\n            ...this.config,\n            codeMatcher: BelfioreConnector.COUNTRY_CODE_MATCHER,\n            province: undefined,\n        });\n    }\n\n    private get config(): BelfioreConnectorConfig {\n        const {\n            activeDate,\n            codeMatcher,\n            data,\n            licenses,\n            sources,\n        } = this;\n        return {\n            activeDate,\n            codeMatcher,\n            data,\n            licenses,\n            sources,\n        } as BelfioreConnectorConfig;\n    }\n\n    private* scanDataSourceIndex(dataSource: IBelfioreDbData, matcher?: RegExp): Generator {\n        if (matcher) {\n            for (let startIndex = 0, entryIndex = 0; startIndex < dataSource.name.length; entryIndex++) {\n                const endIndex = dataSource.name.indexOf(\"|\", startIndex + 1) + 1 || dataSource.name.length;\n                const targetName = dataSource.name.substring(startIndex, endIndex - 1);\n                if (matcher.test(targetName)) {\n                    yield entryIndex;\n                }\n                // Moving to next entry to check\n                startIndex = endIndex;\n            }\n        } else {\n            const dsLength = dataSource.belfioreCode.length / 3;\n            for (let index = 0; index < dsLength; index++) {\n                yield index;\n            }\n        }\n        return -1;\n    }\n\n    private scanData(name?: string | RegExp): IGeneratorWrapper<BelfiorePlace, null, void> {\n      return generatorWrapper(this.scanDataGenerator(name));\n    }\n    private* scanDataGenerator(name?: string | RegExp): Generator {\n        const nameMatcher = typeof name === \"string\" ? new RegExp(name, \"i\") : name;\n\n        for (const sourceData of this.data) {\n            const dataSourceScan = this.scanDataSourceIndex(sourceData, nameMatcher);\n            for (let dss = dataSourceScan.next(); !dss.done; dss = dataSourceScan.next()) {\n                const index = dss.value as number;\n                const parsedPlace: BelfiorePlace | null = this.locationByIndex(sourceData, index);\n                if (parsedPlace) {\n                    yield parsedPlace;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Retrieve location for the given index in the given subset\n     * @param resourceData concatenation of names\n     * @param index target name index\n     * @returns location\n     */\n    private locationByIndex(\n        resourceData: IBelfioreDbData,\n        index: number,\n    ): BelfiorePlace | null {\n        const belfioreIndex = index * 3;\n        if (resourceData.belfioreCode.length - belfioreIndex < 3) {\n            return null;\n        }\n        const belFioreInt = parseInt(resourceData.belfioreCode.substr(belfioreIndex, 3), 32);\n        const belfioreCode = BelfioreConnector.belfioreFromInt(belFioreInt);\n        const code = resourceData.provinceOrCountry.substr(index * 2, 2);\n        if (\n            this.province && this.province !== code ||\n            this.codeMatcher && !this.codeMatcher.test(belfioreCode)\n        ) {\n            return null;\n        }\n\n        const dateIndex = index * 4;\n        const creationDate = BelfioreConnector.decodeDate((resourceData.creationDate || \"\")\n            .substr(dateIndex, 4) || \"0\").startOf(\"day\");\n        const expirationDate = BelfioreConnector.decodeDate((resourceData.expirationDate || \"\")\n            .substr(dateIndex, 4) || \"2qn13\").endOf(\"day\");\n        if (\n            this.activeDate &&\n            (\n                resourceData.creationDate && this.activeDate.isBefore(creationDate, \"day\") ||\n                resourceData.expirationDate && this.activeDate.isAfter(expirationDate, \"day\")\n            )\n        ) {\n            return null;\n        }\n        const name = BelfioreConnector.nameByIndex(resourceData.name, index);\n        const licenseIndex = parseInt(resourceData.dataSource, 32)\n            .toString(2).padStart(resourceData.belfioreCode.length * 2 / 3, \"0\")\n            .substr(index * 2, 2);\n        const dataSource = this.licenses[parseInt(licenseIndex, 2)];\n\n        const location: IBelfioreCommonPlace = {\n            belfioreCode,\n            creationDate: creationDate.toDate(),\n            dataSource,\n            expirationDate: expirationDate.toDate(),\n            name,\n        };\n        const isCountry = belfioreCode[0] === \"Z\";\n        if (isCountry) {\n            return {\n                ...location,\n                iso3166: code,\n            } as IBelfioreCountry;\n        }\n        return {\n            ...location,\n            province: code,\n        } as IBelfioreCity;\n    }\n\n    private parseProvinces(): string[] {\n        const provinceList = new Set<string>();\n        for (const sourceData of this.data) {\n            const dataSourceScan = this.scanDataSourceIndex(sourceData);\n            for (let dss = dataSourceScan.next(); !dss.done; dss = dataSourceScan.next()) {\n                const index = dss.value as number;\n                const province = sourceData.provinceOrCountry.substr(index * 2, 2);\n                if (!provinceList.has(province)) {\n                    const belFioreInt = parseInt(sourceData.belfioreCode.substr(index * 3, 3), 32);\n                    const belfioreCode = BelfioreConnector.belfioreFromInt(belFioreInt);\n                    if (BelfioreConnector.CITY_CODE_MATCHER.test(belfioreCode)) {\n                        if (province.trim()) {\n                            provinceList.add(province);\n                        }\n                    }\n                }\n            }\n        }\n        return Array.from(provinceList);\n    }\n}\n","import CITIES_COUNTRIES from \"../../asset/cities-countries\";\nimport BelfioreConnector from \"./classes/belfiore-connector.class\";\nimport BelfioreConnectorConfig from \"./types/belfiore-connector-config.type\";\nimport BelfiorePlace from \"./types/belfiore-place.type\";\n\nexport const Belfiore = new BelfioreConnector(CITIES_COUNTRIES as BelfioreConnectorConfig);\nexport {\n    BelfioreConnector,\n};\nexport type {\n    BelfiorePlace,\n};\n","const CITIES_COUNTRIES = {\n    \"data\": [\n        {\n            \"belfioreCode\": \"oghognoguohfoi5ol2\",\n            \"dataSource\": \"1al\",\n            \"expirationDate\": \"1f2j1ebo1j041en51k2c1ebo\",\n            \"name\": \"Cecoslovacchia|Repubblica Democratica Tedesca|Repubblica Socialista Federale di Jugoslavia|Unione Sovietica|Serbia e Montenegro|Yemen del Sud\",\n            \"provinceOrCountry\": \"  DDYUSU  YD\"\n        },\n        {\n            \"belfioreCode\": \"ogcogdogeogfoggogiogjogkoglogmogoogpogqogrogsogtogvoh0oh1oh2oh3oh5oh6oh7oh8oh9ohaohbohcohdoheohiohjohkohoohpohqohsohtohuoi1oi2oi3oi4oi6oi7oi8oi9ojgojjojkojlojmojnojoojpojqojrojtojuojvok0ok1ok3ok4ok6ok7ok8ok9okaokbokcokdokgokhokiokjokkoklokookpokqokrokuokvol0ol1ol3ol4ol5ol6ol7ol8ol9olaolbomkomlommompomqomromsomtomuomvon0on1on2on3on4on5on6on7on8on9onaondoneonfongonhonionjonkonlonmonnonoonponqonronsontonuonvoo0oo1oo3oo4oo5oo7oo8oo9ooaooboodooeoofoohoooopooppopqopropsostosuosvot0ot1ot2ot3ot5ot6ot7ot8otaotbotcotfotiotkotlotmotnotootpotqotrotsottp00p01p02p03p04p05p06p08p09p0ap0bp0cp0dp0ep34p37p38p3fp3hp3kp3np3qp3rp3sp3up40p41p42p43p44p45p46p47p9j\",\n            \"dataSource\": \"1alalal\",\n            \"name\": \"Albania|Andorra|Austria|Belgio|Bulgaria|Stato della Città del Vaticano|Danimarca|Isole Fær Øer|Finlandia|Francia|Germania|Gibilterra|Regno Unito|Grecia|Irlanda|Islanda|Liechtenstein|Lussemburgo|Malta|Isola di Man|Monaco|Norvegia|Paesi Bassi|Polonia|Portogallo|Romania|San Marino|Spagna|Svezia|Svizzera|Ungheria|Ucraina|Bielorussia|Moldova|Estonia|Lettonia|Lituania|Macedonia del Nord|Croazia|Slovenia|Bosnia-Erzegovina|Federazione russa|Slovacchia|Repubblica ceca|Serbia|Montenegro|Kosovo|Palestina|Afghanistan|Arabia Saudita|Bahrein|Bhutan|Myanmar/Birmania|Brunei Darussalam|Cambogia|Sri Lanka|Cina|Cipro|Corea del Sud|Corea del Nord|Emirati Arabi Uniti|Filippine|Taiwan|Giappone|Giordania|India|Indonesia|Iran|Iraq|Israele|Kuwait|Laos|Libano|Maldive|Mongolia|Nepal|Oman|Pakistan|Qatar|Siria|Thailandia|Timor Leste|Turchia|Yemen|Malaysia|Singapore|Bangladesh|Vietnam|Armenia|Azerbaigian|Georgia|Kazakhstan|Kirghizistan|Tagikistan|Turkmenistan|Uzbekistan|Namibia|Algeria|Angola|Burundi|Camerun|Capo Verde|Repubblica Centrafricana|Ciad|Comore|Congo|Repubblica Democratica del Congo|Costa d'Avorio|Benin|Etiopia|Gabon|Gambia|Ghana|Guinea|Guinea-Bissau|Guinea equatoriale|Kenya|Liberia|Libia|Madagascar|Malawi|Mali|Marocco|Mauritania|Maurizio|Mozambico|Niger|Nigeria|Egitto|Zimbabwe|Ruanda|Sahara occidentale|Sant'Elena|Sao Tomé e Principe|Seychelles|Senegal|Sierra Leone|Somalia|Sudafrica|Sudan|Eswatini|Togo|Tunisia|Uganda|Burkina Faso|Zambia|Tanzania|Botswana|Lesotho|Gibuti|Eritrea|Bermuda|Canada|Groenlandia|Saint Pierre e Miquelon|Stati Uniti d'America|Aruba|Bahamas|Costa Rica|Cuba|Repubblica Dominicana|El Salvador|Giamaica|Guatemala|Haiti|Honduras|Belize|Messico|Nicaragua|Panama|Isole Turks e Caicos|Barbados|Grenada|Isole Vergini britanniche|Dominica|Santa Lucia|Saint Vincent e Grenadine|Anguilla|Isole Cayman|Montserrat|Antigua e Barbuda|Saint Kitts e Nevis|Argentina|Bolivia|Brasile|Cile|Colombia|Ecuador|Guyana|Suriname|Isole Falkland (Malvine)|Paraguay|Perù|Trinidad e Tobago|Uruguay|Venezuela|Australia|Isole Cook (NZ)|Figi|Isole Marshall|Nauru|Nuova Caledonia|Nuova Zelanda|Isole Pitcairn|Polinesia francese|Isole Salomone|Samoa|Tonga|Wallis e Futuna|Papua Nuova Guinea|Kiribati|Tuvalu|Vanuatu|Palau|Stati Federati di Micronesia|Sud Sudan\",\n            \"provinceOrCountry\": \"ALADATBEBGVADKFOFIFRDEGIUKGRIEISLILUMTIMMCNONLPLPTROSMESSECHHUUABYMDEELVLTMKHRSIBARUSKCZRSME  PSAFSABHBTMMBNKHLKCNCYKRKPAEPHTWJPJOINIDIRIQILKWLALBMVMNNPOMPKQASYTHTLTRYEMYSGBDVNAMAZGEKZKGTJTMUZNADZAOBICMCVCFTDKMCGCDCIBJETGAGMGHGNGWGQKELRLYMGMWMLMAMRMUMZNENGEGZWRWEHSHSTSCSNSLSOZASDSZTGTNUGBFZMTZBWLSDJERBMCAGLPMUSAWBSCRCUDOSVJMGTHTHNBZMXNIPATCBBGDVGDMLCVCAIKYMSAGKNARBOBRCLCOECGYSRFKPYPETTUYVEAUCKFJMHNRNCNZPNPFSBWSTOWFPGKITVVUPWFMSS\"\n        },\n        {\n            \"belfioreCode\": \"00200300900b00c00l00v01401a01e01v02202e02f02m02q02v03303803i04504c04e04g04k04n04o05805905a06706h06j06k06l06r07n07o07q08408k08l08n09109a09j09n09s0a20ab0ag0am0at0b10b40bc0bq0bt0cb0ck0cm0co0cq0cr0d00d10d40da0dc0dq0e20e80e90el0f30fd0fi0fk0fo0fp0fu0g10gc0gv0h10h40hc0he0hf0hj0i60i70i90ij0ik0im0iq0j00jg0jj0jp0jv0k10k20k40k80k90ke0kj0l30l70l80la0ld0lg0ll0ln0m70mb0mj0mk0mm0mn0n80nh0ni0nm0nv0om0ot0p30p60p70p80pm0po0ps0q10q60q70q80qq0qu0r10r20r30r40r50r70r90ro0rq0s30s40s50sb0sc0sj0sl0sr0ss0su0sv0t00t50t70t80tf0tn0u60u70u90uk0up0v20v50vc0vj0vl0vu10310f10l10n10s10t11311411911a11g11i11m12112412512712812f12k12p13213513713d13f13g13j13k13q13s13v14314b14c14g14m14p15115215515615m15o15q15r16616816a16p16s16t17417517917c17f17p17t18318a18b18i18s19419619819919d19m19r19s19u19v1a01a31a41a91af1as1at1ba1bp1bv1c61cd1ce1cu1d91de1dg1di1dj1e61e71e81ef1eg1eh1en1ev1f41fd1fe1fj1g91gb1go1h01h31h71hf1hh1hs1hv1i01i11ib1ie1im1ip1j61jk1jm1jp1k11k41k91l41l61lh1li1lp1m01m91mb1mj1mm1mn1mp1mt1n11n41na1nd1nf1nq1o11o81oe1oj1om1ot1p71p91pa1pj1ps1pv1q71qi1qs1rk1rl1s61sm1tc1ti1tl1tn1to1tv1u81ub1uh1ul1v01vd1vr20d20k20n20t21721j22022c22j22k22q22s23023223723j23k23o23r24324424624f24g24h24k25u26926g26o27527927n27r28128m28t29e29j29m29q29u29v2a62ab2an2at2b12b22bg2bn2bp2br2bv2c22cd2ci2ck2cm2cn2cu2d02d12d32d92db2dr2en2eq2eu2f72fi2g22gc2gf2gj2gq2gu2h02h52h92ha2hb2hf2hj2hp2hu2i22ic2in2ja2jb2jf2jq2jv2k02k22k42k62ki2l02l12lb2le2lh2ls2m12m22m92ma2n22n42ne2nf2nl2np2o62o92ob2oc2oe2of2og2oh2oi2ol2oo2oq2pd2pp2pq2q12q92qb2qc2qg2qi2qq2qr2r12r32r42r92rb2rc2rk2ru2s02s12s52s92sh2sl2sm2sn2sq2td2ti2tl2tq2tt2u92uh2un2uo2uv2v72vd2vj2vn2vr2vt30130230830b30c30i30j30p30q31031c31l31q31v32232432a32c32g32h32j32l32m32o32r32s32v33133533633833e33f33n33q34634c34d34f34k34o34p35335935a35g35h35i35k35m35u35v36a36c36i36j36l36o36u36v37537637a37b37c37h37o37q37u38738838938c38e38f38l38v39239339839939a39f39i39m39r39t3a13a43a53a83ac3ad3ah3al3ap3aq3b13b33b83bb3bd3be3bf3bm3bo3bp3c43ca3cm3cn3cp3ct3da3di3dr3ds3dt3dv3e13e53e93ef3eg3f63fb3fk3ft3fv3g03ge3gh3gi3gj3gp3gq3h03h23h43h93hb3hf3hg3hh3hq3i03i93ib3ig3il3ji3jj3k13k43k93ka3kb3kc3ke3kh3kr3kv3l33ls3m23m33mg3mj3mo3mu3n13n83nc3nn3np3nt3nu3o03o63oh3oq3p53p83pf3q43qc3qf3qi3r13r33r53re3ri3s53sh3si3sl3sn3t23ti3u03u33ua3uj3ur3v93vb3vc3vd3vg3vv40340940e40g40l40n40p41141741a41c41m41n42242642e42f42g42l42n42q42u43643j43q43s43u44144n45145645c45j45k45l45m45n45u46546846a46e46f46k46o46r46s46u46v47247447b47o47r48348748948q49149f49k49o49r4a24ab4ao4aq4as4au4b14b44b74bc4bd4bk4bt4bu4cf4cj4cl4cn4cs4d44d94dd4dh4dl4dm4e14e84ec4en4eo4es4f14f44f64f94fa4fm4fp4fr4fs4g14g64g84gb4gk4gn4gq4gs4gt4h14h24h34hd4hh4hi4hn4hr4i04i44ie4ig4io4ip4ir4it4iu4iv4j64j84jd4jg4jh4jl4jn4jo4js4k34k44k54k84kj4kq4kt4ku4l04l64l74l84ld4lo4ls4lt4m24mn4mo4mq4mr4ms4mv4n04ne4nh4np4nt4o34o74oq4ov4p24pd4ph4pk4pu4q74q94qe4qf4qk4qm4r44r64rp4sg4sm4sq4sr4t24t74tc4tf4tg4tp4u04u14u44u64ud4uf4ug4uj4uk4ul4un4v34v64vf50150450850n50u51751851c51h51m51p51t52152b52e52f52k52r52s52v53653b53j53l54454554754g54p55255555655955b55c55g55i55k55m55n55q56256j56m56r56t57557657957i58k58q58u59459h59n59s59u5aj5aq5au5b05b45bd5c15cl5dj5e95eg5ek5ep5ff5fh5g15g35g95gd5gf5gh5gi5gk5gr5gv5he5hj5hr5ht5hu5i35i45i65ii5in5jd5je5jp5jr5jt5jv5k35k85k95ku5l05l25lb5lc5lf5lk5lr5lt5lv5m15m35ma5md5mq5mt5mu5mv5n45nd5nh5nj5nn5nt5o05o85o95oh5ol5ov5p85pg5pp5pq5q15q25qh5qj5ql5r05ru5s15s85sb5sd5sh5sj5t35t45t55t75t95tc5tj5tl5to5tp5tt5u55u95uc5ue5uj5uk5uq5v05vf5vk5vq60u60v61061161461662662862b62d62n62s63663g63t64764t65665965a65i65p65s66566766966k66l67167567767m67s67v68068168968e68m68p68r69869g69j69s6a06a46a66a86aq6b76c56c86c96cb6cg6ck6cm6co6cq6d26d36d76d96dd6di6dl6do6dp6dq6e36e76ep6f96fd6fe6fg6fh6fk6fu6gb6gc6gj6gl6h16h76hc6hd6hi6hk6hl6hn6hq6hr6i36ia6ib6ic6ii6ij6io6ip6is6iu6j36j76jq6jt6jv6kq6l36l86lc6lg6lp6lt6mf6ms6n06nl6ns6nv6o36o66og6oi6ot6p26p46p66pc6pn6q76q86qd6qk6qr6r06r16r46r86rf6rg6rh6rr6rv6s46s76s96sa6sd6se6sh6si6sk6so6sp6sq6sr6t76t86ta6tc6tk6tl6tr6tv6u16u76u86ub6uj6uk6ul6ut6uv6v36v66v96vd6vj6vm6vq6vs6vv70170270370470a70b70d70m70n70p70t71171871h71v72072272772972g72h72j72s72t73e73f73j73q73r73s73v74074174974a74l74q75175475b75h75l75n75o75u76076l76s77577n77r78679179879f79k79q79v7a87ag7am7ap7ar7bn7bp7bs7bu7bv7c57cb7cj7co7cr7cu7d27d37dc7dd7dg7dj7dl7dt7e07e37e87ea7ek7el7em7eo7f07f17f37f57f87fc7ff7fg7fk7g07g57gc7gh7gi7gp7gt7gv7h67h97ha7hg7hp7hs7ht7hu7i37i47i67i77ii7j07k97km7ko7kt7l97le7ln7lo7lq7lt7lv7m27m77me7mu7n17n47n57n77nb7nl7ns7nu7oa7ob7oc7oe7oi7ou7p07p47pc7pr7pu7q17q67q97qa7qd7qk7ql7qm7r17r67r77r97rc7rf7s07s47s57s67sa7se7sh7sj7sl7sn7sr7su7t47t57t87ta7tg7tv7u67uv7v17v77vk7vq80380880c80h80j80q80u80v81281381581b81f81h81l81m81q81s82182d82e82g82t83983b83f83p84e84i84k84n84p84t85385685h85q85r85v86186286386b86e86m87387b87o87u88288888a88b88q89189889b89f89k89m89p89t8a18a28a38a48a58a68ac8ad8ag8au8b38b68b88bd8bg8bo8bs8bu8bv8c38c78c88cb8ck8d88d98db8dc8df8du8ea8ei8ep8eu8f08f28f88fm8g68g98gf8gi8gr8gt8h18h48ha8ho8hq8hr8hs8hu8i08i18i28i48i58i88ig8io8ir8j78jb8je8jg8ji8k18k28k38k48k58ka8kd8ke8kr8l68li8lj8lp8m18m28m48mh8mj8mo8n38n58nc8ng8no8nu8o18o78ob8oc8oj8on8or8os8otantao4aodaokaolaopap1ap3ap4ap5apbapcapdapeapkapraq0aq4aq5aq7aq8aqjaqkaqnaqqaqraqtar3ar6araarfaroarqartarvas1as5ascasnaspasqasrat2at3atbatsatuau1au8au9av0av2av4avhavsavtb00b0bb0jb0ob0pb1fb1hb1mb1ob21b2ab2db2fb2gb2mb2nb2qb30b38b3ab3bb3db3eb3fb3gb3lb3pb3rb3ub3vb42b43b4db4pb4ub5cb5jb60b61b69b6bb6kb6pb6ub73b75b7gb7ub80b8ab8eb8nb8sb8tb8ub91b97b98ba1ba3baibambaobaqbavbb2bb5bb6bbebbgbbjbbkbblbbtbbubc0bc1bc2bc4bc9bcbbcdbcebcfbcqbcvbd3bd8bdcbdebdfbdhbdlbdpbe2be5be6be9bekbfabfbbfcbfdbffbfgbfhbfjbfnbfobfqbg6bgabgdbgebgfbghbgibgkbgmbgobh5bhabhdbhebhgbhhbhobhvbi9bifbinbiobiubivbj3bjcbjjbjlbjnbjobjvbk6bk7bkabkebkhbklbknbkqbksbkvbl5bljblobmpbn6bnabnkbnobntbo1bo2bo3bo4bo5bo6bo7bo8boebofbohbombotbp0bp2bp4bpabpbbpcbpkbpnbq3bqbbqgbqibqlbr0br1br6br7brebrkbrlbrnbrqbrtbs0bs4bsebslbsqbsvbt0bt1bt3bt6btebuuc0bc0gc0hc0j\",\n            \"creationDate\": \"00of01520pa0002b0que0lac002b002b002b002b08dq002b002b002b002b0lac0lct0lct0152002b0o1400pi002b002b0lct0lac002b002b002b0lct002b0lac002b002b0lac002b002b002b00qa0lac0lac002b002b002b0lct0lac0lct002b002b002b0lct0rpp002b002b002b002b002b002b04fp0o51002b002b0i0c0i0c002b0lac0lac0nub002b0rd2002b02340a0d002b0o1a002b0lct0lct002b0lct002b0234002b002b02tp03ih002b07qa0nrp002b002b002b0o8h002b002b06e4002b0lac0lct02340bd8002b002b002b002b002b002b002b002b002b002b002b002b02gh002b0lac002b002b0lct002b002b002b002b002b002b0mfd023400nj0lct0lct00mn0h4g002b0lac0oan0lp6002b002b0nvu0lac0lac002b06ua002b02340lct0lct002b002b002b002b0lct002b0o270lac02lu002b002b002b0nub0lct002b002b002b0lac0lac002b0lac067b002b0lac002b002b002b00nj0lac002b03tg029t02bl002b002b0o2a0lct002b002b0ihh02340lac002b00of002b0lac0cai002b002b023407kk002b0lac0nv8002b0lct002b002b0lac002b002b002b00of017l023402340lct0lct002b00md00of0lac0q1u002b002b002b002b002b002b002b002b0nvi002b0lct0lct002b002b002b0lct002b02340lac002b02ap002b01bu002b002b0lo502s4002b0gun060a02n6002b0234002b0lac002b07kn002b002b002b002b0lac0lct002b002b002b0b8401pf108v00mu002b002b002b002b002b0lac00qn0bem002b00of00mn00qa00mu0lac002b0lct067t0lct0o6f002b0lct002b002b002b002b0lac0lct00nc002b002b002b002b002b002b0nvg0lct002b0lct0nsg0a350lct002b00l600mn00nc029t002b0lac002b002b002b002b002b002b002b002b002b0lct002b002b02fs002b0471002b02340234002b0oca002b0o7h00md0o14002b002b014d00of0lac002b002b00of002b01bu0lac002b00mn002b002b002b0lac0lac03ih002b0lac002b0o0p002b0lct002b00sr0lac002b002b0234002b002b03op002b0o3l00mn034i0lac00md002b002b0o0p0lct002b002b00o800l600o800o800sr00mn02r8002b04jc02570lac002b00mn0nsk002b002b0lct002b0lac002b0lct00tn0lct0lac002b013j0lac01og0lac0nrm0occ002b0lac002b0lac0nt6002b002b0lct0o1300qa00sr002b027k0nqv057h002b0nrp0lac0o1r002b0lct002b00nu002b0lct03db073l0lac00mn02340lac0lac0lac002b002b002b002b0nsd0lac002b0lct002b023402340lac0lct002b002b0o13002b002b0n2q04ga0lac0lct002b0lac0lac002b02r802us002b002b0lac07l20lac03vm06900lac002b002b0lac002b0lac0lac00sr002b002b0lac002b0lac0lac0lct002b002b002b023410mq002b02340lac002b002b002b04c1002b002b0lac014d0lct00nu002b06ta0lct0lac0234002b0b840lac002b002b002b00jl002b0lac0lac0lct0lct00of002b002b00l60lac0lac002b002b0lct02lu002b002b002b0lct002b02en002b0er6002b0lac002b00mn002b002b0234002b0234002b00o80lac002b0lac0nq5002b002b0nte002b002b002b0lac0lac0lac0lac002b002b0lac0lac0lac0lct00sr002b0nua002b002b0lct0lac002b0sfr0nou002b0lct0lct0lct002b0lac0234002b00js00js0lac002b0lp6002b0lct002b02fs002b02fs0lct002b0lct0ctm0lac002b0lct002b002b0lac0lac0gbe002b0m4p0lct002b002b002b002b002b002b00of002b002b002b0lac002b002b0lct002b023404k80lac002b0lac0nqp02c30234002b002b0obj0lct0lac0nu80133002b05qs002b031s002b002b09ss0lac002b0mh4002b0lct0lac002b0lac002b0lac002b002b002b0lct00mn014d0h4g08d80n7r002b0lac04cg0234002b002b080d002b002b0o3p002b0lac002b002b002b0o51017l0lac0lct002b0lct0lct01pf002b0o1q002b002b04jc01kl002b0lac002b0lct0602002b002b002b002b002b002b002b00of002b002b0s5g0lct002b0lct002b002b0lct002b002b002b002b0lct014d002b002b002b002b0lct0lct00mn002b0234002b0lac002b00of0o2a0lac002b02ap0lac0lct002b002b002b03ih002b002b0lac0lac0nte0lac002b002b002b0lac0lct0lct0lct002b002b00q006el002b002b002b002b002b002b002b0lct02340ntl0lac002b0o680lct002b002b0lac0b4n0lac0lct02340lct0o00002b0oc10o4h00mn002b0lac0lac002b0lct0lac002b0lac0lct002b002b0lac002b0lo50lac002b002b0b780lac0lac0nvu002b06qe002b002b0lct08uk002b0o1q002b0234002b002b002b002b002b0lac002b002b0lac002b002b002b00sr0lct0lct0lac0lac002b0nvi0lac002b02340lac002b002b0lct002b002b00of00mn0lac002b002b002b0lct002b002b002b00qn0lct002b0lgf002b0lac002b02340lct0lct0lac002b002b002b002b002b0lac0o3702sf002b002b0lac0lac02340lac0lac0lct0lct0lac0lac002b002b002b0lac0lac0lac002b0lac02340lac002b0lct0lac0lac00sr002b002b00qa00ht0lac002b0306002b002b0234002b05mf0lac0lac0lct0lct0lac00kv002b002b002b0lac0lac0lct02340234002b002b0o2s002b002b0lct02340lac002b0ekd002b0ntg002b0lac002b086014io002b0lac002b002b002b0lac1373080d0234002b002b0lac002b002b002b0lac002b0lac0o1v0lac002b00nj043l03op0a5l00sr00mu002b0nvu0lac002b002b002b0lac0lac002b013q002b00sr0lac0lac0lac002b045j0lac0ocr002b0lct0lac002b00l30lct002b0lac002b0lac0lac002b0lct00if002b0lu30lct002b0lct002b002b002b0lct02bs002b002b002b002b002b002b002b002b002b002b0lac0lac002b0lct0234002b002b002b002b0lac02sf0234002b002b0lct002b002b02s80lct0lac002b0lac002b0lac02340mg5002b002b0s50002b002b002b002b0lac002b0lac0lac0lac0lac0234002b00of002b002b002b002b002b002b002b0nmf002b00nj002b002b0lac0lct002b014d052i002b0lac002b00lo0lct002b002b002b002b002b00of0noe0lac0lct00qa002b002b0lct0lct0lct002b002b0lac002b06ci02en002b002b002b002b0ocj06ua0o0h0lct0lac002b002b002b0lct02bs002b002b02c3002b00of0lac002b00o8002b002b002b0ob80lac04tl002b0234002b002b03cb032g002b0lac02fs0lac0lct00sr00of002b002b002b002b002b002b0o9m002b00qa002b002b00sr0lac002b023400of002b002b002b002b0lct002b029t002b023402vm0nun0lac049h0lac002b0lct00of0ni2002b0lct002b002b002b0lct002b002b002b002b0lac0lct0lac0lct0lct0lct002b0lct002b002b057h0lct002b02sf0r160nsg002b00mn0lct0a4p002b002b002b0lac002b002b0in00lct002b002b002b0lct0lct0lac0lac00l3002b002b0lac0lac0lac0lac002b0oa90lac002b0lac0lac002b0lac0lac002b002b0lac002b002b0lct0lac002b0oan0lct002b0nrf0lac002b002b002b02340234002b002b002b0nun002b002b002b07tq02340lac02bs002b002b02bs002b0234002b002b0lac01or0lac0234002b0nua00of0lct002b0lac0lac0lac0lct01330lac002b002b002b002b0ob7002b0lac02340lac00mu002b0o0p002b0lac0lct002b002b002b0lac002b07kg07kg0lac052i002b00mn0lac03440nun002b0nvi0234002b0h4g00mn002b0nr4002b03ih002b002b002b023403060lct014d00qn0lac00mn0lct0lac0lac0lac002b0lct0lac002b002b002b0o36002b002b002b002b002b002b002b002b0lac002b0oc80lct0lct002b002b002b002b002b002b0137002b0lct02ti0lct0arb0lct002b00of002b0lct002b002b0234017l026o0o0p002b002b02340lct0lct002b002b0o37002b0lac0o36014d052i0lct002b00nj0lac002b002b02bs00sr0lac0lac0lct0nvi0lac002b0lac002b002b002b05sn002b002b00qa017l00l600lo03cb0lac01v20lac002b0lac00q0046300nj0lac0np802n30lac0lct0obg002b02bs00o800md04ar02bs0lct0234002b01pm002b00o800qa0lct002b00pt002b0lac0lct002b0lct0234002b002b002b00pi00qa0lac002b002b0lct00jl00mn002b06ua002b00pi0nhj0lct0lac02bs013j0lac052i002b0o7f002b0234002b0o3l00of0lct00mn0lac002b00sr00lo02ap0nvi0qhe002b00qa002b0ado0nnu0lct00sr002b0lac0lac002b002b0lct00nu002b00q00lct0lac0lac002b00of002b00l60lac002b002b002b0lac00md002b002b00tn002b002b0o36002b002b0lac002b0lac0lct002b002b0lct0lct002b0lct0lct002b0lct002b002b0lac0lac002b0lct002b00qa0lct0lac002b0o4v002b0lct002b00o80lac04250lac0lct002b002b0lac002b0v0b02h8002b0lp6002b002b0lct0lac002b0298002b002b0lct0lac0lct0lac0lct002b002b002b002b002b002b002b002b002b0lct0lac002b002b002b002b002b002b002b002b002b002b0lac002b002b0lac00sr002b002b002b002b0lac0o00002b0lac0lct0lac0o1r0lac0lac002b002b0lac0lct002b0lac0lac0nth002b0lac0lac002b0lct002b0lac02340lct0lac0lac0bd802us0lac002b0lac002b0lac0lct002b0lac002b02340lac0lac0lac0lct0lct002b002b002b0lac002b0lac002b0nua0lac0lac002b002b0lac0lct0lct0lac002b002b0lac002b002b002b03mq002b002b002b002b002b0471002b0lac002b002b0lac002b002b002b002b00pi002b029801pn002b0o99002b02s80lac002b0lct02sf0lac0g4t140i002b0234002b002b0lct0234002b002b0lac0lac0lac002b014d0lct002b0lct002b002b002b0lct002b08c80lac00mu002b0lac0lp60lac0ocm002b0lac0lct002b0lac02340lac0lac0lac002b023400l6002b002b0o5d002b02340nqq002b0234002b0234002b0lac0lac0lac002b002b002b002b02340lac002b0lac002b0o3g002b081v002b002b0o5103uu0fpm0fpm0lac002b00of00qa002b002b002b002b0lct00q00lct0lac002b0lct0lct0lct002b0lac002b0lac0lac002b002b02fs0lac002b0bnp002b0lac002b01pm02s8002b0lac0lac0lac0lac0lac0lac0lac0lac0lct02ap002b002b0o2s002b0lct0ns50lac002b002b002b0lac002b0lac0lct002b002b0lct0nut0lac0lac0lct002b002b002b002b002b002b002b0lac0lct00md0lct0lct002b00nu002b0lac002b0lct002b0lct002b002b0lct0lct0lac002b0lct0o9p02340nvu002b002b002b002b0lct002b002b002b002b0lac002b0sp01fc71h720nnr0o5n\",\n            \"dataSource\": \"8\",\n            \"expirationDate\": \"0nun0o790utj0o1v1nkh0o9a1nkh0nsl1ofh0mfb0mch0o5n0o1q0o4e0nv90nun0nut0utj0o100nr00uco0o1c0tes0o7h0nqe0o4h0o4v0nm80o290utj1obb0oc91nvu0o1c0o5d0nvi0nm50nm50o1q1n930nte0o830ocg0o0q0o0p0o5o0utj0o1d0o3h0n6v0pa00uc30nta0o4e0o3p0o7h0nt60o4e0o5d0ul70npf0nkq0nrp0nss0o3g0o9u0o4e0ulo0nss0utj0nuo1mtm0oae0o760udo1obb0nm00o4h0nua0nut0o740nim0nt60nti0mch0o100o1r1n931mi90npf0nt70oa011ki0np60np60nss0o6816cn0utj1o1d1obb1nkh0nsd0nse0o380o8q0o8q0nrf067c0n4r0nsg0ntt0o1r0o280o1c16av0o991mjb0o3p0ocr0n6v1mi90o0h1mjb0rmd0o8g0o5n0o700mog0utj0rc71obb0nut1mtm0urf0ocg0nu80o5n0uu21l4k0nvj0o3g0o630o361obb0nvu0o0p0nq20nvm0no204c10ns50nsi0ulr1l4k0nou0nsi0ni30nt10ul50utj0nss0nss0nta1n930o4e0nuo0o9u0n6v0nq31n930nu30nsr0nrf0nvj0o000pq71mjb1obb0o370re00mdv0uv50o410nq10nqp0o130nou0o640n6v0nta0o661n930o5d0nvd0nvd0o8f0o7h0o0e0o830v4d0o7c0o4h0tes0o2s1n931nvu0o3o1mjb0o5n0ocb0o5n0o8r0o410o0h0ntu0utj0o1v1n930utj0nj40nsr0o520ob90o7k0nsd0nns0och12dv0nte0utj0o0c0o2b0o0p0nua19es0o1q0mfd0ntf1n930nou0nvj0o380o290nm70n1o1obb0nuo0o3p0o3g0nrf03jv0nlb0nte0nec1oco0o8g0ntp1obb0mfe0nvd1n930utj0no00nqp0nvv0nk40ocr12nm0nqd1nvu0npf0o9v0o511nvu0o9a0tes0o0p1obb0nss0oba1n930obu0nvi0ocm1kp71oc80o1s0v1i0rkn0utj0n6g0ob70o4h1obb0o8r0utj0nqv0nnu02fr02fr0qsr0o7j0o3p0ubv19es0nsi0utj12dm0nua0nof0o1c0mdv0nsd0nv91obb0o370o4e0nto0nta0o5n0nnb0o2s0nun0o5n0o0h0o0p0nta0nu80nt00o7i1nvu0o990o521fse1fse0oae0vqo0nu30udo0q360v1d02l004i00o0h1nvu16cn06r50o0i0o1q0rc71nod0sdk0nm60o4v1nvu0nte0obu0o8r0o9g0nsk1mi90oam0o280utj1mi90utj04710nhk0o9m1obb0o361mjt0omg0out0o7c0oct0v4u0nm80mfb0o4h1mi90o010o1r0qhp0utj0qb80ob80och0mdv0o3h0ocu1nvu0o4f0o130o360nnu0nnu0nhl1nvu0nsl1obb1nkh0nqp0utj0o0h0o0q0nu30o410nv90mog0o3l0nss0ocn0o3l1nvu1n930occ0uqv0oct0oc90nvu1n930v3o0nnv0o270utj15mm1obb0ntg0o9v1oc811o20nhk0obv0uqq0p9h0uii0o7h0utj0o0e0nbj0ntg0utj0mch0scb0mfe0nj40nd60o4e0o020o9g0nu30o000nun0o380v0l1n930o680utj0nv90o0d1oc80nuo19es0o1c1mjb0uv50tes0nrp0utj0nsi0ntf0nut0nlq0nec0o3l0o290o701mi91h38083e0o7d0nvj0n2g1n930o0d0oca0nhj0nhk0oao0ntu0ob80nun0nje0o370nqb0o9g03mr0nvi0o3l0utj0nvi0nrp0nvv0nou1l4k0o8p1oct1n930o7b1lha0o3p1fpd0o0q0o0g1mtm0ntf0utj1o2n1mjb0n6v0o4h0o1s0o1r0nse0nk40oam0no81n930o740o360tcg0o1s0o0q0nun0utj0o130scb0o8q0mdv0o8r0o130nv90o6g0o0f0o370nsh0oca0mfe0utj0mch1oc81mi91mi90nm80nun0nte0o9v0o260od90nvn1n930rpt0nv91oca1n930o7i0mdb0uum0o7h0ntf1obb1nkh0o370nud1mtm0o8q1n930o000nm80o1q0o5d0o640o8q0o0p0nu30o7h0upv0me60me60utj1n930o2b0utj0sfr0o4e0o410o410o360nno1n931fpd0oco0nr00npa1mtm0nq20o740nm80o0f1mjb1obb0ocn0l350o4h0nu90utj0njj0o7i0ob80utj0nvb0o370nts0o8p0nte0obu0utj0o0c0nq20nq20nq20ntf0nun0o5e0o511mi90o0e02tp0o8r0o2s1obb0nm00nsl1nao0nd61n930nu30o280ugb0o0r1nmc0nqe0o7h0ul70utj1n930v3f1mi90o1d0nhk0nhk0nhk0o2b1nkh0ob70o640n3v0utj0nq31o0t1n930nuu0o9g04in0ocd0o2b0o380o3o0utj0o4e0o6f1obb0ntf0sdk0ntf0o5d0nsr1nao0o5102fs0s090o0g0o1v0vp20qts0o020nrc10gf0nsd0ub80o010oam0o1s0nvm0nut0o410o100o0p0ufs0o990nnu0nnu0o7k0nss0nec02s80utj1obb0oc91nvu0nmt0o001n930mfb1lha0o831mjb0o0g0u810utj0ob70nta1mjb1mtm0nte0o3o0o3o0o4e0tcg0o410mch0nt00nvm0obu0o0p0o0c0utj0o521n931nm00nq51n931lha0mch0ueb0mqv0o3o0nou0nuo19es0v4m0nq50o4v0o110nvb0nje1n930o130u0c0ocu0o520nt60nvb0o280o0f0utj0o410o650gbe1mi90o170o7j0rv21nvu0o1c0nvi0nvi0nrp0p4j0nvv0uc70o8r02sj0vqo19es0o7h0o4e1neq0gil0o9g0o1102mc0utj0uvq0mch0utj0unr1nkh0mfb0o201n931mi90nf81n931nvu0ntf0utj0ntg0nvu0ocu0rk30o410nvj0o0p1mjb1oco0o9f0nts0v0l1n9310pf0o740o170o0f0ob90o5d12631n931o0t0nsj0q3g0num0nun0nvi1n930nsi0o700nnb0nm00o810o9v0nsr0o360nte0nts0o000o0q1l4k0o021kbt1mjt0o1s0o7h1mi90o0c0r680o8o0o6f0oc80o640o3h1oca0o270nhk0o1r0nqv1obb0nu80o0f0nsr0nsr0nsr0nvi0ob91oct0utj0utj0o9n0ntf1mjb0nss0o1c0o370o8r11200o2t0nrp0o1b0o4e0o280o100mdb0mdb0o3h0o4h0o700ntf0o0p0o7i0o0e0o7i0mfe0o9f0o1r0ocp0ntg0nnb0nvj19es0nvs0o020nof0oba0n6g0od60oa00o7p0nsi1oct1mi90nr00o3n02u40ff60o5d0nec0utj0utj0ntf0o270nnv0o0q0o1c0nec0o4h0o0p1o1d1oc80nnn1n7u0vp90nqt0nud0utj0nd60o5d1obb0nrp1obb0uoa1mjb0nvj0o381mi91mi902sl0o4h0nnn0nru0oco0o4h1nkh0s090ptc0o4e0qts0o9u0o7j0n6v0o0p1l4k0nio0o9a0ugb0o8q0o7h0o280o7i0o7i1oct0ntg0nvu0nou0unr1n930nmg0ob20o0p0oam1n931nkh1nvu0o3n0o1r0o1b0o0q0o0q0sed0rd00oc90ufs1n9319es0o9g0nta1nkh0utj0nss0o4h1mi90o4e0o7d06kt0o0q1n930o130o700utj0obv0nta1mi90o3g1h380utj0nim1mhc1mhc0nua0nqv0rrb0o9v02t80o9v0odc0mfd0o640o7d0m9u0sp01o1d1h720o6g0no80o3p0o7d1nvu0mfd0obu0o3p0o0g0o510nss0mch0nou1n930ntp1obb0o700o9g0o8r0utj0n6v0s2d0u3j1nvu16fj0o370mch0o9m0o3m0o8r0mfe0nnb0oc20o410ocn0nm80ob70o510rr10nr00od60ntf0o2b11200nta0o140me60nnb0o9f0o0h0oc80nt00o1a0mdv0o7i0nsj0o740utj0ntf1nkh0ocn0nm00nsh0nm611t00oc90utj0o7h01oq0o100nsr0nsr0utj0o8r1mjb1n930nsl0o8r1oc80npf0o8o0o6f0o0p0ulc0rv20uu20o0q17f20o000nhk1mjb0utj0nlb0o9v0o7h0o1s0oba0o130o9f025c0o5j1obb1nvu1nod0uud0o9m0n6v0nnu0m8k1nkh0nnb1muj1nvu0out0nc50o7i0o9u0nvv0nu30nse0nsk1obb1nkh0o9b0o000nuu12921mi90nq10o370mdv0o0p0o5d0nbj0ob80obt0o0e0niq0jll0nhk0nhk048e1nvu1nkh1nao0o101n931l4k1n930o4e0nsi0utj1mjb0nlq1nvu19es0o0p01of0r810utj046g1h721nkh0o3g0ntf0o360o1s0utj0o410nte0nnu0nta0mdv1mi90nu80utj02c61n930uvr12510nrp0o170mmj0n6v0o510n4r0o4v0nun0o2a03dc0rmq0utj0mdv0nru0nvc0utj0nm70nec1nvu0ob70n6v0o510ob81mtm0p9h0o7d1mi90q9j0nvj0l7g0n2f0o640nuo0nut1n930o6f1ofh0o4e1ncl0npf0o001n930o520uoa0utj0oba0um90o7h0o1r0o1r0o3n0o8r1nao0nm80nvu1obb0uu30o2702sj0n6v1mjb1mi50o640nlb0n6v0o360nim1n930o0f0nvb0o521n930nhj0nvk0nnn0nua1nkh0mfb0utj0o8r0o020o5o0o5o0mog0ntp0nec0r7m0nje0nta0nta11va02te0o1s1nvu0o9f0o810o3l0uco0o0e0nvs0utj0nrc1nvu1nvu0o9g0o741nvu1nvu0o1b0o1b1mi91obb0o9a0n6v11dj0num16ue1mi90ndu1obb0o9v0oal120l02fs0o110o1c0nnn0o2s0o8r0nrf0nhk0nsr0npf0nec0oca0o0f0o9f0o8r1n930nn50nut0mfe0nnu0noe0o3n0uc71o2n0o7h0nm10nm11muj0o1r0o630obt0n2q0n450upv0utj0utj0o370ocn1obb0o380o131nvu0nof0nub0nut0o130o0h0ocm0nqe0nrf0ntt0o370nhj0o7n0o5n1o1d0nnu0hfh0utj1nkh0o520nvm0nte0utj0nnu16fj0ulr0ntf0o830uc80ntt0o1a0utj1nvu0o2a18hs04in0o011nm00nua0o9n0o830utj0um60nvk1nkh0o9n0mfb0n4r0mdv1nkh0n87051o0ocg0nnu0o7b0m9u0tcg0nvn0o281mtm02ll0n7o1nkh0o100o0e0o7d123n0o270oca0utj0uqv0ocu0nim0nu90o0p0nqp0nim0utj1oc803db0tcg0fs40nu91n930o4h0n6v0o0h1mi90o9n0nhj0n4r0utj0o9m0obg0o000ntg0o3g0n6v0oam06hh1ikn0utj0o700ntt0nqb0ob91nkh0od812e00utj0oca1o1d0ocm0o4e0o1a0nsi112103db0nlb0o291ikn0nsi0nhk0gib0sh91mi90np20m9u0nou0uu316fj0npa0n6v0o631nao1mjb0o3p0nu80o000o9g0o1s0nuu0nto0utj0o0102c60o960utj0nub0nec0me60nub0npf0nvj0o9m1obb1mi90o0h0oc20oal1h380obu0o100noe0o0e0uq01mi90nsh0o9g0o7i0nut0o410nmt0o1d0o0g0nof1mi90nut0o370nbj0nsr0o2b0oco0o8q0o3g0nnv0o410o9f1nkh0utj0nut1n9311210rf20o0h1nod0ocu0o4e1nkh0o8r0utj0ocu0n6v0o4h0nof18hm0fs40nr00oc11mtm02ls0nf81n930non1mi90npa0nu30o0c0ntf0o4h1mtm0mog0nbj0ntt1obb0nu90o7h0nun0o4v0ntf0nvb0utj0nft1obb0o5f0o5f153g1obb0o2a0o640o700od606kt1n930o101nod0ocp0nvb0o380nsl0nvb0o720o7a11b31mi90o7d0nm70nun0ula0msr1n930o520n6v0nvi0o360nqp0o8r0o7a0uqv0no01mtm0oc90o0g1kp70o380ntf0o8r0utj0o7d1n931obb0no10nte0o000o8q0nun0nvs0utj0utj0nvk0n3v1mi91n930o4h0o640o0f0ns50o720nt60o271n930o0q0oc90o7h0urf1l4k1l4k0o370nuo0ob80utj0utj1n930nvm0o3n0o8q046v0mdv0o360oai0o720o280nhk0nvm0o000oai0o370o7p0o3o0ntt1n931obb0nou0o0e0o0e0o3g0o9f1mi90o271nvu0uu51mjb0mch0o7d1nod0nu81o0t1mtm0o3g1obb0noj16o40rfb0nlq0nte1oc81obb0nrp0o8q1n930p9h0o990kbu0o3h0rfb19es0ocj0nsd0o0p0o360ocu0o0i0o821obb0obg1n930utj0nvs0qhe0nu30oam0utj1obb0o1s0on50ocp0mfd0nuu0rhr0rpt0o000o9v1obb11o10o8p0rp111c71mjb1oc80nje1mtm1obb0oam0oam0o1s0nt60o2s0o4v02641mi50o2a0nsj1n930o371mjb0nsi0o9f0ob90nrp13ie0fpn1mjb1mjb0o280pq70rcp0o021mi90nu31och0nua0o0c0obf0o0f0o7d0oco19es0o7f0nta1obb1mtm1nvu0o0q1n9303jv0o3m0o0h0o8r0o6g0o3p0q360o8r1n93141p0mch0o4i0o8r0o7p1nvu16av1n931n931n930nut0nf80nvm0o7n0nto0uum0nrp19es0utj0o1b0nu80o370o0e1n930oca0nvk0utj0o000nu81o0t0udb0nec0ob80o000o7b0o7b0nqq0nqr0nnb0nse0nq10o7h0utj0o0p0utj0utj0nte0eq90ocn0p9h0o290o3n0nts0pa00nt00n6v0o0p0o411obb0o1a0utj11vb0nd60v3k1och0nmv1n9302t50utj0ocn0o2b0o1r0nrp1n930nno0utj1g1k1obb10b311io\",\n            \"name\": \"Abbadia Sopra Adda|Abbadia Alpina|Abbazia|Abbiateguazzone|Abetone|Acereto|Acquacanina|Acqualunga|Acquarica Del Capo|Acquate|Affori|Agaro|Agnellengo|Agnona|Agrano|Agrone|Aiba|Aidussina|Aiello In Calabria|Aizurro|Albanova|Albaretto Valle Di Macra|Albate|Albegno|Alber Di Sesana|Albes|Albese|Albogasio|Albogno|Albona|Alice Superiore|Alliz|Alluvioni Cambio|Alma|Almazzago|Alone|Alzano Maggiore|Alzano Sopra|Alzate Con Linduno|Amblar|Andogno|Andonno|Andorno Cacciorna|Anfurro|Anicova Corada|Anterselva|Antignana|Antronapiana|Anzino|Apparizione|Apriano|Apuania|Ara|Aranco|Arbizzo|Arcellasco|Arcumeggia|Ardena|Bressana|Arienzo San Felice|Arischia|Arixi|Arizzano Inferiore|Arizzano Superiore|Armio|Armo|Arnago|Bondo Breguzzo|Arolo|Arsia|Arto|Arzene|Arzeno Doneglia|Asnago|Atella Di Napoli|Auditore|Auremo Di Sopra|Aurisina|Auzate|Auzza|Avenone|Avesa|Avuglione E Vernone|Bagaggera|Baggio|Bagnaja|Bagnasco Dasti|Porretta Terme|Casciana Terme|Bagno|Baiedo|Baio Dora|Bairo Torre|Ballabio Inferiore|Ballabio Superiore|Ballarate|Balsamo|Banco|Barbana Distria|Barbarano Vicentino|Barberino Val Delsa|Barchi|Barco|Barcone|Bardassano|Bardino Nuovo|Bardino Vecchio|Baresi|Bargano|Barra|Barsizza|Bartesate|Barza|Barzaniga|Barzola|Baselga Di Vezzano|Baselica Bologna|Bastida De Dossi|Battaglia Della Bainsizza|Bauso|Bavari|Bazzano|Beaulard|Bellagio|Bellizzi Irpino|Bellombra|Belluno Veronese|Bel Prato|Berdo San Giovanni|Bergogna|Bernate Rosales|Berra|Bersezio|Bersone|Beseno|Bersezio Del Quarnaro|Bestagno|Beura|Bevilacqua Boschi|Bezzecca|Biacesa|Biegno|Bieno|Biestro|Bigarello|Biglia|Bigliana|Biglio|Binanuova|Bindo|Bisio|Bisterza|Bizzozero|Bleggio|Bleggio Inferiore|Boara Polesine|Bobbiate|Boccolo De Tassi|Bodio|Bogliasco Pieve|Bogliuno|Bognanco Dentro|Bognanco Fuori|Bogno|Bolbeno|Bolentina|Boleto|Bollone|Bolzaneto|Bondione|Bondo|Bondo Petello|Bonzo|Bordogna|Borghetto San Nicolo|Borghetto|Borgio|Borgoforte|Borgofranco Sul Po|Borgonato|Borgo Panigale|Borgo Santagata|Borgounito|Boriano|Bornate|Bornato|Borsano|Borsea|Borzago|Borzoli|Bosco Valtravaglia|Boscomare|Bosentino|Bottarone|Botticino Mattina|Botticino Sera|Bottrighe|Bousson|Bovile|Bozzana|Bracca Di Costa Serina|Branduzzo|Brazzano|Breccia|Breglia|Breguzzo|Breia|Brembate Di Sotto|Brembilla|Brenno Useria|Sombreno|Brentino|Breonio|Brestovizza In Valle|Bretto|Brianzola|Briga Marittima|Brignano Del Curone|Brione|Brioni Maggiore|Brisino|Brissago|Brovello|Brovida|Brozzi|Brozzo|Bruntino|Brusaschetto|Brusasco Cavagnolo|Buccinigo|Bucuie|Budagne|Buggiolo|Bugiallo|Bugnate|Buie Distria|Bulgorello|Burano|Burgusio|Busana|Buso Sarzano|Bussana|Bussolino Gassinese|Buttogno|Campoverde|Caccia|Ca Dandrea|Caddo|Cadegliano|Cadero Con Graglio|Ca De Stefani|Ca De Tedioli|Ca Di David|Cadignano|Cadine|Cadrezzate|Ca Emo|Cagliano|Cagno|Cajello|Cajonvico|Calavino|Cal Di Canale|Calepio|Calino|Calogna|Calolzio|Calvaruso|Calvi San Nazzaro|Camagna Di Torino|Camairago|Camarda|Camasco|Camignone|Caminata|Caminata In Tures|Camnago Volta|Camnago Faloppia|Camo|Campagnano Vedasca|Campello Monti|Campiglia Cervo|Campo Canavese|Campo|Campochiesa|Campolongo Al Torre|Campolongo Sul Brenta|Camporosso In Valcanale|Campospinoso Albaredo|Campovico|Canale Disonzo|Candeasco|Candelara|Canepa|Canevino|Canezza|Canfanaro|Canneto Di Bari|Cannitello|Canova Del Morbasco|Cansero|Cantonale|Capiago|Capiate|Capitello|Capodistria|Capolago|Caporetto|Capriano Azzano|Capriate Dadda|Capriva Nel Carso|Capronno|Caramagna Ligure|Carate Lario|Carbonara Di Bari|Carbonara Di Po|Carcano|Carciato|Carcina|Cardana|Cardezza|Carella Con Mariaga|Careno|Carezzano Superiore|Cargiago|Carida|Carlazzo Valsolda|Camigna|Carobbio|Caronno Corbellaro|Carpaneta Con Dosimo|Carpasio|Carpignago|Carpugnino|Carrara San Giorgio|Carrara Santo Stefano|Cartari E Calderara|Carugo Arosio|Carzago Della Riviera|Casalba|Casale Cremasco|Casaleggio Castellazzo|Casalorzo Geroldi|Casalpoglio|Casanova Lanza|Casasco Dintelvi|Casez|Casirago|Casletto|Caslino Al Piano|Casnate|Casole Bruzio|Casotto|Cassago|Cassano Albese|Cassano Spinola|Cassina Mariaga|Cassine Gandine|Castagne|Castelbello|Castel Cellesi|Castel Colonna|Casteldarne|Castel De Ratti|Castel Dobra|Castelfranco Di Sopra|Castel Iablanizza|Castel Lambro|Castellammare Adriatico|Castellano|Castellar|Castellaro De Giorgi|Castellavazzo|Castellengo|Castelletto Monforte|Castelletto Po|Castelletto Villa|Castelli Cusiani|Castello Valsolda|Castello Sopra Lecco|Castello|Castello Di Serravalle|Castellone Al Volturno|Castellonorato|Castelluccio|Castelnuovo Distria|Castelponzone|Castelruggiero|Castel San Pietro Monferrato|Castelvecchio Di Santa Maria Maggiore|Castelvero Dasti|Castiglione Dasti|Castiglione Dintelvi|Castiglione Dossola|Castione Veronese|Castrezzone|Cataforio|Catona|Cauria|Cavacurta|Cavaglio San Donnino|Cavaglio Spoccia|Cavallasca|Cavandone|Cave Auremiane|Caversaccio|Covelano|Cavona|Ceconico|Ceglie Del Campo|Ceglie|Celentino|Cellina|Cella Di Bobbio|Celledizzo|Cellio|Cembra|Cenate|Cenate Dargon|Cenesi|Cengles|Cenova|Centa San Nicolo|Centrisola|Cepino|Cerchiate|Cernizza Goriziana|Cernusco Montevecchia|Cerreto Castello|Cerro Lago Maggiore|Cervarolo|Lentiai|Cesello Brianza|Cesi|Cesnola|Ceto Cerveno|Ceves|Challant Saint Anselme Et Challant Saint Victor|Champlas Du Col|Cherso|Chiabrano|Chiaiano Ed Uniti|Chianchetelle|Chiapovano|Chiaravalle Milanese|Chiavazza|Chienis|Chignolo Verbano|Chirignago|Chizzola|Ciago|Ciardes|Cignano|Ciliverghe|Cima|Cimamulera|Cimbergo Paspardo|Cimego|Cinisello|Circhina|Cireggio|Ciseriis|Cismon Del Grappa|Issengo|Cittanova Distria|Civello|Civenna|Cividate Malegno|Civiglio|Cizzago|Clana|Clusane Sul Lago|Clusio|Cobbia|Cocquio|Cognola|Cogolo|Coimo|Coiromonte|Colbordolo|Colcavagno|Colciago|Coldrano|Col Di Rodi|Colfosco|Collagna|Segnacco|Colle In Casies|Collescipoli|Collestatte|Colli In Pusteria|Cologna|Cologna Gavazzo|Cologna In Giudicarie|Colognola Del Piano|Colombaro|Col San Giovanni|Colsano|Comairano|Comano|Comasine|Comeno|Comero|Comezzano|Comnago|Concadirame|Concei|Concenedo|Conco|Condino|Conio|Consiglio Di Rumo|Consonno|Contarina|Contra|Corciago|Coredo|Corenno Plinio|Corgnale|Corigliano Calabro|Cornale|Cornigliano Ligure|Corona|Curon|Correzzo|Cortabbio|Corte|Corti In Pusteria|Cortenedolo|Corteolona|Corteranzo|Corticelle Pieve|Cortile San Martino|Corvara In Passiria|Corzes|Cosbana Del Collio|Cossana|Due Cossani|Cossila|Cossirano|Costa Doneglia|Costasavina|Covelo|Crana Gattugno|Cravegna|Creda|Credera|Cremezzano|Cremnago|Crenna|Crenovizza|Crescenzago|Crespano Del Grappa|Crespellano|Crespina|Cressogno|Creto|Crevenna|Crevola Sesia|Croce|Croce Di Mosso|Crocetta|Crosa|Crosara|Crusinallo|Cuccaro Monferrato|Cunevo|Cuquello|Quarazze|Curdomo|Curnasco|Cursolo|Cursolo Orasso|Cutigliano|Cuzzago|Dagnente|Daone|Dardine|Dare|Darzo|Dasio|Degagna|Deggiano|Dercolo|Dermulo|Descla|Desenzano Al Serio|Desertes|Dezzo Di Scalve|Diano Borello|Diano Calderina|Dignano Distria|Dimaro|Dissimo|Divaccia Grotte Del Timavo|Divaccia San Canziano|Doccio|Dole|Dol Grande|Dol Ottelza|Domusnovas Canales|Don|Donada|Donelasco|Donigala Fenughedu|Donigala Siurgus|Dorsino|Dozio|Draguccio|Drano|Dresenza|Drezzo|Drizzona|Drusacco|Duemiglia|Duino|Dusino|Duttogliano|Elena|Elle|Ellera|Elsane|Endenna|Endine|Enguiso|Eores|Erba Incino|Erbanno|Erpelle Cosina|Ersel In Monte|Escovedu|Esino Inferiore|Esino Superiore|Esio|Esmate|Fabiasco|Fabbrica Durini|Fabbriche Di Vallico|Faetto|Fagnano Sul Naviglio|Falesina|Fallascoso|Falmenta|Famie|Farvengo|Farra Dalpago|Favaro Veneto|Faver|Faverzano|Favogna Di Sotto|Favria Oglianico|Feletto Umberto|Felonica|Fenile|Fenils|Fertilia|Fianona|Fiera Di Primiero|Mirabello Comasco|Figline Valdarno|Figu|Finalborgo|Finale Marina|Finale Pia|Finero|Fiordimonte|Fiorenzuola Di Focara|Fisto|Fiumana|Fiume|Fiumenero|Fiumicello|Flavon|Flecchia|Fleres|Foce|Foiana|Folsogno|Fomarco|Fondra|Fontana Del Conte|Foresto Sesia|Foresto Di Susa|Formignana|Fornero|Forni Di Val Dastico|Forno|Forno|Forno Alpi Graje|Forno Di Zoldo|Forotondo|Fossa Guazzona|Fossarmato|Fosseno|Frascata|Frassinello Olivola|Frassinere|Fraveggio|Frerola|Frignano Maggiore|Frontignano|Frontone Serra|Fuipiano Al Brembo|Fundres|Fusine In Valromana|Gabbioneta|Gabria|Gabrovizza|Gadesco|Gaggino|Gaiola Moiola|Galdo|Gallico|Gallina|Galluzzo|Garabiolo|Gardolo Al Piano|Garegnano|Gargaro|Gattico|Gauna|Gavazzana|Gazzada|Gazzelli|Genzone|Germanedo|Germasino|Gerolanuova|Gerosa|Ghevio|Ionia|Gimino|Ginestreto|Goiaci|Gironico|Giuncugnano|Godovici|Goglione Sopra|Goglione Sotto|Goido|Golese|Goriano|Gorlaprecotto|Gornate Superiore|Gorrino|Gorzone|Gottro|Gozza|Gracova Serravalle|Graglia Piana|Granaglione|Grancona|Grandola|Grauno|Gravedona|Greco Milanese|Gressoney|Gries|Grignano|Grignano Di Polesine|Grimaldo|Grisignana|Grisolia Cipollina|Grona|Groppo|Grotte Santo Stefano|Grumello De Zanchi|Grumello Del Piano|Grumes|Grumo|Guardia Piemontese Terme|Gudon|Guidomandri|Gurone|Iatrinoli|Iavre|Idresca Disonzo|Idria|Idria Di Sotto|Imberido|Incino|Incisa In Val Darno|Indovero|Intimiano|Intra|Introzzo|Inverso Porte|Invorio Inferiore|Invorio Superiore|Inzino|Ioannis|Ipplis|Irgoli Di Galtelli|Ischia|Isola Balba|Isola Comacina|Isola Distria|Isola San Giulio|Isolella|Ivano Fracena|Jerago Con Besnate Ed Orago|Lacinigo|Laglesie San Leopoldo|San Giorgio Di Lago|Lagosta|Laino Bruzio|Lambrate|Lanischie|Lanza|Lanzo Dintelvi|Laorca|Lappago|Lardaro|Lari|Lase|Lasino|Laterina|Laudes|Laurana|Laveno|Lavina|Lazfons|Villabella|Ledine|Legos|Lemna|Lenno|Osmate|Lenzima|Lenzumo|Lesa Belgirate|Lessona|Letojanni Gallodoro|Levrange|Lezza|Libussina|Licignano Di Napoli|Licusati|Lieto Colle|Ligonchio|Ligosullo|Limonta|Linate Al Lambro|Lingueglietta|Linzanico|Lisanza|Lisignago|Lissago|Livemmo|Lizzana|Lizzola|Locadi|Locarno|Locate Bergamasco|Locavizza Di Aidussina|Locavizza Di Canale|Locca|Lodrone|Lomaniga|Lomaso|Lon|Lonato|Longarone|Longiaru|Lorentino|Lorenzana|Lose|Loseto|Lottulo|Loveno Grumello|Loveno Sopra Menaggio|Lover|Lozzo|Lu|Lucernate|Lucinico|Lucino|Ludriano|Lugnacco|Vazia|Luico|Lumezzane Pieve|Lumezzane San Sebastiano|Lumezzane Santapollonio|Lundo|Lusciano E Ducenta|Lusiana|Lussingrande|Lussinpiccolo|Lutago|Luzzogno|Maccagno|Maccagno Inferiore|Maccio|Maderno|Madrano|Madruzzo|Maggianico|Magno Sopra Inzino|Magognino|Magras|Magre|Magre Vicentino|Maia Alta|Maia Bassa|Malborghetto|Malchina|Malgolo|Mallas|Malpotremo|Malvino|Maniglia|Mantana|Manzano|Marano|Maranola|Maranza|Marcellise|Marco|Marcorengo|Maresego|Mareta|Margone|Mariano Al Brembo|Marmorito|Maro Castello|Martina Olba|Masciago Milanese|Masi Di Vigo|Masnago|Mason Vicentino|Massa Fiscaglia|Massama|Massa Superiore|Masse Di San Martino|Masse Di Siena|Mastellina|Mattarello|Matteria|Mattuglie|Mazia|Mazzo Milanese|Mazzoleni E Falghera|Mazzunno|Meano|Meano|Mechel|Medana|Megliadino San Fidenzio|Mel|Melezet|Menarola|Mendatica Montegrosso|Mentoulles|Mercurago|Merna|Mestre|Mestriago|Meugliano|Mezzana Superiore|Mezzani|Mezzano Imer|Mezzegra|Mezzolago|Migiandone|Migliarino|Migliaro|Mignette|Millan Sarnes|Millaures|Milzanello|Minoprio|Miola|Mirabello|Mirabello Ed Uniti Di Pavia|Mizzole|Moano|Mocchie|Moerna|Moiana|Molassana|Molina|Molina Di Ledro|Molini Di Colognola|Molini Di Tures|Molino Alzano|Mollaro|Mollieres|Molo Di Borbera|Montegrazie|Moltedo Superiore|Molvena|Mombello Lago Maggiore|Monasterolo Torinese|Monate|Novello Monchiero|Monclassico|Mondonico|Mondonio|Mondrone|Monghezzo Di Fuori|Montagne|Montalcino|Montalto Ligure|Montalero|Montano Comasco|Montassilone|Monte Di Mezzodi|Monte Di Tramontana|Montecatini Di Val Di Nievole|Montecelio|Montechiaro|Montechiaro Denice|Monte Colombo|Monte Di Capodistria|Montefontana|Montegrino|Montemaggiore Al Metauro|Montenero Didria|Monte Ossolano|Monteponente|Monterado|Montes|Monte San Candido|Montesanto Vigi|Monte San Vito|Montescudo|Montesicuro|Montesilvano Marina|Montespino|Montestrutto|Monte Urabice|Monteveglio|Monteviasco|Montiglio|Montona|Montorio Veronese|Montoro Inferiore|Montoro Superiore|Montrigiasco|Montrone|Montu Berchielli|Morca|Moregnano|Morondo|Morosolo|Mortano|Mortaso|Morter|Mortizza|Moschiena|Mossano|Mosso Santa Maria|Mozzio|Mu|Muceno|Mules|Villa Poma|Murano|Muriaglio|Musadino|Muscoli Strassoldo|Musellaro|Musignano|Musocco|Nacla San Maurizio|Nanno|Nava|Nave San Rocco|Navono|Naz|Negarine|Neresine|Nervi|Nese|Nettunia|Nibbiano|Nicastro|Nigoline|Niguarda|Noarna|Nocco|Nogare|Nomesino|Noriglio|Novacella|Novale|Novareglia|Novate Brianza|Novillara|Nozza|Nuchis|Nuraxinieddu|Olba|Olcio|Olgia|Olgiate Calco|Olginasio|Tavernette|Olivastri|Oltrepovo|Oltresarca|Oltresonzia|Oltressenda Bassa|Oltrona Al Lago|Ombriano|Oneglia|Onies|Onno|Ono Degno|Opacchiasella|Orasso|Orciano Di Pesaro|Oreno|Orezzo|Oriano|Oriano Di Brianza|Orino Azzio|Oris|Orsera|Orta Novarese|Orti|Ossanesga|Ossecca Vittuglie|Ossegliano San Michele|Ossero|Ossolaro|Ossuccio|Padergnone|Padernello|Paderno Cremonese|Paderno Del Grappa|Paganica|Paglieres|Paisco|Palanzo|Palazzo Piverone|Pallanza|Palvareto|Paniqua|Pannone|Pantasina|Papigno|Pare|Parenzo|Parona Di Valpolicella|Parone|Parravicino|Rivolto|Passerano|Paterno Dancona|Patone|Patrignone|Pavone Dalessandria|Pecco|Pecorara|Pedace|Pedanea|Pederzano|Pegli|Pellaro|Pellestrina|Pellio Intelvi|Penzano|Perego|Pergine Valdarno|Perno|Perra|Persico|Persone|Perteole|Peschiera Maraglio|Pessina Valsassina|Pezzoro|Piadena|Piagge|Piaggine Soprane|Pianavia|Pianceri|Pian Dartogne|Pian Di Sco|Piane Sesia|Pian Gaiano|Piani|Piano Porlezza|Piano|Pianura|Piavon|Piazza Santo Stefano|Piazzo|Piazzo Alto|Piazzo Basso|Piediluco|Piedimonte Del Calvario|Pietra Gavina|Pieve Di Coriano|Pievebovigliana|Pieve Dalpago|Pieve Delmona|Pieve Di Bono|Pieve Di Ledro|Ramiseto|Pilcante|Pilzone|Pinguente|Pino Sulla Sponda Del Lago Maggiore|Pione|Piovera|Pirano|Pirri|Piscinola|Piscopio|Pisino|Pissarello|Pistolesa|Piteglio|Pizzocorno|Planol|Planina|Plata|Plezzo|Pliscovizza Della Madonna|Pocrai Del Piro|Podargoni|Podraga|Poggi|Poggio Berni|Poggio Fidoni|Pola|Polengo|Polesine Parmense|Pometo|Poncarale Flero|Pontagna|Ponte Lambro|Pontebba Nova|Pontedecimo|Ponte Di Nossa|Ponticelli|Ponzate|Por|Portese|Porto Dadda|Porto Civitanova|Portole|Porto Maurizio|Porzano|Poscante|Postumia Grotte|Poverio|Povo|Pozza Di Fassa|Pozzo Alto|Pra|Prandaglio|Pranzo|Praso|Prati|Prato Alla Drava|Pratovecchio|Pratovecchio Stia|Pre|Precotto|Pregasina|Preghena|Preglia|Premione|Preore|Presegno|Presicce|Presson|Prestine|Preturo|Prevacina|Prezzo|Priacco|Priero Montezemolo|Primano|Primeglio Schierano|Primiero|Prio|Provaglio Sopra|Provaglio Sotto|Provezze|Prun|Puos Dalpago|Puria|Quaglietta|Quaregna|Quarna|Quarti|Quartiano|Quarto Dei Mille|Virgilio|Quero|Quetta|Quinto Di Valpantena|Quinto Al Mare|Quinzanello|Quinzano Veronese|Quittengo|Raccolana|Radicena|Raffa|Ragoli|Ragusa Ibla|Riscone|Ramo Di Palo|Ramponio|Ramponio Verna|Rancio Di Lecco|Ranziano|Ranzi Pietra|Ranzo|Rasun Di Sopra|Rasun Di Sotto|Retacevo In Monte|Ravellino|Ravina|Rebbio|Redona|Remedello Sopra|Remedello Sotto|Renate Veduggio|Rescalda|Resia|Revere|Reviano Folas|Revigliasco Torinese|Rezzonico|Rhemes|Riclaretto|Ridanna|Rifembergo|Rigosa|Rima San Giuseppe|Rimasco|Rina|Rinco|Rio Nellelba|Rio Marina|Riomolino|Ripalta Nuova|Ripe|Riva Valdobbia|Riva Di Tures|Rivarolo Ligure|Riva Santo Stefano|Rivera|Riviera Dadda|Rivignano|Rivoltella|Ro|Rocca Pietra|Roccacaramanico|Rocca Del Colle|Roccaguglielma|Roccalvecce|Roccapiatta|Rochemolles|Rocchetta Cengio|Rodda|Rodengo|Roditti|Roggiano Valtravaglia|Roio Piano|Romagnano|Romano Brianza|Romans|Romarzolo|Roncogno|Roncone|Rongio|Ronzina|Ronzo|Rosali|Rosciate|Rosingo|Rosora Mergo|Rossano|Rossino|Rota Dentro|Rota Fuori|Rovagnate|Rovate|Rovegro|Rovenna|Rover Carbonare|Roversano|Rovetta Con Fino|Rovigno Distria|Rozzo|Rubbiano|Ruginello|Ruino|Rumianca|Runo|Sabbia|Sabbio Bergamasco|Sabbioncello|Sable Grande|Sacconago|Saga|Sagliano Di Crenna|Sagoria San Martino|Saiano|Sala Al Barro|Salabue|Salcano|Sale Castelnuovo|Salecchio|Saletto|Salice Calabro|Salina|Salona Disonzo|Saltara|Salto|Salvaterra|Samaria|Sambasso|Sambatello|Sambiase|Sambuco Pietraporzio|Sambughetto|Samoclevo|Samo Di Calabria|San Bartolomeo Valmara|San Bernardino|San Daniele Del Carso|San Fedele Intelvi|San Felice Di Scovolo|San Felice|San Francesco Dalbaro|San Gallo|San Germano Dei Berici|San Gervasio Dadda|San Giacomo|San Giacomo|San Giacomo In Colle|San Gillio Torinese|San Giorgio|San Giorgio Di Pesaro|San Giovanni|San Giovanni Alla Castagna|San Giovanni A Teduccio|San Giovanni Battista|San Giovanni Dasso|San Giovanni Di Galermo|San Giovanni Reatino|San Giuseppe Di Casto|Villa San Giuseppe|San Lazzaro Reale|San Lazzaro Alberoni|San Lazzaro Parmense|San Leonardo|San Leucio|San Lorenzo In Banale|San Lorenzo Mondinari|San Lugano|San Marcello Pistoiese|San Martino Al Cimino|San Martino Di Perrero|San Martino Al Monte|San Martino De Calvi|San Martino In Beliseto|San Martino In Casies|San Martino Quisca|San Marzano Moasca|San Marzanotto|San Massimo Alladige|San Michele Dasti|San Michele Prazzo|San Michele In Teverina|San Michele Extra|San Michele Di Postumia|San Nazario|San Novo|San Pancrazio Parmense|San Pantaleo|San Paolo Della Valle|San Paolo Cervo|San Pelagio|San Pier Darena|San Pier Fedele|San Piero A Sieve|San Pietro|San Pietro Di Gorizia|San Pietro A Patierno|San Pietro Del Carso|San Pietro Di Barbozza|San Pietro Di Monterosso|San Pietro Dorzio|San Pietro Irpino|San Ponzo Semola|San Quirico In Val Polcevera|San Sigismondo|San Silvestro|Santabbondio|Santa Croce Di Aidussina|Santeufemia Della Fonte|Santagata Sopra Cannobio|Santagata Irpina|Santa Giulia|Santagostino|Santalbano Di Bobbio|Santa Luce Orciano|Santa Lucia Disonzo|Santa Maddalena In Casies|Santa Margherita Dadige|Santa Margherita Di Bobbio|Santa Margherita|Santa Maria Della Croce|Santa Maria Del Monte|Santa Maria Di Rovagnate|Santa Maria In Prato|Santa Maria In Stelle|Santa Maria Maggiore E Crana|Santa Maria Rezzonico|Santambrogio Olona|Santandrea Di Gorizia|Santandrea Di Vallefredda|Santandrea In Monte|Santangelo In Lizzola|Santantonio Dadda|Santantonio A Trebbia|Santapollinare Con Selva|Santa Valeria|Santeufemia Lamezia|Santicolo|Santilario Ligure|Santino|Zoldo Alto|Santomobono Terme|Santo Spirito Della Bainsizza|Santo Stefano Del Monte Degli Angeli|Santo Stefano Di Briga|San Valentino Al Brennero|San Valentino Alla Mutta|San Vero Congius|San Vigilio|Sanvincenti|San Vincenzo Al Volturno|San Vito E Modesto|San Vito In Monte|San Vito Di Vipacco|Saone|Sardagna|Sarola|Sartirana Briantea|Sassa|Sasso Di Bordighera|Sasso|Sassocorvaro|Savigno|Savoulx|Scaleres|Scaletta Uzzone|Scandeluzza|Scannabue|Scano Al Brembo|Scanzo|Scaria|Scarnafigi Ruffia|Scarperia|Scarpizzolo|Sciaves|Scavolino|Scelmo|Scherbina|Schianno|Schieranco|Scodovacca|Scoppo|Torriana|Scrilla|Sebreghe|Secondigliano|Sedula|Seghebbia|Segno|Segno|Seio|Selino|Sella Delle Trincee|Sellere|Selve Marcone|Senosecchia|Seo|Seppiana|Seprio|Serbariu|Serpenizza|Serra Pedace|Serravalle Dasti|Serravalle Alladige|Serrungarina|Serso|Sesana|Sessant|Sestri Ponente|Sevignano|Sforzatica|Siamanna Siapiccia|Sicci San Biagio|Sili|Silun Montaquila|Sillano|Silvella|Senadole|Siror|Sisini|Sissa|Siurgus|Siviano|Slappe Zorzi|Slingia|Slivia|Smarano|Smeria|Soccavo|Solanas|Solbiate|Solbrito|Solomiac|Solto|Solzago|Somana|Somendenna|Sonzia|Sopramonte|Soprana|Sopraponte|Soprazocco|Sorbano|Sorbolo|Sorbolongo|Sorli|Sovazza|Spadafora San Martino|Spadafora San Pietro|Spera|Spezzano Grande|Spezzano Piccolo|Spinga|Spino Al Brembo|Spinone|Spoccia|Stabello|Staghiglione|Stava|Stazzona Germasino|Stia|Stilves|Storie|Strada|Strambino Romano|Stramentizzo|Strigno|Stropino|Struppa|Stumiaga|Sturia Delle Fusine|Suna|Susa|Tabla|Tagliolo Belforte|Tagliuno|Taio|Tanas|Tapigliano|Tapogliano|Tappia|Tarces|Tarcetta|Tarnova Della Selva|Tarres|Tassullo|Tavarnelle Val Di Pesa|Tavernola San Felice|Tavodo|Tavole|Tavon|Tavordo|Telves|Temenizza|Tenda|Teodone|Teodorano|Teor|Terlago|Termenago|Termon|Ternova Disonzo|Torrenova Di Bisterza|Terrasa|Terrati|Terrazzano|Terres|Terzano|Tesido|Thures|Tiarno|Tiarno Di Sopra|Tiarno Di Sotto|Timoline|Tina|Tiso|Tolmino|Tomadio|Tonadico|Torba|Torbiato|Torra|Torradello|Torrazza|Torre Beretti|Torre Del Mangano|Torre Del Monte|Torre De Ratti|Torre Orsina|Torre Uzzone|Torria|Torriano|Toscolano|Toss|Trabuchello|Traffiume|Transacqua|Trausella|Travedona|Traversa|Traverse|Trebbiano Nizza|Trebecco|Trecasali|Tredossi|Tremenico|Tremezzina|Tremezzo|Trenno|Trens|Trenta|Trenta Disonzo|Treppo Carnico|Tres|Tresche Conca|Tresigallo|Tresilico|Tretto|Trevano|Trevisago|Tribussa|Trichiana|Trivero|Trobaso|Tuenetto|Tuenno|Tunes|Turago Bordone|Turro Milanese|Ugovizza Valbruna|Uggiate|Umago|Unchio|Urio|Ussolo|Ustie|Vaglierano|Vagna|Valas|Vico Canavese|Valchiusella|Valda|Valdarsa|Valgiovo|Valdigna Daosta|Vallalta|Vallarga|Valle Distria|Valle Mosso|Vallelunga|Vallenoncello|Valles|Valle San Felice|Valle San Silvestro|Valle Superiore Mosso|Vallonara|Valloria Marittima|Valmaggia|Valmala|Val Marchirolo|Valprato|Valrovina|Valsaviore|Valsecca|Valstagna|Valtesse|Valvasone|Valverde|Vandoies Di Sopra|Vandoies Di Sotto|Vanga|Vararo|Varengo|Vargo|Varoni|Vas|Vasio|Vassena|Vattaro|Veccana|Veddasca|Velate|Vellano|Vellego|Vello|Venegono|Verderio|Verderio Inferiore|Verderio Superiore|Verdesina|Verezzi|Villa Vergano|Vergano Novarese|Vergemoli|Vergobbio|Vermezzo|Verna|Verpogliano|Verrua Siccomario|Versa|Versciaco|Vertemate|Verteneglio|Vertoiba In Campi Santi|Vertovino|Veruno|Vervo|Vestreno|Vezzano|Vezzano|Vezzi|Vezzo|Vho|Viarago|Viceno|Viconago|Vidolasco|Vigalzano|Viganella|Vigatto|Vigentino|Viggiona|Vignola|Vigo Danaunia|Vigo Di Fassa|Vigolo Baselga|Vigolo Vattaro|Vigo Rendena|Villa Agnedo|Villa Banale|Villabassa Di Senosecchia|Villa Dadige|Villa Castelnuovo|Villa Cogozzo|Villa Corsione|Villa Dallegno|Villa Decani|Villa Del Nevoso|Villa Ottone|Villaguardia|Villalbese|Villanovetta|Villa Rendena|Villa Romano|Villa Santa Caterina|Villa Slavina|Villatalla|Villaviani|Villa Vicentina|Villa Volturno|Villazzano|Ville Del Monte|Ville Montevecchio|Ville San Pietro|Ville San Sebastiano|Villongo San Filastro|Villongo Santalessandro|Vilminore|Vimogno|Vintebbio|Vion|Vipacco|Virle Treponti|Visignano Distria|Visinada|Visino|Viticuso Ed Acquafondata|Vittadone|Vizze|Vocogno E Prestinone|Voissizza Di Comeno|Voldomino|Volosca Abbazia|Voltore|Voltri|Volzana|Voschia|Zambana|Zappello|Zara|Zavattarello Valverde|Zelarino|Zelbio Veleso|Zelo Surrigone|Zeppara|Zibello|Zivido|Zolla|Zorlesco|Zornasco|Zorzino|Zoverallo|Zuclo|Zuri|Valsantamarina|Boville|Mosso|Alme Con Villa|Rasun Valdaora\",\n            \"provinceOrCountry\": \"COTOFUVAPTBZMCBSLECOMINONOVCNOTNGOGOCSCOCECNCOBGTSBZCOCONOPLTOBZALCNTNBSBGBGNOTNTNCNVCBSGOBZPLNONOGEFUMSNOVCVACOVAVAPVCEAQCANONOVABSTNTNVAPLNOPNIMCOCEPUTSTSNOGOBSVRTOCOMIVTALBOPIAQCOTOTOCOCOVAMITNPLVIFIPUBSCOTOSVSVBGMINABGCOVACRVATNPVPVGOMEGEBOTOCOAVROVRBSFUGOCOFECNTNTNFUIMNOVRTNTNVANOSVMNGOGOCOCRCOALFUVATNTNROVAPRVAGEPLNONOVATNTNNOBSGEBGTNBGTOBGIMTNSVMNMNBSBOIMBGGOVCBSVAROTNGEVAIMTNPVBSBSROTOTOTNBGPVGOCOCOTNVCBGBGVABGVRVRGOGOCOCNALTNPLNOVANOSVFIBSBGALTOCOTSGOCOCONOPLCOVEBZREROIMTONOBSTSCRNOVAVACRPVVRBSTNVAROCOCOMIBSTNGOBGBSNOBGMEBNTOLOAQVCBSPCBZCOCOCNVANOBITOTNSVUDVIUDPVSOGOIMPSGEPVTNPLBARCCRCRMICOCOSAPLVAGOBSBGTSVAIMCOBAMNCOTNBSVANOCOCOALNORCCOGOBGVACRIMPVNOPDPDIMCOBSCECRNOCRMNCOCOTNCOCOCOCOCSVICOCOALCOCRTNBZVTANBZALGOARFUPVTETNCNPVBLVCCNPVVCNOCOCOTNBOCBLTPZFUCRSAALIMALALCONOVRBSRCRCBZLONOVBCONOTSCOBZVAGOBAFUTNVAPVTNVCTNBGBGSVBZIMTNBGBGMIGOCOBIVAVCBLCOPGTOBSBZAOTOPLTONAAVGOMIVCTNNOVETNTNBZBSBSCONOBSTNMIGONOUDVIBZPLCOCOBSCOBSFUBSBZGOVATNTNNONOPUATCOBZIMBZREUDBZPGPGBZCOTNTNBGBSTOBZPVTNTNGOBSBSNOROTNCOVITNIMCOCOROCONOTNCOTSCSPVGEGOBZVRCOBGBZBSPVALBSPRBZBZGOTSVAVCBSIMTNTNNONOGOCRBSCOMITSMITVBOPICOTNCOVCCOVCROBIVINOALTNALBZBGBGNOVBPTNONOTNTNTNTNCOBSTNTNTNGOBGTOBGIMIMPLTNNOTSTSVCGOGOGOCATNROPVCACATNCOPLCOGOCOCRTOCRTSALTSLTBZSVFUBGBGTNBZCOBSPLGOCACOCONOBGVACOLUTOMITNCHVBTSBSBLVETNBSBZTOUDMNTOTOCEPLTNCOFICAGEGEGENOMCPSTNFOFUBGUDTNVCBZGEBZNONOBGFUVCTOFENOVINOTNTOBLALCRPVNOALALTOTNBGCEBSPSBGBZUDCRGOGOCRCOCNSARCRCFIVATNMIGONOTOALVAIMPVCOCOBSBGNOCTPLPSGOCOLUGOBSBSPVPRGOMIVACNBSCOGOGONOBOVICOTNCOMIAOBZBGROBZPLCSCOALVTBGBGTNTNCSBZMEVARCTNGOGOGOCOCOFICOCONOLCTONONOBSUDUDNUTNMICOPLNOVCTNMIBZUDTVZACSMIPLMECOCOBZTNPITSTNARBZFUVAIMBZALGOTNCOCOVATNTNNOBIMEBSCOGONASACOREUDCOMIIMCOVATNVABSTNBGMEVCBGGOGOTNTNCOTNTNBSBLBZBGPIGOBACNBSCOTNVAALMIUDCOBSTORIGOBSBSBSTNCEVIPLPLBZNOVAVACOBSTNTNCOBSNOTNBZVIBZBZUDTSTNBZCNALTOBZTNTNLTBZVRTNTOPLBZTNBGALIMSVMITNVAVIFECAROSISITNTNFUFUBZMIBGBSTOTNTNGOPDBLTOSOIMTONOGOVETNTOVAPRTNCOTNNOFEFEMIBZTOBSCOTNFEPVVRIMTOTNCOGECOTNBGBZALTNTOALIMIMVIVATOVACNTNCOALTOBZTNSIIMALCOBZBZBZPTRMBZALRNPLBZVAPUGONOBZANTNBZPGGORNANPEGOTOGOBOVAATPLVRAVAVNOBAPVVCAPVCVAFOTNBZPCFUVIBINOBSVABZMNVETOVAUDPEVAMITSTNCOTNBSBZVRPLGEBGRMPCCZBSMITNNOTNTNTNBZVITOCOPSBSSSCASVCONOCOVATOIMBGTNGOBGVACRIMBZCOBSGONOPUMIBGBSCOVABZPLNORCBGGOGOPLCRCOTNBSCRTVAQCNBSCOTONOCRGOTNIMPGCOPLVRVCCOUDALANTNAPALTOPCCSTOTNGERCVECOCOLCARCNTNCRBSUDBSCOBSCRPUSAIMVCBSARVCBGIMCOTNNATVCOTOBGBGPGUDPVMNMCBLCRTNTNRETNBSPLVAPRALPLCANACZPLPVBIPTPVBZGOBZGOGOGORCGOIMRNRIPLCRPRPVBSBSCOUDGEBGNACOTNBSMIMCPLIMBSBGTSTSTNTNPSGEBSTNTNBZBZARARTNMITNTNNOTNTNBSLETNBSAQGOTNTOCNFUALTNTNBSBSBSVRBLCOAVBINOALMIGEMNBLTNVRGEBSVRBIUDRCBSTNSRBZROCOCOCOGOSVTNBZBZFUCOTNCOBGBSBSMIMIBZMNTNTOCOAOTOBZGOBGVCVCBZALLILIBZCRANVCBZGEIMTOBGUDBSFEVCPEBGFRVTTOTOSVUDBSTSVAAQTNCOGOTNTNTNCOGOTNRCBGALANCSBGBGBGLCVANOCOTNFOBGPLPLCRMIPVNOVAVCBGCOGOVAGOPVFUBSCOALGOTONOPDRCMEGOPUTOROGOGORCCZCNNOTNRCNOCRGOCOBSBZGEBGVIBGBZTNTSTOBZPUBZCONAGESICTPGVCRCIMPCPRBZCETNCRBZPTVTTOBZBGCRBZGOATALVRALCNVTVRTSVIMIPRCAALBITSGERCFIBZGONATSTVCNBGAVPVGEBZCHCOGOBSNOAVSVFEPVPIGOBZPDPVTNCRVACOMIVRNOCOVAUDFRBZPUBGPCROCOCZBSGENOBLBGGOBGMEBZBZCABSPLCBCRTRGOTNTNIMCOAQIMTNPUBOTOBZCNATCRBGBGCOCNFIBSBZPSTNGOVANOUDTSRNGOGONAGOCOSVTNTNBGGOBGBITSTNVBCOCAGOCSALTNPUTNTSALGETNBGCACACAPLLUCRTSTNCAPRCABSGOBZTSTNFUNACACOALTOBGCOCOBGGOTNBIBSBSFOPRPSALNOMEMETNCSCSBZBGBGNOBGPVBZCOARBZTSTNTOTNTNNOGETNGONOTNBZALBGTNBZNOUDNOBZUDGOBZTNFIAVTNIMTNCOBZGOCNBZFOUDTNTNTNGOFUPVCSMITNBSBZTOTNTNTNBSTOBZGOTSTNVABSTNPVIMPVPVPVALPGCNIMPVBSTNBGNOTNTOVACOTOPVPCPRCRLCCOCOMIBZCSGOUDTNVIFERCVICOVAGOBLBINOTNTNBZPVMIUDCOPLNOCOCNGOALNOBZTOTOTNPLBZAOBGBZPLBIBZUDBZTNBZVCVIIMVCCNVATOVIBSBGVIBGPNPVBZBZBZVAALALBNBLTNCOTNVAVAVAPTSVBSVACOLCLCTNSVCONOLUVAMICOGOPVGOBZCOPLGOGONOTNLCBZTNGENOCRTNNOVACRTNVBPRMINOTNTNTNTNTNTNTNTNTSROTOBSATBSPLFUBZIMCOCNTNCOBZTSIMIMUDCETNTNGOIMIMBGBGBGCOVCTNGOBSPLPLCOFRMIBZNOGOVAFUVAGEGOGOTNCRZAPVVECOMICAPRMIGOMINOBGNOTNCAFURMBIBGBZ\"\n        },\n        {\n            \"belfioreCode\": \"00100400500600700800a00d00e00f00g00h00i00j00k00m00n00o00p00q00r00s00t01001101201301601701801901b01c01d01f01g01h01i01j01k01l01m01n01o01p01q01r01s01t01u02002102302402502602702802a02b02c02d02g02h02i02j02k02l02n02o02p02r02s02t02u03003103203403503603703903a03b03c03d03e03f03g03h03j03k03l03m03n03o03p03q03r03s03t03u03v04004104204304404604704904a04b04f04h04i04l04m04p04q04r04t04u04v05005105205305405505605705b05c05d05f05g05h05i05j05k05l05m05n05o05p05q05r05s05t05v06006106206306406506606806906a06b06c06d06e06f06g06i06m06n06o06p06q06s06t06u06v07007107207307407507607707907a07b07c07d07e07f07g07h07i07j07k07l07m07p07r07s07t07u07v08008108208308508608708808908a08b08c08d08e08f08g08h08i08j08m08o08p08q08r08s08t08u08v09009209309409509609709809909b09c09d09e09f09g09h09i09k09l09m09o09p09q09r09t09u09v0a00a10a30a40a50a60a70a80a90aa0ac0ad0ae0af0ah0ai0aj0ak0al0an0ao0ap0aq0ar0as0au0av0b00b20b30b50b60b70b80bb0bd0be0bf0bg0bh0bi0bj0bk0bl0bm0bn0bo0bp0br0bs0bu0bv0c10c20c30c40c50c60c70c80c90ca0cc0cd0ce0cf0cg0ch0ci0cj0cl0cn0cp0cs0ct0cu0cv0d20d30d50d60d80d90db0dd0de0df0dg0dh0di0dj0dk0dl0dm0dn0do0dp0dr0ds0dt0du0dv0e00e10e30e40e50e60e70ea0eb0ec0ed0ee0ef0eg0eh0ei0ej0ek0em0en0eo0ep0eq0er0es0et0eu0ev0f00f10f20f40f50f60f70f80f90fa0fb0fc0fe0ff0fg0fh0fj0fl0fm0fn0fq0fr0fs0ft0fv0g00g20g30g40g50g60g70g80g90ga0gb0gd0ge0gf0gg0gh0gi0gj0gk0gl0gm0gn0go0gp0gq0gr0gs0gt0gu0h00h20h30h60h70h80h90hb0hd0hg0hh0hi0hk0hl0hm0hn0ho0hp0hq0hr0hs0ht0hu0hv0i00i10i20i30i40i50i80ia0ib0ic0id0ie0if0ig0ih0ii0il0in0io0ip0ir0is0it0iu0iv0j10j20j40j50j60j70j80j90ja0jb0jd0jh0ji0jk0jl0jm0jn0jo0jq0jr0jt0ju0k00k30k50k60k70ka0kb0kc0kd0kf0kg0kh0ki0kk0kl0km0kn0ko0kp0kq0kr0ks0kt0ku0kv0l10l20l40l50l60l90lb0lc0le0lf0lh0li0lj0lk0lm0lo0lp0lq0lr0ls0lt0lu0lv0m00m10m20m30m40m50m60m80m90ma0mc0md0me0mf0mg0mh0mi0ml0mo0mp0mq0mr0ms0mt0mu0mv0n00n10n20n30n40n50n60n70n90na0nb0nd0ne0nf0ng0nj0nk0nl0nn0no0np0nq0nr0ns0nt0nu0o00o10o20o30o40o50o60o80o90oa0ob0oc0od0oe0of0og0oh0oi0oj0ok0ol0on0oo0op0oq0or0os0ou0ov0p10p20p40p50p90pa0pb0pc0pd0pf0pg0ph0pi0pj0pk0pl0pn0pp0pq0pr0pv0q00q20q30q40q50q90qa0qb0qc0qd0qe0qf0qg0qh0qi0qj0qk0ql0qm0qn0qo0qp0qr0qt0qv0r00r60r80ra0rc0rd0re0rg0rh0ri0rj0rk0rl0rn0rp0rr0rs0rt0ru0rv0s00s10s20s60s70s80s90sa0sd0se0sf0sg0si0sk0sm0sn0so0sq0st0t10t20t30t40t90tc0td0te0tg0th0ti0tj0tk0tl0tm0to0tp0tq0tr0ts0tt0tu0tv0u00u10u20u30u40u50u80ua0ub0uc0ud0uf0ug0uh0ui0uj0ul0um0un0uo0uq0ur0us0ut0uu0uv0v00v10v30v40v60v70v90va0vb0vd0ve0vf0vg0vh0vi0vk0vm0vn0vo0vp0vq0vr0vs0vt10010110210410510610710910a10b10c10d10e10g10h10i10j10k10m10o10p10r10u10v11011111211511611711811b11c11d11e11f11h11j11k11l11n11o11p11q11r11s11t11u12012312612912a12b12c12d12e12g12h12i12j12l12m12n12o12q12r12s12t12u13013113313413613813913b13c13e13h13i13l13m13n13o13p13t13u14014114214414514614714814914a14d14e14f14h14j14k14l14n14o14q14r14s14t14u14v15015315415715815915a15b15c15d15e15g15h15i15j15k15l15n15p15s15t15u15v16016116216316416516716916b16c16d16e16g16i16j16k16l16m16n16o16q16r16u16v17017117217317717817a17b17d17e17g17h17i17j17k17l17m17o17q17r17s17u17v18018118218418518618718818918c18d18e18f18g18h18k18l18m18n18o18p18q18t18u18v19019119219319519719e19g19k19n1a11a21a51a61a71a81aa1ab1ad1ae1ag1ah1ai1ak1al1am1an1ao1ap1ar1au1av1b01b11b21b31b41b51b61b71b81b91bb1bc1bd1be1bf1bg1bh1bi1bj1bk1bl1bm1bn1bo1bq1br1bs1bt1bu1c01c11c21c51c71c81c91ca1cb1cf1cg1ch1ci1cj1ck1cl1cm1cn1co1cp1cq1cr1cs1ct1cv1d01d11d21d31d41d51d61d71d81da1dc1dd1df1dh1dk1dl1dm1dn1dp1dq1dr1ds1dt1du1dv1e01e11e21e41e51e91ea1eb1ec1ed1ee1ei1ej1ek1el1em1eo1ep1eq1er1es1et1eu1f01f11f21f31f51f61f71f81f91fa1fb1fc1ff1fg1fh1fi1fk1fl1fm1fn1fo1fp1fq1fr1fs1ft1fu1fv1g01g11g21g31g41g51g61g71g81ga1gd1ge1gf1gh1gi1gj1gk1gl1gn1gp1gq1gr1gs1gt1gu1gv1h11h21h41h51h61h81h91ha1hb1hc1hd1he1hg1hi1hj1hk1hl1hm1hn1ho1hp1hq1hr1ht1hu1i21i31i41i51i61i71i81i91ia1ic1id1if1ig1ih1ii1ij1ik1il1io1iq1ir1is1it1iu1iv1j01j11j21j31j41j51j71j81j91ja1jb1jc1jd1je1jf1jg1jh1ji1jj1jl1jn1jo1jq1js1jt1ju1jv1k01k21k31k51k61k71k81ka1kb1kc1kd1ke1kf1kg1kh1ki1kk1kl1km1kn1ko1kp1kq1kr1ks1kt1ku1kv1l01l11l21l51l71l81l91la1lb1lc1ld1le1lf1lg1lj1lk1ll1lm1ln1lo1lq1lr1ls1lt1lu1lv1m11m21m31m41m51m61m71m81ma1mc1md1me1mf1mg1mh1mk1ml1mo1mq1mr1ms1mu1mv1n01n21n31n51n61n71n81n91nb1nc1ne1ng1nh1ni1nj1nk1nl1nm1nn1no1np1nr1ns1nt1nu1nv1o01o21o31o41o61o71o91oa1ob1oc1od1of1og1oh1oi1ok1ol1oo1op1oq1or1os1ou1ov1p01p11p21p31p41p51p61p81pb1pc1pe1pf1pg1ph1pi1pk1pl1pm1pn1po1pq1pr1pt1pu1q01q11q21q31q41q51q61q81q91qa1qb1qc1qd1qe1qf1qg1qh1qj1qk1ql1qm1qn1qo1qp1qq1qr1qt1qu1qv1r01r11r21r31r41r51r61r71r81r91ra1rb1rc1rd1re1rf1rg1rh1ri1rj1rm1rn1ro1rq1rr1rs1rt1ru1rv1s01s11s21s31s41s51s71s81s91sc1sd1se1sf1sg1sh1si1sj1sk1sl1sn1sp1sq1sr1ss1st1su1t01t11t21t31t41t61t71t81t91ta1tb1td1te1tf1tg1th1tj1tm1tp1tq1tr1ts1tu1u01u11u31u41u51u61u71u91ua1uc1ud1ue1uf1ui1uj1uk1um1un1ut1uu1v41v61v81vb1ve1vh1vi1vl1vm1vo1vp1vs1vt1vu1vv20020120220320420520720820920a20b20c20e20f20g20h20i20j20l20m20o20p20q20r20s20u20v21021121221321521621921a21b21d21e21g21h21i21k21l21m21n21o21p21q21r21s21u21v22122222322422522622722822922a22b22d22e22f22g22h22i22l22m22n22o22p22r22t22u22v23123323423523823923a23b23c23d23e23g23h23i23l23m23n23p23s23t23u23v24024124224524724824924a24b24c24d24e24i24j24l24m24n24o24p24q24r24s24t24u24v25025125225325525625725825925a25b25c25e25f25g25h25i25j25k25l25m25n25o25r25s25t26026126226326426526626726826a26b26c26d26e26f26j26l26m26n26p26q26r26s26t26u26v27027127227327427627727827a27b27c27d27e27f27g27h27i27j27k27l27m27o27p27q27s27t27u27v28028228328428528628728828928a28b28c28d28e28f28h28i28j28k28l28n28p28q28r28s28u28v29029129229329429529629729829929a29b29c29d29f29g29h29i29k29l29n29o29p29r29s29t2a12a22a42a72a82a92aa2ac2ad2ae2af2ag2ah2aj2ak2al2am2ao2ap2aq2ar2as2au2b02b42b52b62b72b82b92ba2bc2bd2be2bf2bh2bi2bk2bl2bm2bo2bq2bs2bt2bu2c02c32c42c52c62c72c82c92ca2cb2cc2ce2cf2cg2ch2cl2co2cp2cq2cr2ct2cv2d22d52d62d72d82da2dc2de2df2dg2dh2di2dj2dk2dl2dm2dn2do2dp2ds2dt2du2dv2e02e12e22e42e52e62e72e82e92ea2eb2ec2ed2ee2ef2eg2eh2ei2ej2ek2el2em2eo2ep2er2es2et2ev2f02f12f22f32f42f52f62f82f92fa2fb2fc2fd2fe2ff2fg2fh2fj2fk2fl2fm2fn2fo2fp2fq2fr2fs2ft2fu2fv2g02g12g32g42g52g62g72g82g92gd2ge2gg2gh2gi2gk2gl2gm2gn2go2gp2gr2gs2gt2gv2h12h22h32h42h62h72h82hc2hd2he2hg2hh2hi2hk2hl2hm2hn2ho2hq2hr2hs2ht2hv2i02i12i32i42i52i62i72i82i92ia2ib2id2ie2if2ig2ih2io2ip2iq2ir2is2it2iu2iv2j02j12j22j32j42j52j62j72j92jc2jd2je2jg2jh2ji2jj2jk2jl2jm2jn2jo2jp2js2jt2ju2k12k32k72k82k92ka2kb2kc2kd2ke2kf2kg2kh2kj2kk2kl2km2kn2ko2kp2kq2kr2ks2kt2ku2kv2l22l32l42l52l62l72l82l92la2lc2ld2lf2li2lj2lk2ll2lm2ln2lo2lp2lq2lr2lt2lu2lv2m02m32m42m52m62m72m82mb2mc2md2me2mf2mg2mh2mi2mj2mk2ml2mm2mo2mp2mq2mr2ms2mt2mu2mv2n02n12n32n52n62n72n82n92na2nb2nc2nd2ng2nh2nj2nk2nm2nn2nq2nr2ns2nt2nu2nv2o02o12o22o32o42o52o72o82oa2od2oj2ok2om2on2op2os2ot2ou2ov2p02p22p32p42p52p62p72p82p92pa2pb2pc2pe2pg2ph2pi2pj2pk2pl2pm2pn2po2pr2ps2pt2pu2pv2q02q22q32q42q52q62q82qa2qd2qe2qf2qh2qk2ql2qm2qn2qo2qp2qs2qu2qv2r02r22r52r62r72r82ra2rd2re2rf2rg2rh2ri2rj2rl2rm2rn2ro2rp2rq2rr2rs2rt2rv2s22s42s62s72s82sa2sb2sc2sd2se2sf2sg2si2sj2sk2so2sp2sr2ss2st2su2sv2t02t12t22t32t42t62t72t82ta2tb2tc2te2tf2tg2th2tj2tk2tm2tn2tr2ts2tu2tv2u02u12u22u32u42u52u62u72u82ua2ub2uc2ud2ue2ug2ui2uj2uk2ul2um2up2ut2uu2v02v12v22v32v42v52v62v82v92va2vb2vc2ve2vg2vh2vi2vl2vm2vo2vp2vq2vs30030330430530630730930a30d30e30f30g30h30k30l30m30n30o30r30s30t30u30v31131331431531631731831931a31d31e31f31g31h31i31j31k31m31n31o31r31s31t31u32032132332532632732832932b32d32e32f32i32k32n32p32q32t32u33033233333433733933b33c33d33g33h33i33j33k33l33o33p33r33s33t33u33v34034134234334434534734834934a34b34e34g34h34i34j34l34m34n34q34r34s34t34u34v35035135235435535635735b35c35d35e35f35j35l35n35o35p35q35r35s35t36036136236336436536636736836936d36e36f36g36h36k36m36n36p36q36r36s36t37037137237337437737837937d37e37f37g37i37j37k37l37m37n37p37r37s37t37v38038138238338438538638a38b38d38g38h38i38j38k38m38n38o38r38s38t38u39039139439539639739b39c39d39e39g39h39j39k39n39o39p39q39s39u39v3a03a23a33a63a73a93aa3ab3ae3af3ag3ai3aj3ak3am3an3ao3ar3as3at3au3av3b03b23b43b53b63b73b93ba3bc3bg3bh3bi3bj3bk3bl3bn3bq3br3bs3bt3bu3bv3c03c13c23c33c53c63c73c83c93cb3cc3cd3ce3cf3cg3ch3ci3cj3ck3cl3co3cq3cr3cs3cu3cv3d03d13d23d33d43d53d63d73d83d93db3dd3de3df3dg3dh3dk3dl3dm3dn3do3dp3dq3du3e03e23e33e43e63e73e83ea3eb3ec3eh3ei3ej3ek3el3em3en3eo3ep3eq3er3es3et3eu3ev3f03f13f23f33f53f73f83f93fa3fc3fd3fe3ff3fg3fh3fi3fj3fl3fm3fn3fo3fp3fq3fr3fu3g13g23g33g43g53g63g73g83g93ga3gb3gc3gd3gf3gg3gk3gl3gm3gn3go3gr3gs3gt3gu3gv3h13h33h53h63h73h83hc3hd3he3hi3hj3hk3hl3hm3hn3ho3hp3hr3hs3ht3hu3i13i23i33i43i53i63i73i83ic3id3ie3if3ih3ii3ij3ik3im3in3io3ip3iq3ir3is3it3iu3iv3j03j13j23j33j43j53j63j83j93ja3jb3jd3je3jf3jg3jh3jk3jl3jm3jn3jo3jp3jq3jr3js3jt3ju3jv3k03k23k33k53k63k73k83kd3kf3kg3ki3kj3kk3kl3km3kn3ko3kp3kq3ks3kt3ku3l03l13l23l43l53l63l73l83la3lb3lc3ld3le3lf3lg3lh3li3lj3lk3ll3lm3ln3lo3lp3lq3lr3lt3lu3lv3m03m13m43m53m63m73m83m93ma3mb3mc3md3me3mf3mh3mi3mk3ml3mm3mn3mp3mq3mr3ms3mt3mv3n03n23n33n43n53n63n73n93na3nb3nd3nf3ng3nh3ni3nj3nk3nl3nm3no3nq3nr3ns3nv3o13o23o33o43o53o73o83o93oa3ob3oc3od3oe3of3og3oi3oj3ok3ol3om3on3oo3op3or3os3ot3ou3ov3p03p13p23p33p43p63p73p93pa3pb3pc3pd3pe3pg3ph3pi3pj3pk3pm3pn3po3pp3pq3pr3pt3pu3pv3q13q23q33q53q63q73q83q93qb3qd3qe3qg3qh3qj3qk3ql3qm3qn3qo3qq3qr3qs3qt3qu3qv3r23r43r63r73r83r93ra3rb3rc3rd3rf3rg3rk3rl3rm3rn3ro3rp3rq3rr3rs3rt3ru3rv3s03s13s23s33s43s63s73s83s93sa3sc3sd3se3sf3sg3sj3sk3sm3sp3sq3sr3ss3st3su3sv3t13t33t43t63t73t83t93ta3tb3tc3td3te3tf3tg3th3tj3tk3tl3tm3tn3to3tp3tq3tr3ts3tt3tu3tv3u13u23u43u53u63u73u83u93ub3uc3ud3uf3ug3uh3ui3uk3ul3um3un3uo3up3uq3us3ut3uu3uv3v03v13v23v33v43v53v63v73v83va3ve3vf3vh3vi3vj3vk3vl3vm3vn3vo3vp3vq3vr3vs3vt3vu40040240440540640740840a40b40d40f40h40i40j40k40m40o40q40s40t40u40v41041241341441541641841b41d41e41f41g41h41i41j41k41l41o41p41q41r41s41u41v42042142342442542742842942a42b42c42d42h42i42j42k42m42o42p42r42s42t42v43043143343443743843943a43b43c43d43e43f43g43h43i43k43l43m43n43o43p43r43t43v44044244344444544644844944a44b44c44d44e44f44g44h44i44j44k44l44m44o44p44q44r44s44t44v45045245345545745845945a45d45e45f45g45h45i45o45p45q45r45s45t45v46046146246346446746946b46d46g46h46i46j46l46m46n46p46q46t47047147347547647747847947a47c47d47e47f47g47h47i47j47k47l47m47n47p47q47s47t47u47v48148248448648848b48c48d48e48f48g48h48i48j48k48l48m48n48o48p48r48s48t48u49249349449549649749849949a49b49c49d49e49g49h49i49j49l49m49n49p49q49s49t49u49v4a04a14a34a44a54a64a74a84a94aa4ac4ad4ae4af4ag4ah4ai4aj4ak4al4am4an4ap4ar4at4av4b04b24b34b64b84b94ba4bb4be4bf4bg4bh4bi4bj4bl4bm4bn4bo4bp4bq4br4bs4bv4c04c14c24c34c44c54c64c74c84c94ca4cb4cc4cd4ce4cg4ch4ci4ck4cm4co4cp4cq4cr4ct4cu4d04d24d34d54d64d74d84da4db4dc4de4df4dg4di4dj4dk4dn4do4dp4dq4dr4ds4dt4du4dv4e04e24e34e44e54e64e74e94ea4eb4ed4ee4ef4eg4ei4ej4ek4el4em4ep4eq4er4et4eu4f04f24f54f74f84fb4fc4fd4fe4ff4fg4fh4fi4fk4fl4fn4fo4fq4ft4fu4fv4g04g24g34g54g74g94ga4gc4gd4ge4gf4gg4gh4gi4gj4gl4gm4go4gp4gr4gu4gv4h04h44h54h64h74h84h94hb4hc4he4hf4hg4hj4hk4hl4hm4ho4hp4hq4hs4ht4hv4i14i24i34i54i64i74i84i94ia4ib4ic4id4if4ih4ii4ij4ik4il4im4in4iq4is4j04j14j24j34j44j54j74j94ja4jb4jc4je4jf4ji4jj4jk4jm4jp4jq4jr4ju4jv4k04k14k24k64k74k94ka4kb4kc4kd4ke4kf4kg4kh4ki4kl4km4kn4ko4kp4kr4ks4kv4l14l24l44l54l94la4lb4lc4le4lf4lg4lh4li4lj4lk4ll4lm4ln4lp4lq4lr4lu4lv4m04m14m34m44m54m64m74m84m94ma4mb4mc4md4me4mf4mg4mh4mi4mj4mk4ml4mp4mt4mu4n14n24n34n44n54n64n74n84n94na4nb4nc4nf4ng4ni4nj4nk4nl4nm4nn4no4nq4nr4ns4nu4nv4o04o14o24o44o54o64o84o94oa4ob4oc4od4oe4of4og4oi4oj4ok4ol4on4oo4op4or4os4ot4ou4p04p14p34p44p54p64p74p84p94pa4pb4pc4pe4pf4pg4pi4pj4pl4pn4pp4pq4pr4ps4pt4pv4q04q14q24q34q44q54q64q84qa4qb4qc4qd4qg4qh4qi4qj4ql4qn4qo4qp4qq4qr4qs4qt4qu4qv4r04r14r24r34r54r74r84ra4rb4rc4rd4re4rf4rg4rh4ri4rj4rk4rl4rm4rn4ro4rq4rr4rs4rt4ru4rv4s04s14s24s34s54s64s74s94sa4sb4sc4sd4se4sf4sh4si4sj4sk4sl4sn4so4sp4ss4st4su4sv4t04t14t34t44t54t64t84t94tb4td4th4ti4tj4tk4tl4tm4tn4to4tq4tr4ts4tt4tu4tv4u24u34u54u74u84u94ua4ub4uc4ue4uh4ui4um4uo4up4uq4ur4us4ut4uu4uv4v04v14v44v54v74v84v94va4vc4vd4ve4vg4vh4vi4vj4vk4vl4vm4vn4vo4vp4vq4vr4vs4vt4vu4vv50050250350550650750a50b50c50d50e50f50g50h50i50j50k50l50o50p50q50r50s50t50v51051151251351451551651951a51d51f51g51i51j51k51l51n51o51u51v52052252352452552652752852952a52c52g52h52i52j52l52m52n52o52p52q52t52u53053153253353453553753853953a53d53e53f53g53h53m53n53o53p53q53r53s53u53v54054154254354654854954a54b54c54d54e54f54h54i54j54k54l54m54n54o54q54r54s54t54u54v55055155355455755855a55d55e55f55h55j55l55o55p55r55s55t55u55v56056156356456556656756856a56b56c56d56e56f56g56h56i56k56l56n56o56p56q56s56u56v57257357457757857a57b57c57d57e57f57g57h57j57k57l57n57o57p57q57r57s57t57u57v58058158258358458558658758858958a58b58e58f58g58h58i58j58l58m58n58o58p58r58s58t58v59059159259359659759859959b59c59e59f59g59i59j59k59l59m59o59p59q59t5a05a15a25a35a55a65a85a95aa5ac5ad5ae5af5ag5ah5ai5ak5al5am5an5ao5ap5ar5as5at5av5b15b25b35b55b65b75b85b95ba5bb5bc5be5bf5bg5bh5bj5bk5bl5bm5bn5bo5bp5bq5br5bs5bt5bu5bv5c05c25c35c45c55c65c75c85c95ca5cb5cc5cd5ce5cf5cg5ci5cj5ck5cm5cn5co5cp5cr5cs5ct5cu5cv5d05d15d25d45d55d65d75d85d95da5db5dc5dd5de5df5dg5dh5dk5dl5dm5dn5do5dp5dq5dr5ds5dt5du5dv5e05e15e25e45e55e65e85ea5eb5ec5ed5ee5eh5ei5ej5el5em5en5eo5eq5er5es5et5eu5ev5f05f15f35f45f55f65f75f85f95fa5fb5fc5fe5fg5fi5fj5fk5fl5fm5fn5fp5fq5fr5fs5ft5fv5g05g25g45g55g65g75g85ga5gc5ge5gg5gj5gl5gm5gn5go5gp5gs5gt5gu5h05h15h25h35h45h55h65h75h85ha5hb5hc5hd5hf5hg5hh5hi5hl5hm5hn5ho5hp5hq5hs5i05i15i25i55i75i85i95ia5ib5ic5id5ie5if5ig5ih5ij5ik5il5im5io5ip5iq5ir5is5it5iu5iv5j05j15j25j35j45j55j65j75j85j95ja5jb5jc5jf5jg5jh5ji5jj5jk5jl5jm5jn5jq5js5ju5k05k15k25k45k55k65k75ka5kb5kc5kd5ke5kf5kg5kh5kj5kk5kl5kn5ko5kp5kq5ks5kt5kv5l15l35l55l65l75l95la5le5lg5lh5li5lj5ll5lm5ln5lo5lp5lq5ls5lu5m25m45m55m65m75m85m95mb5mc5me5mf5mg5mh5mi5mj5mk5ml5mm5mn5mo5mp5mr5ms5n05n15n25n35n55n65n75n85n95na5nb5nc5ne5nf5ng5ni5nk5nl5nm5no5np5nq5nr5ns5nu5nv5o15o25o35o45o55o65o75oa5ob5oc5od5oe5og5oi5oj5ok5om5on5oo5op5oq5or5os5ot5ou5p05p15p25p35p45p55p65p75p95pa5pb5pc5pd5pe5pf5ph5pj5pl5pm5pn5po5pr5ps5pt5pu5pv5q05q35q45q55q65q85q95qa5qb5qc5qd5qe5qf5qg5qi5qk5qm5qn5qo5qp5qq5qr5qs5qt5qu5qv5r15r25r35r45r55r65r75r85r95ra5rb5rc5rd5re5rf5rh5ri5rj5rk5rl5rm5rn5ro5rp5rq5rr5rs5rv5s05s25s35s45s55s65s75s95sa5sc5se5sf5sg5si5sk5sl5sn5so5sp5sq5sr5ss5st5su5sv5t05t15t25t65t85ta5td5te5tf5tg5th5ti5tk5tm5tn5tq5tr5ts5tu5tv5u05u15u25u35u45u65u75u85ua5ud5uf5ug5uh5ui5um5un5up5ur5us5ut5uu5uv5v15v25v35v45v55v65v75v85v95va5vb5vc5vd5ve5vg5vh5vi5vj5vl5vm5vn5vo5vp5vr5vs5vt5vu5vv60060160260360460560660760860960a60b60c60d60e60f60g60h60j60k60l60m60n60o60p60q60r60t61261361561761861961a61b61c61d61e61f61g61h61i61j61k61l61m61n61o61p61q61r61s61t61u61v62062162262362462562762962a62c62e62f62g62h62i62j62k62l62m62o62p62q62t62u63063163263363763863963a63b63c63d63e63f63h63i63j63k63l63m63n63o63q63r63s63u63v64064164264364464564664864964a64b64c64d64e64f64g64h64i64j64k64l64m64n64o64p64q64r64s64u64v65065165265365465565765865b65c65d65e65f65g65j65k65l65n65o65q65r65t65u65v66066166266366466666866a66b66c66d66e66g66h66i66m66n66p66q66s66t66v67067267367467667867967a67b67d67e67f67g67h67i67j67k67l67n67o67p67q67r67t67u68268368468668768868a68b68c68f68g68h68i68j68k68l68o68q68s68t68u68v69069169269369469569669769969a69b69c69d69e69f69h69i69k69l69m69n69o69p69q69r69t69u69v6a16a36a56a76aa6ab6ac6ad6ae6af6ag6ah6ai6aj6ak6al6am6an6ao6ap6ar6as6at6au6av6b06b16b26b36b46b66b86b96ba6bb6bc6bd6be6bf6bg6bh6bi6bj6bk6bl6bm6bn6bo6bp6bq6br6bs6bt6bu6c06c16c46c66c76ca6cc6cd6ce6cf6ch6ci6cj6cl6cn6cp6cr6cs6ct6cu6cv6d06d16d46d56d66d86da6db6dc6de6df6dg6dh6dj6dk6dm6dn6dr6ds6dt6du6dv6e06e16e26e46e56e66e86e96ea6eb6ec6ed6ee6ef6eg6eh6ei6ej6ek6el6em6en6eo6eq6er6es6et6eu6ev6f06f16f26f36f46f56f66f76f86fa6fb6fc6ff6fi6fj6fl6fm6fn6fo6fp6fq6fr6ft6g06g16g26g36g46g56g66g76g86g96ga6gd6ge6gf6gg6gh6gi6gk6gm6go6gp6gq6gr6gs6gt6gu6gv6h06h26h36h46h56h66h86h96ha6hb6he6hf6hg6hh6hj6hm6ho6hp6hs6ht6hu6hv6i06i16i26i46i66i76i86i96id6ie6if6ig6ih6ik6il6im6in6iq6ir6it6iv6j06j16j26j46j56j66j86j96ja6jb6jc6jd6je6jf6jg6jh6ji6jj6jk6jl6jm6jn6jo6jp6jr6js6ju6k06k16k26k36k46k56k66k76k86k96ka6kb6kc6kd6ke6kf6kg6kh6ki6kj6kk6kl6km6kn6ko6kp6kr6ks6kt6ku6kv6l06l16l26l46l56l66l76l96la6lb6ld6le6lf6lh6li6lk6ll6lm6ln6lo6lq6lr6ls6lu6lv6m06m16m26m36m46m56m66m76m86ma6mb6mc6md6me6mg6mh6mi6mj6ml6mm6mn6mo6mp6mq6mr6mt6mu6mv6n16n26n66n76n86n96na6nb6ne6nf6nk6nm6nn6no6np6nq6nr6nt6nu6o06o16o26o46o56o76o86o96oa6ob6oc6od6oe6of6oh6oj6ok6ol6om6on6oo6op6or6os6ou6ov6p06p16p36p56p76p96pa6pb6pd6pf6pg6ph6pi6pj6pk6pl6pm6po6pp6pq6ps6pt6pu6pv6q06q16q26q36q46q56q66q96qa6qb6qc6qe6qf6qg6qh6qi6qj6ql6qn6qp6qq6qs6qu6qv6r26r36r56r66r76r96ra6rb6rc6rd6re6ri6rj6rk6rl6rm6rp6rq6rs6rt6ru6s06s26s36s56s66s86sc6sf6sg6sj6sl6sm6sn6ss6st6su6sv6t06t16t26t46t56t66t96tb6td6te6tf6tg6th6ti6tj6tm6tn6to6tp6tq6ts6tt6tu6u06u26u36u46u56u66ua6ud6ue6uf6ug6uh6ui6um6un6uo6up6uq6ur6us6uu6v46v76va6vb6vc6ve6vf6vg6vh6vi6vk6vl6vn6vp6vr6vt6vu70070570670770870970c70e70f70g70h70i70j70k70l70o70q70r70s70u70v71071271371471571671771a71b71c71d71e71g71i71j71k71l71m71n71o71p71r71s71t71u72172372472672872a72b72c72d72e72f72i72l72m72n72o72p72q72r72u72v73073173273373473573673773873973a73b73c73d73g73h73i73k73l73m73n73o73p73t73u74274374474574674774874b74c74f74g74h74i74j74k74n74o74p74r74s74t74u74v75075275375575675775875975a75c75d75e75f75g75i75j75k75m75p75q75r75s75t75v76176276376476576676776976b76c76d76f76g76h76i76j76k76m76n76o76p76q76r76t76u76v77077177277377477677777877977a77b77c77d77e77f77g77h77i77j77k77l77m77o77p77q77s77t77u77v78078178278378478578778878978a78c78d78e78f78g78h78i78j78k78l78m78n78o78p78q78r78s78t78u78v79079279379479579679979a79b79c79e79g79h79i79j79l79m79n79o79p79s79t79u7a07a17a27a37a47a57a67a77a97aa7ac7ad7ae7af7ah7ai7aj7ak7al7an7ao7aq7as7at7au7av7b17b27b37b57b77b87b97bb7bc7bd7be7bf7bg7bh7bi7bj7bk7bl7bm7bo7bq7br7bt7c07c17c27c37c47c67c77c87c97ca7cc7cd7ce7cg7ch7ci7ck7cl7cm7cn7cp7cq7cs7ct7cv7d07d17d47d57d67d77d87d97da7de7df7dh7di7dk7dm7dn7do7dp7dq7ds7du7dv7e27e47e57e67e77e97eb7ec7ed7ee7ef7eg7eh7ei7ej7en7ep7eq7er7es7et7eu7ev7f27f47f67f77f97fa7fb7fd7fe7fh7fi7fl7fm7fn7fo7fp7fq7fr7fs7ft7fu7fv7g17g27g37g47g67g77g87g97ga7gb7gd7ge7gf7gj7gk7gl7gm7gn7go7gq7gr7gs7gu7h07h17h27h37h47h57h77h87hb7hc7hd7he7hf7hh7hi7hj7hk7hl7hm7hn7ho7hq7hr7hv7i07i17i27i57i87i97ia7ib7ic7id7ig7ij7ik7il7im7in7io7ip7iq7ir7is7it7iu7iv7j17j27j37j47j57j67j77j87j97ja7jb7jd7je7jf7jg7jh7ji7jj7jk7jl7jm7jn7jo7jp7jq7jr7js7jt7ju7jv7k07k17k27k37k47k67k77k87ka7kb7kc7kd7ke7kf7kg7kh7ki7kj7kl7kn7kp7kq7kr7ks7ku7kv7l07l17l27l37l47l57l67l77l87la7lb7lc7lf7lg7lh7li7lj7lk7ll7lm7lp7lr7ls7lu7m07m17m37m47m57m67m87m97ma7mb7mc7md7mf7mg7mh7mi7mj7mk7ml7mm7mn7mo7mp7mq7mr7ms7mt7mv7n27n37n67n87n97na7nc7nd7ne7nf7ng7nh7ni7nj7nk7nm7no7np7nq7nr7nt7nv7o07o17o27o37o47o57o67o77o87o97od7of7og7oh7oj7ok7ol7om7on7op7oq7os7ov7p17p27p37p57p67p77p87p97pa7pb7pd7pe7pg7ph7pi7pj7pk7pl7pm7pn7po7pq7ps7pt7pv7q27q37q57q77q87qb7qc7qe7qg7qh7qi7qj7qn7qo7qp7qq7qr7qs7qt7qu7qv7r07r27r37r57r87ra7rd7re7rg7rh7rj7rk7rl7rm7ro7rp7rq7rr7rs7rt7ru7rv7s17s27s77s87s97sc7sf7si7sk7sm7so7sp7sq7ss7st7sv7t07t27t67t77t97tb7tc7td7te7th7ti7tj7tk7tl7tm7tn7to7tp7tq7tr7ts7tt7tu7u07u17u27u37u47u57u77u87u97ua7ub7uc7ue7uf7ug7uh7uj7uk7um7un7uo7up7uq7ur7us7ut7uu7v27v37v47v57v67v87v97va7vb7vc7vd7ve7vf7vg7vh7vi7vj7vl7vm7vn7vo7vp7vr7vs7vt7vu7vv80080180480580680780980a80b80d80e80f80g80i80l80m80n80o80p80r80s80t81081181681881981a81c81d81e81g81i81j81k81n81o81p81r81t81u81v82082282382482582682782882982a82f82h82i82j82k82l82m82n82o82p82q82r82s82u82v83083183283383483583683883a83c83d83e83g83h83i83j83k83l83m83n83o83q83r83s83t83u83v84084184284484684784884984a84c84d84f84g84h84j84l84m84o84q84r84s84u84v85085185285485585785885985a85b85c85d85f85g85i85j85k85l85m85n85o85p85t85u86086486586686786886986a86c86g86h86i86j86k86l86n86o86p86q86r86s86u86v87087187287487587687787887987a87c87d87e87f87g87h87i87j87k87l87m87n87p87q87r87s87t87v88088188388488588688788988c88d88e88f88g88h88i88j88k88l88m88n88o88p88r88s88t88u88v89089289389489589689789989a89c89d89e89g89h89i89j89l89n89o89q89r89u89v8a08a78a88aa8ab8ae8af8ah8ai8aj8ak8al8am8an8ao8ap8aq8ar8as8at8av8b08b18b28b48b58b78b98ba8bb8bc8be8bf8bh8bi8bj8bk8bl8bm8bn8bp8bq8br8bt8c08c18c28c48c58c68c98cc8cd8ce8cf8cg8ch8ci8cj8cl8cm8cn8co8cp8cq8cr8cs8ct8cu8cv8d08d18d28d38d48d58d68d78da8dd8de8dg8dh8di8dj8dk8dl8dm8dn8do8dp8dq8dr8ds8dt8dv8e08e18e28e38e48e58e68e78e88e98eb8ec8ed8ee8ef8eg8eh8ej8ek8el8em8en8eq8er8es8et8ev8f18f48f58f68f78f98fa8fb8fc8fe8ff8fg8fh8fi8fk8fl8fn8fo8fp8fq8fr8fs8ft8fu8fv8g08g18g28g38g58g78g88ga8gb8gc8gd8ge8gg8gh8gj8gk8gl8gm8gn8go8gp8gq8gs8gu8gv8h08h28h38h58h68h78h88h98hb8hc8hd8he8hf8hg8hh8hi8hk8hl8hm8hn8hp8ht8hv8i38i68i78i98ia8ib8ic8id8ie8if8ih8ii8ij8im8in8ip8iq8is8it8iu8iv8j08j18j28j38j48j58j88j98jc8jd8jf8jh8jj8jk8jl8jm8jn8jo8jp8jq8jr8js8jt8ju8jv8k08k68k78k88k98kb8kc8kf8kg8kh8ki8kj8kk8kl8km8kn8ko8kp8kq8ks8kt8ku8kv8l08l18l28l38l48l58l78l88l98la8lb8lc8ld8le8lf8lg8lh8lk8ll8lm8ln8lo8lr8ls8lt8lu8lv8m08m38m58m68m78m88m98ma8mb8mc8md8me8mf8mg8mi8mk8ml8mn8mp8mq8mr8ms8mt8mu8mv8n08n18n28n48n78n88n98na8nb8nd8ne8nf8nh8ni8nj8nk8nl8nm8nn8np8nq8nr8ns8nv8o08o28o38o48o58o88o98oa8od8oe8of8og8oh8oi8ok8ol8om8oo8op8oq8ou8ov8p08p18p28p38p48p58p6anqanransanuanvao0ao1ao2ao3ao5ao6ao7ao8ao9aoaaobaocaoeaofaogaohaoiaojaomaooaoqaoraosaotaouaovap0ap2ap6ap7ap8ap9apaapfapgaphapiapjaplapmapnapoappapqaptapuapvaq1aq2aq3aq6aq9aqaaqbaqcaqdaqeaqfaqgaqhaqiaqlaqmaqoaqpaqsaquaqvar0ar1ar2ar4ar5ar7ar8ar9arbarcardareargarhariarjarkarlarmarnarrarsaruas0as2as3as4as6as7as8as9asaasbasdaseasgashasiasjaskaslasmasoassastasuasvat0at1at4at5at6at7at8at9ataatcatdateatfatgathatiatjatkatlatmatnatoatpatqatrattatvau0au2au3au4au5au6au7auaaubaucaudaueaufaugauhauiaujaukaulaunauoaupaurausautauuauvav1av3av5av6av7av8av9avbavcavdaveavfavgaviavjavkavlavmavoavpavqavravuavvb01b03b05b06b07b08b09b0ab0cb0db0eb0fb0gb0hb0ib0kb0lb0mb0nb0qb0rb0sb0tb0ub0vb10b11b12b13b15b16b17b18b19b1ab1bb1cb1db1eb1gb1ib1jb1kb1lb1nb1pb1qb1rb1sb1tb1ub1vb20b22b23b24b25b26b27b28b29b2bb2cb2eb2hb2ib2jb2kb2lb2pb2rb2sb2tb2vb31b33b34b36b37b39b3cb3hb3ib3jb3kb3mb3nb3ob3qb3sb3tb40b41b44b45b46b47b48b49b4ab4bb4cb4eb4fb4gb4hb4ib4jb4lb4mb4nb4ob4qb4rb4sb4tb4vb50b51b52b53b54b55b56b57b58b59b5ab5bb5db5eb5fb5gb5kb5lb5nb5ob5pb5qb5rb5sb5tb5ub5vb62b63b64b65b66b67b68b6ab6cb6db6eb6fb6gb6hb6ib6jb6lb6mb6ob6qb6rb6sb6tb6vb70b71b72b74b76b78b79b7ab7bb7cb7db7eb7fb7hb7ib7jb7kb7lb7nb7ob7pb7qb7rb7sb7tb7vb81b82b84b85b86b87b88b89b8bb8cb8db8fb8hb8ib8jb8kb8ob8pb8qb8rb8vb90b92b93b94b95b96b99b9ab9bb9cb9db9eb9fb9gb9hb9ib9jb9kb9lb9mb9nb9ob9pb9qb9rb9sb9tb9ub9vba0ba2ba4ba5ba6ba7ba9baababbacbadbaebafbahbajbakbalbanbapbarbasbatbaubb0bb1bb4bb7bb8bb9bbabbbbbcbbdbbfbbhbbibbmbbnbbobbpbbqbbrbbsbbvbc3bc5bc6bc7bc8bcabccbcgbchbcibcjbckbclbcmbcnbcobcpbcrbcsbctbcubd0bd1bd2bd5bd6bd7bd9bdabdbbddbdgbdibdjbdkbdmbdnbdobdqbdrbdtbdubdvbe0be1be3be4be7be8beabebbecbedbeebefbegbehbeibejbelbembenbeobepbeqberbesbetbeubevbf0bf1bf2bf3bf4bf5bf6bf7bf8bf9bfebfibfkbflbfpbfrbfsbftbfubfvbg0bg1bg2bg3bg4bg5bg7bg8bg9bgbbgcbggbgjbglbgnbgpbgqbgsbgtbgubgvbh0bh1bh2bh3bh4bh6bh7bh8bh9bhbbhcbhfbhibhjbhkbhlbhmbhnbhpbhqbhrbhsbhtbhubi0bi1bi2bi3bi4bi5bi6bi7bi8biabibbiebigbihbiibijbikbipbiqbisbitbj0bj1bj2bj4bj6bj7bj8bj9bjabjbbjdbjebjfbjgbjhbjibjkbjmbjpbjqbjrbjsbk0bk1bk2bk3bk4bk5bk8bk9bkbbkcbkdbkfbkgbkibkjbkkbkmbkobkpbkrbktbkubl0bl1bl2bl3bl6bl7bl8bl9blablbblcbldbleblfblgblhblkbllblmblnblpblrblsbltblublvbm0bm1bm2bm3bm4bm5bm6bm7bm9bmabmbbmcbmdbmebmfbmgbmhbmibmjbmkbmlbmmbmnbmobmqbmrbmubmvbn2bn3bn4bn7bn9bnbbndbnebnfbngbnhbnibnjbnlbnmbnnbnpbnqbnrbnsbnubnvbo0bo9boabobbocbodbogboibokbolbonbopboqborbosboubovbp1bp3bp5bp6bp7bp8bp9bpdbpebpfbpgbphbpibpjbplbpmbpobppbpqbprbpsbptbpubpvbq0bq2bq4bq5bq6bq7bq8bq9bqabqcbqdbqebqfbqhbqjbqkbqmbqnbqobqpbqqbqrbqsbqtbqubqvbr2br3br4br5br8brabrbbrcbrdbrfbrgbrhbrjbrmbrobrpbrsbrubs1bs2bs3bs5bs6bs7bs8bs9bsabsbbscbsdbsgbshbsibsjbskbsmbsnbsobspbsrbssbstbsubt2bt4bt5bt7bt8bt9btabtbbtcbtfbtgbthbtibtjbtkbtlbtmbutbuvbv0bv1bv2bv3bv4bv5bv6bv7bv8bv9bvabvbbvcbvdbvebvfbvgbvhbvibvjbvkbvlbvmbvnbvobvpbvqbvrbvsbvtbvubvvc00c01c02c03c04c06c07c09c0ac0cc0dc0ec0fc0kc0lc0nc0oc0pc0qc0rc0sc0tc0uc0vc10c11c12c13c14c15c16c17c18c19c1ac1bc1cc1dc1ec1fc1gc1hc1ic1jc1kc1lc1mc1nc1oc1pc1qc1rc1sc1tc1uc1vc20c21c22c23c24c25c26c27c28c29c2ac2bc2cc2dc2ec2fc2gc2hc2ic2jc2kc2lc2mc2nc2oc2pc2qc2rc2sc2tc2uc2vc30c31c32c33c34c35c36c37c38c39c3ac3bc3cc3dc3ec3fc3gc3hc3ic3jc3kc3lc3mc3nc3oc3pc3qc3rc3sc3tc3uc3vc40c41c42c43c44c45c46c47c48c49c4ac4bc4c\",\n            \"creationDate\": \"0234002b0num02ap002b002b02u7002b002b002b002b002b002b002b002b0lac002b002b002b002b002b002b002b0eq8002b002b002b02li02fs03ih002b002b01or002b00lk00nc00ks002b002b002b002b03ih0nqv002b002b002b0234002b023403ih002b002b002b002b002b002b0ir7002b002b0234002b002b002b00lk002b023403ih002b02sb00qa002b002b002b0234002b0h9i002b002b002b012m0o100lct002b002b002b002b0bho002b002b002b002b012k0lac014d002b01bu002b027k002b03ih002b122q002b002b002b00sr00mn00pt046300pi00sr02bs00kh00md0o37002b00nj0c4s002b0o4v0234002b00mu0lac002b002b0234002b002b002b002b002b02te002b002b002b0471002b02fs0lac0lac002b00nc002b00nu002b04f2002b002b002b00o8002b002b0nrb002b002b002b00o800mn002b0hll002b002b002b002b023409f1002b03ih002b08ib002b08ib002b0234002b002b002b002b002b002b00o800mn00l600mn02c3002b002b002b02340234002b002b002b077n002b002b02r8002b0nm5014d002b002b002b0234002b043d002b002b002b002b05gq002b002b002b0lac0234002b03ih002b002b002b002b0lac002b002b0ocf002b002b0234002b002b0lac002b002b002b002b0234002b002b002b0864046m002b00o800of02b7002b002b002b0lac082303ih046j071j002b002b002b0o1c002b00sr00mn002b03ih017l014d002b002b002b002b002b0lac027r002b06g30mf3002b002b002b0qri002b00l600qn0lct00mn002b002b0b80002b02340o0p0p0f002b002b0234002b002b002b002b0123002b0arf002b0lac039m0234031j03440234002b002b002b002b002b002b00tn002b002b002b002b002b002b002b002b002b002b02r802ap03ih002b002b002b002b0nsr05jf002b002b002b002b002b03ih002b002b002b002b002b002b002b002b002b02h802lu00nj00lk02340528002b042h02340234002b03ih0234023404au002b002b0laf002b002b02340234002b002b024v00l6002b0234002b0h4g01bu02li0234002b002b002b002b06ur002b002b05kp002b002b07lj06ta002b002b002b002b02us002b0234002b002b002b077n002b002b023400k3002b06050lac002b002b002b002b002b002b0234002b002b07lj0lac002b002b002b002b002b00o800sr00kh02c3002b002b002b002b0kmv002b0lac002b02ap0234002b002b002b002b002b00pi00nj017l02c3002b002b0dbu0fsn002b0360002b00lk00pt02bs00j700md00md00lo00kh02ap02340bqn03ih002b002b002b002b002b002b002b002b00md00mu00mu002b031j0np5002b002b002b002b002b002b002b002b002b02r8002b0eek0234002b002b002b04eb1i8m002b01bu002b002b045j002b002b002b002b002b0lac0234002b0234002b002b002b002b0234002b002b002b002b002b002b002b002b002b00nc00js002b002b002b002b0eeq002b002b002b002b002b002b002b002b002b002b002b002b002b002b0471002b002b0lac002b002b00l6002b023403ih02en067t03ih011l03ih03ih002b00md002b08l7002b0234002b0ocf046v002b03ih002b002b002b002b002b0lac075k002b002b002b002b002b02bs00nj00mn00l30471002b002b002b002b11u7073p002b00kv00qa002b002b0234002b00nj00nu00nc00mn014d0455002b002b00of00o800ks00pt00pt00md002b002b00mn00md0c6v002b002b002b002b08t3002b01520b08002b002b046g002b002b0234002b002b002b002b02si00lr002b002b0234002b00o800of00tn002b002b02sv002b002b0lac002b0gik002b002b08lh002b0o5m002b002b0234002b002b002b002b002b002b002b002b002b002b002b0g4t002b002b0234002b03ih002b002b0lac002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b04nq002b002b002b0lac002b002b002b02h8002b002b002b002b002b0lac002b00nj00lr002b0nsr002b002b002b002b002b02u3002b0400002b002b07rf002b002b03ih002b0lac002b02c303ih002b0htv002b024f002b002b002b0aek0234002b0lac002b002b002b002b002b002b002b055409dj002b02340234002b002b0kth002b002b002b002b00qa05mp00nj00qn002b002b002b002b002b0pq70lac0dbu002b002b002b02h800pi0bpk002b01pf002b002b002b002b00mu002b002b0o7200o800pi02vh002b002b00of002b002b002b002b026408a2002b08bo02us002b002b0471002b002b002b002b002b023401pf002b002b002b002b0234023400o80234002b05om05om002b0v3v002b002b002b002b128612nm002b0nvd002b002b002b0gru002b002b002b002b002b02340234002b02li002b002b03ih002b0lac002b002b002b002b002b002b002b02h802n3002b0234002b0o3o002b002b002b0234002b0lac002b002b0o5n0lac03fn002b06ua0lac0o5d0lac023408dq0lac002b002b002b002b002b002b0uu8002b00sr0o1v002b00nu002b002b002b02sk002b0nsr002b002b002b002b0234002b002b002b02s8002b0lac002b002b0o51002b024s0234002b03i3002b002b002b002b0lac002b002b002b002b002b002b002b002b08ib002b002b002b002b002b03db002b002b002b0234132802s613c407ve00sr002b002b0234002b002b002b002b002b002b002b002b002b00mn002b002b002b002b002b002b002b002b002b002b002b002b0vud002b002b002b0a9a002b0234002b002b031j002b029t023400mu002b036n09f10c4l002b002b002b002b002b002b0o3p01p2002b0lac06p9002b03vh002b002b002b002b002b00l6017l0lac002b002b0lac002b002b002b02te06ua002b002b0234002b002b002b002b002b002b002b002b002b002b0c4703ih0lac08ei0ing002b002b002b002b002b0lac002b00ks0lac023402340lac002b002b0b0805qs00pi002b002b002b002b002b0lac0nk3002b002b002b002b002b002b002b01uo023402340860002b002b002b002b002b0234002b002b00nu00mn00q0002b002b002b002b002b002b002b002b002b002b002b002b0cpk002b002b002b00of00sr048p002b002b002b002b002b002b0234002b02c3002b002b002b002b02b700lk045j002b00md00kh002b002b002b00q0002b017l017l00kh0o8o02c3002b002b0lac002b017l002b002b002b002b02340lac002b002b002b0o7c002b02bs002b1054002b002b0234002b089u002b002b002b00nu00tn002b02b7002b002b03kr0bva0234002b002b002b002b00qn00of02340234002b024f002b002b0lac002b002b0234049p0lac02340lac002b002b0234002b002b00pi00mu0674002b002b002b002b002b00q003ih0234002b002b03ih002b002b002b002b02vh002b02li08td002b002b002b0a3500nc01bu002b0ffk002b002b002b00nj014d00q0048p002b0cam03ih002b002b002b002b002b023405mf002b002b13id002b08cb03ih02vh002b0o7i002b002b002b002b002b02ap03ih002b0n0c002b0g4t002b002b002b002b002b002b002b02en002b02fs0fh6002b00q0002b02mu045503ih07lq002b03ih002b002b002b00l6002b0lac00kh00nj0nua00ko002b002b002b002b02bs002b002b0lct002b002b00sr017l002b00md002b0lac12jg04p9002b002b02sv0nsd002b002b002b002b03ih00of00js00mn00pi002b002b02340rf1002b0234002b0152002b002b002b002b002b002b002b002b002b002b002b002b0ffk002b002b002b002b002b002b002b002b002b0lac002b0o0p002b0234002b03i3002b002b002b02bs002b0h9i0lac0nu8002b002b002b02te002b002b002b002b002b002b002b002b002b02ig002b00nu00qa047108bq00nu00sr049b002b002b002b02340c4l002b002b002b002b002b0234002b002b002b0234002b002b002b002b0lac002b002b002b03ve002b002b002b002b002b0cen00mn02c7002b002b002b0b4g02te02ra02bs0do402h8002b0q3600nj00qa002b023403db00mn002b002b002b002b002b002b0bhv002b02us002b00nj02c802li002b00nc00l600nu00pt02li002b02li023409mb00pt002b00l600l6002b002b002b002b002b002b002b00qa00qa002b03ih002b002b002b08ib002b002b067002c3002b04ub05om0ugm002b002b002b002b002b0n0c002b03on0bko00q000nu00mu002b01kl002b0234002b002b002b0cl600sr07ma0rc7002b00pi00nc002b00k3002b0ekd00pi02te002b002b002b02340nm500nu00nc00of00nc02te002b002b002b0c4703db002b002b002b002b002b00lr00tn0234002b00sr0234002b0cen002b00o80152002b002b01j2014d002b06e402340234002b0234002b0o9f002b00o8002b002b002b013700nj002b0234002b002b029t02340no0002b002b002b002b002b08bo002b002b0q3600lk00qn002b00sr014d002b05dk002b0lac002b002b00nu00ks00pt00l602en002b013f00md03ih002b04i00234002b05kv0234002b002b002b002b002b00nu002b002b002b0urf002b002b02te002b002b002b002b0jb700o800qa01bu02fs002b002b002b0o7c002b002b002b002b03o1002b002b002b002b002b002b00nu00md069000l600sr0lac002b002b002b0ntt00k30lac09f10lac03tg08j1002b002b0bn3002b002b03ih002b002b002b0o3n017l002b00l600l60ag400md02ap0lac02c3002b03lr00of013j00js00q002bs002b002b002b002b002b002b002b002b002b03ih002b0o7m002b0aqe03c4002b002b002b002b002b002b0556002b0lac002b00nc002b002b02in00ks047o0ihf002b03ih0o00002b002b002b002b002b00qa0g8h002b002b002b00mn00nu00pt002b00mn00lo06kt002b002b002b002b002b00q000mn00nu00of00nc00qa00pi00nj00l300mu00tn053q002b036n02li02ap002b03ih002b002b00sr002b01or002b002b00sr00sr02340epi002b002b002b0b20002b002b002b046j03sn07n7002b002b002b00l600qn002b002b002b002b002b002b002b002b04pg0cf2002b046g00l3002b002b00qa002b02bs0lac002b002b002b002b0lac002b0b4n0234023402c3002b023403op0aeo0lac0lac02s800q0002b002b0lac002b002b02li002b00of00of00sr02bs03ih002b0b74002b002b002b002b02340151002b013f00l6002b00o802ti002b002b002b002b00o800md00l600qa00mn03ih03ih00lo00sr002b002b002b0234002b0234002b002b002b002b05ai002b002b002b01pf03ih002b0a4p00mn002b002b002b002b002b002b0152002b002b023405sn002b002b02340234002b02li002b03mq00mu002b00of00pi002b002b002b02sv002b002b002b002b002b093h002b002b024s00of00nu00q000o8002b00md002b002b013700pt06dc00l302bs002b002b0oai002b079m0234002b002b002b002b002b002b03ih002b002b002b0lct002b002b002b002b002b00of03cb002b02sv002b002b002b002b002b002b027k002b0234002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b0234002b002b002b002b07bi002b023401od00pt002b002b002b002b002b002b0lac068l002b002b023414f706q5002b002b017l00pi0234002b02340lct002b002b0htv002b0lac00md00nc00mu02c3002b00o800lk002b002b002b002b002b002b04k50eok0234002b002b002b002b03ih002b002b002b002b002b002b002b0234002b002b002b002b002b02340lac002b08ag02lf002b002b0o68002b002b002b002b0lac02bs02b7002b0d9h0v4m002b002b002b002b002b002b10i50lac00sr00qa002b002b03db02en002b00o8049b002b002b0234002b002b002b002b002b002b002b002b002b0lac002b023400sr09a3002b002b03ih002b03ih002b014d014d002b059203ih00lo00nu00j7002b002b03ih002b0laf002b03ih002b002b002b02340234002b002b0lac00nc002b0lac002b00tn002b002b002b054i0nlq002b0234002b002b032702s80234002b002b0ksl002b002b0234002b002b002b0mel02fs002b0bho002b002b00nu00k302en002b0nto0bnp002b002b002b002b0v3e0qit002b002b002b03ih0gil002b002b002b002b002b002b0lac002b03ju00lk00tn002b12am0123002b002b0234002b002b02bs002b00sr024s02bs03ih002b002b002b002b002b002b002b002b002b0kt7002b02340c400234002b0nrp002b002b002b00pt02li0o5d08hj0bk5002b0nm7002b023400lk00nu0i140234002b002b02r801v4002b002b002b002b0234002b002b002b002b002b0234055q06rp002b002b002b002b002b002b002b002b002b002b02s7002b002b06rf023403ih002b02340234023409l500mu00mn002b03ih002b00lo002b002b002b00nc00nu002b03lr0lct002b002b002b002b023406hu00md045s002b023402sf0205023403lg002b002b0234002b002b002b002b002b002b0lac002b002b002b002b002b02fs02hs0o37002b002b002b002b002b002b00o80lac02s4002b002b0lac05om002b02340bmh00l600sr002b0152002b002b002b002b002b002b002b00of01bu02ap0234002b00q0002b002b038h03e9002b08e70234002b002b002b002b002b002b002b0ag4002b002b002b002b002b0234002b002b0o37052i002b0bnp002b002b002b002b002b002b023406iu0234002b002b002b00mn002b0l0a002b002b002b002b002b002b0eq4002b002b0aoc0lac002b002b023400mn002b002b002b11o1002b002b002b00md002b03o1002b002b002b00lk00fa002b002b002b002b002b0aek0o1r002b023403tg002b002b026s00mn002b002b0vc5002b002b126l002b0lac12jo0nof0lac0234002b002b0apf002b002b002b002b002b002b002b002b002b002b0639002b002b002b002b0lac002b02l1002b002b002b00jl002b002b05h9002b00nj00mn002b03lr03lr002b0bga0234002b002b002b002b002b0lac0lct002b002b02340234002b002b0lct0fs30lct0234002b002b002b0234002b08c8002b002b002b0370002b002b002b002b0ekk01pm002b02li002b002b002b002b02n2002b002b002b0lac0234002b0lac002b002b002b002b002b023412800o4h002b002b002b0nu8002b002b0lac002b12q5002b002b002b002b002b0o3702340234002b002b002b002b0234002b02340234002b002b002b002b0234002b00js002b002b002b002b0nq102fs002b0234002b002b0nnb00of002b002b049p002b02vo0234002b0lac002b002b02340o0p002b00nc00qn0be10lac002b023414v600of00nc002b04ml002b002b002b0o0p03ih0lac002b0234002b002b03on017l00qa00q0002b002b0234002b002b002b02fs03ih0lct02en002b002b002b002b00qa04hd002b002b002b0344002b002b002b002b002b0234002b002b002b002b03ih002b002b0613002b002b002b0414002b002b0234002b00of00pi014d002b002b002b002b002b0455002b002b0lac002b002b0234002b09f10lac0lac002b01kl002b02ap02b700mn01330uui03ih02am002b002b01or03ih002b10ej03mq089r002b002b00tn0nhj00sr00of00sr00mn00mu01qv0360002b002b032k002b002b0234002b00mn00m6002b002b0234002b002b02nu002b002b002b002b002b002b002b0lct002b00lo00nu0lac002b002b0234002b0laf002b0vts002b0lac002b002b00nu08bo0234002b002b002b023400qa00mn002b002b02340234002b00ko00j7002b002b0234002b002b0c47002b002b002b002b002b00sr0234002b002b00nu002b002b002b03ih00e3002b002b002b002b0lac002b02340234023402340cjh00sr0bnp0ilh0lac002b002b002b002b002b00nc00nu02b702b7002b013300q00aee0234002b0234002b002b002b002b002b002b002b04c100nj015202am06hg00nc00pt00pt002b002b002b002b002b03ih002b0lac06d400tn002b002b002b03f700nu00q000q000q002ap002b08uk02us002b0234002b002b002b0ob8002b002b002b0234002b002b002b03ih002b002b002b002b002b002b023403ih0lac002b0ksl002b002b002b002b002b002b002b0nvm002b002b10i00o10002b0ctm002b02tp002b002b00mn017l00lo002b002b03270234002b002b002b0lac00qn002b002b002b002b002b002b02te03ih00of002b002b002b046j002b002b02bs0v4s0234002b002b10pf002b002b0234002b002b029f002b0k45002b0234002b002b002b0234002b002b002b002b002b002b00qa0152002b0234002b002b002b002b0lac002b002b002b002b0lac002b002b002b002b002b002b002b002b0234002b002b03ih002b002b002b06k40nmt002b023402bs09og02li00ks002b0234002b03ih002b002b002b002b04in002b002b049h002b002b0ft000sr03ih002b002b002b002b002b002b002b00sr002b002b002b002b002b002b002b002b00mn002b002b002b0234002b002b00nu00q0002b002b002b002b002b002b002b13bg01u2002b002b002b002b002b002b002b002b002b159n002b002b002b00nc00ko00qn00pt00l600pt002b002b0lac002b002b002b002b00nu002b00nu046j002b002b002b047103i3002b0lac002b002b002b0lac059h02en002b002b03tg002b002b002b0234002b002b002b002b002b05l9002b03ih08v5002b002b002b0lct002b0jnf03db002b002b002b149i002b002b0234002b002b002b002b002b002b0lct0lct03ih002b03ih002b002b00lo002b002b0592002b0nq5002b002b002b02340imj002b002b002b002b0ihh002b00nc00mn002b02r8002b002b002b002b002b002b002b002b002b0234002b03tg002b0lac0234002b002b02c30v4m07qr002b002b002b002b02lj09mb002b002b002b002b002b002b08ed002b002b002b002b002b03ih002b002b002b0234002b02fs002b00qn00nc01370234002b002b002b002b002b002b002b002b03ih002b002b002b0234002b00nu002b002b002b002b002b002b002b002b002b002b002b002b002b002b02li0rcv06t703mq002b002b002b002b002b002b002b002b002b002b06c60234002b002b0lac01or0mdv0o7j12nm00o8002b00of002b002b002b002b002b002b046g002b03db0nvi002b0h4g002b002b002b0c76002b002b002b0455002b002b0lac002b002b002b00o800nu031300qa00sr00sr002b002b002b0234002b002b0o3o0234002b043d05r30pbk002b002b002b002b002b002b002b002b002b0234002b002b002b002b002b002b002b03ih0gik002b01od002b0mdu002b06pu002b002b02tp00nc002b0lac002b002b002b0234002b002b002b002b002b0lac002b002b03db002b002b002b0lac0lac002b002b00nu002b002b002b023400nj056k0d0h002b0lac002b002b0471002b002b002b002b00mu002b002b002b0d0h002b002b0lac002b002b002b002b002b0234002b03ih002b002b002b0pk00234002b002b023400pt00mn0lac002b002b002b057h002b03on002b023402340lac0lac002b002b0ntg002b002b0lac02340fri00qn002b002b002b002b0234002b0234002b002b002b002b02kp0hfg002b002b002b002b02sv002b002b002b002b002b002b00nj00md002b002b002b002b002b002b0cqs002b03no002b0234002b10pf002b002b002b002b002b002b002b0lac0cjh002b00j7002b002b02u30do4049p002b002b135l002b0234002b002b02us0234002b002b00nj00md002b0471002b002b026o002b002b002b002b01bu002b02ui0mfd002b002b0lac002b0lac002b00qa02sf002b036n069f002b002b00of00kv002b002b002b002b002b05nj002b002b002b08g501p2002b002b002b002b002b0lac002b02tp002b002b0234002b02fs002b002b002b00of04eb00q00234002b0234002b02340234002b00sr09f100q000mn002b002b002b002b002b002b002b02h802bs002b03ih00nc08cb002b002b002b002b002b002b03bd00q0002b02h80a0r002b0ccr002b0nsr002b002b002b002b0uur002b083e002b002b002b002b0ufr0lac063g002b02340234002b0lac002b002b002b002b002b002b002b002b002b002b002b00ko002b002b002b002b0o1c002b002b02lm002b0nun03ih0c470lac002b002b002b002b002b00lk00md00md00l302rg00q012lq002b002b002b002b023402ts02c3002b002b0o27002b0234002b05h9002b002b002b002b02sk08g5002b002b0c9m0o3g02340lac002b002b002b002b0hfg002b002b002b002b0nte002b0234002b0lac002b002b002b002b002b002b002b002b002b002b00of00qa002b002b002b002b002b002b023402ul002b0234002b002b0234023403ih002b002b002b002b00mn00nu00qa048s0biu02bs02c3002b002b002b002b03db03tg002b0hgm002b002b002b002b089g0bva002b002b002b02340lac002b02en002b002b002b06e4002b02li00mn0lct002b002b002b0v79002b03ih0lac002b002b03tg002b01pm002b002b0234002b002b002b002b002b002b002b03ih002b02340lac023400mu002b0152002b00md14fq1287002b002b002b02sf002b00l300pt0471002b002b002b002b002b002b00of0234002b02h802340234002b1379002b002b00lk00qn02on00q0002b002b06ic002b002b002b0234036n002b002b002b00l6002b0lac002b002b08d8002b002b002b002b002b002b002b11o100sr002b044u002b00l6002b0lac00sr00js00mu002b002b0lct04ig002b02ru002b02li002b08dq02340234002b0234002b002b002b002b002b002b002b002b0qu3002b002b0lgs00l600nc017l002b002b002b0234002b0lac002b002b002b002b002b002b0ceb0234002b0lac002b002b002b002b0ggc032k002b002b002b0234002b002b002b0234002b002b002b002b002b002b002b002b01pf0234002b002b00qa0lac002b04cv0234002b002b0lac002b0lac002b002b0lac002b002b0234002b002b002b002b002b002b002b002b002b04eb06kt002b002b00mn00nu002b11i8002b002b023402s600nc0152002b06jt002b002b02fs00mn00mn00o800nu0471002b002b0234002b00tn036n002b07ft07ku002b002b002b002b002b002b002b002b06ic002b002b0lac002b023405l9002b02h8002b0o1q002b026o023400sr00l600nc002b002b002b002b002b002b002b0fbc0aqe002b002b002b00nc002b002b002b0lac002b002b002b002b002b00o800mu002b002b002b002b002b002b002b002b00o800md00mu00sr00md00md02h8002b002b002b002b002b002b002b00o8002b002b002b002b002b002b002b0lct002b00md00pt0234002b002b002b00nj002b002b0370002b0lac002b002b002b002b0c4s002b0lct0bf400lk01370234002b002b002b002b002b002b002b0lac002b0234002b002b05dk03ju002b078q002b00o800md00pi002b002b002b002b002b025d012m00pi047600mu002b03db002b01370o1r002b002b002b002b002b00md002b002b00sr02c30234002b002b00l600pi002b077n002b002b002b00q0002b030a00nj06p90v4m002b02340234002b00o800o8061l002b002b002b03ih002b002b002b002b002b002b002b0234002b0ge802ii002b002b03f600nu00nu002b002b002b03ih00sr00lk00q002us03ih00nu00mn02bs002b002b002b002b031902340234002b002b002b002b0dd9002b002b002b0nta00o800mu0kou002b0nu3002b03ih002b0bf400nu00kl00q000q000jl00q0002b03ih002b00sr002b002b00md00q0002b00nu002b01bu00md002b002b002b002b002b002b02in002b00kl002b0eki002b002b002b0234002b002b002b002b07ih002b002b002b002b002b049b002b002b002b002b02en01p2002b002b002b002b03ih015200k303ih00nu00md00qa00sr03ih13m402nb00nq00mn07jo046j00pi002b013300mn002b002b002b00q0002b00mu002b0265002b002b002b002b002b002b002b002b002b002b03e9002b002b002b002b002b0g5g002b002b002b002b002b067i00pi05mf002b07ku0234002b002b002b002b002b0bko002b00q006ta002b014d0bqj03ih0234002b002b002b002b024s03tg002b00o800sr002b0lct002b002b002b036001fe002b01or002b002b0hll002b03bd0234002b002b0lac023403ih002b002b002b03ih002b03op002b00sr00pi03ih002b00nu00of00q0013300nu002b0234002b002b0b6m002b0234002b002b00sr002b0lac0lct02h802lu002b002b002b002b002b002b002b002b002b002b002b002b002b002b0234002b002b0lct002b00pt00nu02si002b002b002b09dj0a5l002b002b002b002b00lo00qn002b01pf002b0234002b0234002b002b02c3002b0lac0lac023401og002b002b002b0eki057h002b002b002b002b0lac002b002b0o9f03ih05k8002b0234002b002b002b03ih002b002b03ih002b03ih023402us002b002b037003ih002b002b002b002b002b002b02no002b002b002b002b002b002b0234002b002b00pt002b0234002b002b002b00nu00q0002b002b002b002b002b00pt02340lac02bs02c300nc002b002b002b0bpk0lac002b002b002b002b00mu002b03ih002b0o51002b002b002b0lac002b0lac0lac00l6002b00lo00sr0234002b01p2002b02bs02b7023400nj01v400mn03db002b002b00js002b002b002b036n002b002b002b002b02hc002b002b002b002b002b002b12js002b002b0234002b002b002b002b0234002b002b002b002b002b002b002b0152002b002b00mn002b00jl002b002b03at002b00pi047g00pi00mn00of002b002b002b00pi002b002b00qn00nc0nsi0afl002b002b002b002b002b002b00o800sr002b002b00of002b002b002b002b0ccr03ih002b002b002b002b00q0002b002b002b002b023400qn00pt0lac002b002b002b002b00kh002b023406hu002b002b0gp1002b002b00nj00sr0152002b046m002b002b0234002b002b002b002b002b002b002b023400q008dq002b002b002b00mn00l6002b0o7h03ih002b002b05920lac002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b02340me600qn00nj02bs0lac0234002b024g0lac002b002b0hcb002b002b02li0234002b002b002b0bf7002b002b002b002b002b002b002b03tg002b002b002b002b002b00tn00ks002b002b002b0lgs002b002b002b002b002b00md00of08tv0o8q002b0234002b002b002b002b0234002b002b002b0j34002b0234002b002b00lk00nu0o6f002b002b12jr0gil002b002b002b002b002b131h002b00pf00nc00mu002b00j700mn00sr02c3002b002b002b002b03ih002b03ih002b002b002b002b00nc00tn0234002b00js00js002b002b002b00nc00l30ceb002b002b0lac0234002b0lac0234002b002b04cv0lac02me002b002b03nd002b002b002b002b002b002b11i8002b0234002b002b002b0lac002b002b002b06pj002b002b01pm04fp002b002b002b002b002b002b002b0602002b02340234002b0ob9002b02bl002b002b0234002b002b0133002b00qn03ih05be002b002b002b0234002b0123002b002b0b4g002b080d02c300l300mu00q0002b002b002b002b002b002b02340lac002b0234002b002b002b002b002b05l9002b0lac002b002b03cb002b0lac0lac002b002b00q0002b002b002b002b002b002b002b002b02340lac0do4002b12q0002b002b002b0lac002b002b002b002b002b002b002b023400mu00nj0c5v002b0o7i002b0o700o74002b002b002b002b002b023406hg02fs002b002b002b002b00qn02bs0c82002b002b002b002b002b002b002b002b002b03db02kv002b0mg5002b00nu002b002b002b00nu00qn002b002b02t7002b002b002b002b073l002b00nu00qn0234002b002b002b0nvm02bs002b0o9b049p00lk06ua002b002b00nj002b14dg002b00nc002b00of00lo002b002b0234002b002b023400ks01mu01p203ih002b002b002b024k002b00sr00ks00pi002b07lt002b002b002b002b002b002b002b00js00mn00mn002b002b002b002b00l600qa002b002b002b002b002b002b002b002b098t0bmh002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b00l600kv02s70fsn0ala0234002b0234002b02c0002b03f7025p02lt002b0lac002b0o3703ih002b00js00lk00nc002b002b002b002b002b03mt002b06d4002b00o8002b02c30lac002b00md00mu002b0313002b02bs002b002b002b0234023405ps002b03ih002b02b7002b03rg0bho002b002b002b061s002b02li002b002b002b002b002b002b002b002b002b002b002b002b0c6v0234002b002b002b002b0234077n002b03ih002b002b029t1491002b002b002b002b002b002b002b0579002b002b002b002b12bs002b002b002b002b002b002b0234002b002b0234023403ih002b132200nc07k9002b002b002b00pt002b002b05pl002b002b002b002b002b002b0234002b03d8002b002b00o80lac002b0rl9002b0o0b002b002b02li002b002b002b002b002b0234002b002b0ihf01520lac023407ve0i130234002b002b002b002b002b002b002b02340o16002b002b02340o3g002b002b002b023406i5002b002b002b002b03tg07na0qio002b00sr002b002b002b00o800lk044602h8002b002b002b002b0ing023403r30234002b002b0234002b002b002b002b00j708bk002b00of00sr0234002b002b002b0234002b02340be4061310ej002b04c1002b002b0o8f002b002b0234002b0234002b12am0lac002b002b002b002b023402340234002b0234002b002b002b00kv02c3002b002b002b002b0234002b02ru02c3002b0234002b002b002b002b0o0p002b002b0c5v002b002b0234002b002b002b002b002b00nu0d9h00qn00sr03i30gf1002b00q000qa02c30oc800kl00qn0234002b002b0234002b002b0lac0lac002b002b0234002b002b002b036n002b002b002b002b002b023406c6002b002b068l06i506gh002b0o3o002b002b00mn00mn002b002b002b002b03ih002b002b002b03ih0o1q002b0lac002b002b002b0v6u002b0o8q002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b0v34023400js002b002b002b03ve002b002b002b0234002b02h801bu02c300l302340lac002b002b002b002b0lac002b002b002b002b0b80023401or00mn002b002b00of002b002b002b002b002b002b002b002b002b002b002b002b11in002b002b002b0234002b002b0234002b002b002b002b02c3002b002b0be4002b002b023401uo02li002b0a6l002b002b00kh01or002b002b002b02340nta002b002b0lac023402te0234002b0234002b002b002b00o802md0lac002b002b002b0kel0o2a002b002b002b002b002b03ih002b002b002b002b002b002b0m2l00qa02vh002b0234002b051n0lac002b00q000l604ad0234002b002b014d0lac03ih002b002b002b03mq08dq014d002b002b002b002b0o1a002b0b74002b002b002b03ih002b002b028o00l60lac002b002b00o80ajm002b002b002b00mu0jbi02li002b002b002b0234002b002b002b002b03on02bs00tn002b02vb002b002b002b002b002b002b002b03db00md03db05om002b002b002b061l00pt002b002b002b002b08a903ih002b07i0002b002b002b002b002b002b002b0gp1002b0ha4002b00qn03ih002b00nj00md017l002b002b03ih002b03ih002b002b002b06se002b03ih002b002b002b002b002b002b002b01or002b03ih002b002b002b002b002b002b002b03ih002b002b046j002b05cs002b002b002b002b002b002b002b002b00pt00pt089r00mn00l600pi002b002b002b002b002b0313002b002b002b0lac0nrf002b0mdu002b02li002b002b002b017l002b002b002b002b002b03ih00nu002b002b002b08ed00qa00nu002b0lac002b002b00sr00mu02h80o0f002b0lac002b002b002b06p905o0002b002b0lac002b0lct0lac023403ih00sr00qa0h9i00qa00mu02bs0234002b002b002b002b002b0lac002b002b002b0234002b002b002b0g8v002b002b002b002b00l600o800kh00pt0234002b002b002b002b02c3002b002b0nm000pt02us002b002b002b002b002b0234002b002b07ft05s7023402340lac023402c306gh0lac0674002b03ih0234002b023403f70234002b002b0lct002b002b002b002b0lac0jj70lac002b002b002b002b00nc00nu0ptn013302li002b0234023403ih002b002b00qa0lct0lac002b002b002b002b002b002b002b002b00o800ks00of00qa02te00nc002b00pt002b002b0234002b002b002b002b00md002b002b00q000mu002b0v4k023401330152002b02bs002b0234002b002b002b0lac002b002b002b002b002b002b0bs106jj02mh002b00kl0b5g023402tp002b002b012m015203ih002b00nc002b002b0lac002b002b002b00of002b002b002b002b002b023400lk00md029t0u800um9002b002b0o62017l01bu00l605o0002b0234002b002b0lac0lct00mu002b01kl002b00nu00mn002b002b01df00mn00pi00l3036000qa00nj03ck002b0cs7013300nc002b002b00o800md067402fs02c300nc00qn002b002b002b023400mn015200nu03db0234002b00nc00j700mn048e0o2a00nc002b002b002b0234002b0lct002b00nj131i002b002b002b002b0123002b0lac03mq002b0aoc00nj00lk014d01520m0b002b002b002b002b002b00o800nu00pt00lo029t00l300pi00lo00pt017l00mu03tg002b0234002b0234002b07lt002b002b002b00q000pt0234002b002b0m0b03ih06g30234002b002b002b002b0cf2002b002b0234002b00nc002b0bgu0c4701df002b00mu002b027k002b00mn00nu045j00nc023400ks002b02340nvm002b002b0lac00l6030a002b002b002b0lct002b03ih002b002b002b002b00qn00nu00l3002b002b00m602en002b002b002b0d9r0lac0lac00tn013j00nu00nc02ap00mu02c3049b023402li02fs0234002b02si002b002b00o8015200l3002b00mu002b00sr00n800pt013700mu002b002b00qn00mn00md02b70lac0o7g002b00tn12nm00sr002b00nc00l600j700sr00sr0gs40i61002b002b02h813di00lo00of00l600mn0nu8002b0lct049h002b02h800mn00nj02ru002b00tn002b002b0o0h0234023408ei002b023403tg002b002b002b02si0234002b002b0234002b015200kh02en03ih00mu002b00nu00lk002b002b02ig00k30234002b002b002b002b002b002b00o800nu00pt002b00of05pl00mu00kh00nj002b00tn00pt002b1ikn002b002b002b002b002b00ks00pt00pt0ind0lac014d00pi017l00q000sr07sn002b002b015201bu11i8002b06r8002b00of00ks00m600l600q0002b002b002b002b002b01uo002b0234023401mu00md00pi017l0v6f0mf3002b01a600pt02en00nc01370ocm02s6002b00j704710bla002b002b0234002b002b0gik02340o28002b002b0hfg0vlc00nu00mu02bs076u002b002b0c7k00nu0gia00sr002b00nu014d02bs013701or002b002b002b002b002b002b08mv002b002b002b002b002b002b0o8q002b002b00mu002b0n0c002b002b0137002b002b002b002b00nc002b015200jl0q4500lk00md00nc00sr023400pt00js00pt002b02rg068l002b132a00nc00nu002b00nu00qn002b002b00pt00kh002b067b0234002b002b002b03ih02340lac00nc00nc013j00qn00lr00q000qa046j002b002b002b002b002b03mq0234002b023400nu00nu002b0234002b00nu017l0vj3002b029700pt00nu0133042702c3002b02340lct023410lo00lk0152002b0lac06jm023403db00pi02en023400pt0234002b002b03ih0234002b002b002b02340lac002b002b002b0234002b002b002b0lac02ti002b002b002b002b00pi002b002b002b002b002b002b002b00nu002b002b002b002b023407kk002b036n002b02bs002b00kl00lk00mn0bko002b002b02340lct002b0v3e002b002b00pt002b002b002b0bho00pt0v4k002b002b002b002b0579002b00js002b0noe002b13g5002b002b0lac002b06c60c7k00nu0234002b002b02340234002b002b002b002b002b13of002b002b002b002b002b002b002b002b002b0234002b0lac002b002b002b002b002b02340234002b002b002b002b002b002b0laf03ih0lac03130234002b002b02h306kt002b002b12870lac02340lac0bga0234002b002b002b002b14ff002b18hr0lac002b002b002b002b002b002b00of02tm002b002b002b002b0234002b002b03i3023402m3002b002b002b002b0234002b03ih0234002b002b00nu05ud002b002b002b002b00o80ahj002b002b002b002b002b002b002b002b002b00nj00md00q000kl029t00tn002b002b002b03ih002b07eq01bu002b002b002b002b00pt02fs032702c30lac02ti002b02t40qbb002b002b02s8002b002b00js00kv002b002b002b002b002b002b002b02t4002b03ih0lac0lct03ih002b18hm002b002b002b002b002b05mf002b002b0lac002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b002b02nu002b002b002b002b002b0np9002b0lac0ksl02340234002b00lk00lo002b002b0234002b0ksl002b02fs002b0fpm0be1002b002b002b0234002b02li002b002b002b002b002b002b0nun002b07hi002b00l300nc023403kt03kt002b01pf0234002b002b002b002b002b03ih002b0lac002b002b00mn00nu002b002b02fs0234002b002b002b060k03sn002b002b002b002b002b002b002b002b02ln02340234002b002b0lac002b002b03i3002b0234002b002b0234002b0od6002b002b002b04t3002b002b002b002b002b002b0o100o6400q000nu002b03tg002b002b002b0234002b002b002b025d02mu0o37002b002b002b002b002b0lac0lac002b0234002b002b002b002b0cdk08ib002b02340lct002b002b002b002b002b002b0lac0lac002b002b0234002b002b002b002b002b0fs3002b0lac0234002b002b002b03ih02340lac002b002b002b002b002b002b002b002b002b002b002b03ih002b002b002b002b002b0h9i002b02tp002b002b002b002b03ih002b002b002b0a6l0234002b03ih0234002b0234002b002b002b002b0234002b0234002b002b002b002b002b002b02340234002b03ju07bu002b002b0234002b002b0lct0234002b002b002b0nvb002b0234002b002b002b002b00sr08ib002b002b002b002b002b002b02h80q2g002b14ki0lac0lac002b002b0lac0lac0234002b002b002b002b0lac0lac002b0lac00pt002b002b002b002b0bcq03ih0lac002b02mp014600nj00pt017l002b02b70lgs0234002b002b002b0ing002b0lct0lac002b0lac0lac03ih002b002b002b002b02340234002b002b002b002b002b002b002b002b002b002b0lac054p0lac002b0lac002b002b03ih00tn08bq00nu00nu002b002b05j2002b002b03ih002b002b0234002b02340o7p002b002b002b002b01bu00sr03u20lac002b002b00l600nc002b002b00nu0a6h002b002b002b002b02fs002b002b0bk5002b002b002b002b002b0kt7002b017l00md046j00sr05om0234002b02340o36002b002b002b002b002b002b02fs002b002b002b002b0234047102340mdu002b002b002b002b063g002b002b002b00md002b06hg047105dh02bs03ih00nu00pi05j811er02s4002b0234002b002b002b046v002b002b002b002b002b002b0sgm03ih0o370bqj00qa00sr002b002b002b0lac002b02340234002b002b002b002b02n911bp002b002b0234002b002b06e4002b0nou002b002b0234002b0234002b002b002b002b0234002b002b0234002b12en04pv002b002b0lac002b002b0234002b05sn02u302ap002b024k002b0234002b046j002b002b08bk0234002b002b0297023400kv00kv00md02s8002b0234002b002b002b04t3002b0234002b0lct002b002b002b12q203e9002b002b002b023403no002b03ih0234002b002b0lac002b002b002b002b002b00mn002b047102s80lac002b002b002b002b002b002b002b053q0lac02sk002b002b002b002b0lct002b03ju002b002b002b0234002b002b0rfb03f6002b0lac002b002b002b0234002b0od6002b002b002b002b002b002b0605002b002b02te002b002b002b002b002b0ihf002b002b0c820133002b002b0lac002b002b00o800pt002b00md0vk6002b002b00mn0nq30o100bko002b02340lac0sdk002b002b002b002b002b0arb002b0p9g023401og03tg002b03ih002b002b002b002b002b0lac002b002b002b002b002b002b002b002b0234002b0lac002b029700l600pi00tn0o9m002b002b03ih002b0oc9002b13qf0gia002b01fe03ih03ih002b002b12nm03mq002b002b023403ih002b078c00mn00mu00nj002b002b002b03ih0o0h002b002b002b002b002b0nte002b002b002b002b10730oal16bj002b054400kv00qa002b002b002b04ig002b002b04ga002b0lac002b00e6002b03i302340lac002b048e002b002b002b002b002b0234002b00of00mn03pv002b01pf0234002b002b044u002b01bu03ih04710bga02c30lac002b002b002b07i0002b002b002b002b002b002b07s2002b002b0v6i00nc002b002b0234002b0lac0rv1002b002b002b01og002b002b002b002b002b002b03op0lac002b002b03db03mq002b002b002b002b002b03ih0234002b002b002b00mu0obf0oco002b002b002b0234002b002b0234002b002b002b002b0234002b002b03ih002b00pi00md00qa03ve03ju02li002b002b002b002b002b036n002b002b02r8002b002b023400nj00l6046j002b002b002b02si09pa08ei03ih04710234002b002b00nc00mn00tn002b0eks0234002b002b002b002b02bs00o800qa002b03ih0313002b11in002b002b002b023406p9002b002b002b02340234002b00nu00mn00sr054p02c302340ald0lac002b002b0nto0n870iss002b002b002b15p3002b002b002b0234002b02en0oc80234002b002b00nc00o80bqn02bs00nj02bs0ocr002b0234002b0o1c0lac002b002b002b002b002b002b002b0234002b03cp002b0lac066t00l600md00qa067b00qa02bs0cdk002b08og002b00qn0234002b002b0234002b002b002b002b046g00lo002b08im0ajm002b002b002b002b002b002b002b002b002b002b0257002b0hll002b002b002b002b002b002b002b002b0234002b002b0lct02340nqq02340nnb002b002b002b002b002b002b02no002b002b002b0lac0152002b002b002b0lct002b002b0471002b002b03ih0eq8023403ih002b024f002b002b07qk002b002b04880234002b002b02ti00tn0234002b0eeh002b0234002b13c4002b0lac10v903oc0234002b002b002b002b002b023403tg030a02s400mn00l6002b002b002b0klb002b002b03ih002b002b0234002b002b03mq002b002b02sk002b002b02rv002b002b002b002b002b0234023402340lac03db002b0234002b08l7002b06t7002b002b002b002b023402340234002b002b02340234073l002b002b002b162p16fj153115ki16rg170k170k16jt002b0a5l18gc18nl18ol18ov180i18pn180i18pr18pf17dd18pf18pf17lr183p18gc195418im1a361a661a661a6619mu1a7a1a9m1ah51al41ak61ate1bi71c0b1c6i1cbh1cli1del1dga1dga1dga1e181e3e1eq31f6b1fse1g5h1h3817f21h9t1i6s1kp71kbt1l4k1l4k1lha1nns1mi91mi91mi91mi91mi91mi91mi91mi91mi91mi91mi91mi91mi91mhc1mi91mi51mjb1mjb1mjb1mjb1mjb1mjb1mjb1mjb1mjb1mjt1mtm1mtm1mtm1mtm1mtm1muj1n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931n931nao1nao1nkh1nkh1nkh1nkh1nkh1nkh1nkh1nkh1nm01nod1nvu1nvu1nvu1nvu1nvu1nvu1nvu1nvu1nvu1nvu1nvu1nvu1nvu1o0t1o0t1o1d1o1d1o2n1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1obb1oca1oc81oc81oc81och1oco1oct1oct1ofh\",\n            \"dataSource\": \"0\",\n            \"name\": \"Abano Terme|Abbadia Cerreto|Abbadia Lariana|Abbadia San Salvatore|Abbasanta|Abbateggio|Abbiategrasso|Abriola|Acate|Accadia|Acceglio|Accettura|Acciano|Accumoli|Acerenza|Cermes|Acerno|Acerra|Aci Bonaccorsi|Aci Castello|Aci Catena|Acireale|Aci Santantonio|Acquafondata|Acquaformosa|Acquafredda|Acqualagna|Acquanegra Sul Chiese|Acquanegra Cremonese|Acquapendente|Acquappesa|Acquaro|Acquasanta Terme|Acquasparta|Acquaviva Picena|Acquaviva Delle Fonti|Acquaviva Platani|Acquaviva Collecroce|Acquaviva Disernia|Acqui Terme|Acri|Acuto|Adelfia|Adrano|Adrara San Martino|Adrara San Rocco|Adria|Adro|Affi|Affile|Afragola|Africo|Agazzano|Agerola|Aggius|Agira|Agliana|Agliano Terme|Aglie|Agna|Agnadello|Agnana Calabra|Agnone|Villa Latina|Agnosine|Agordo|Agosta|Agra|Agrate Brianza|Agrate Conturbia|Agrigento|Agropoli|Agugliano|Agugliaro|Ayas|Aicurzio|Aidomaggiore|Aidone|Aielli|Aiello Del Sabato|Aiello Calabro|Aiello Del Friuli|Aieta|Ailano|Ailoche|Aymavilles|Airasca|Airola|Airole|Airuno|Aisone|Ala Dei Sardi|Ala|Ala Di Stura|Alagna|Alagna Valsesia|Alanno|Alano Di Piave|Alassio|Alatri|Alba|Alba Adriatica|Albagiara|Albairate|Albanella|Albano Santalessandro|Albano Vercellese|Albano Di Lucania|Albano Laziale|Albaredo Arnaboldi|Albaredo Per San Marco|Albaredo Dadige|Albareto|Albaretto Della Torre|Albavilla|Albenga|Albera Ligure|Alberobello|Alberona|Albese Con Cassano|Albettone|Albi|Albiano Divrea|Albiano|Albiate|Albidona|Albignasego|Albinea|Albino|Albiolo|Albissola Marina|Albisola Superiore|Albizzate|Albonese|Albosaggia|Albugnano|Albuzzano|Alcamo|Alcara Li Fusi|Aldeno|Aldino|Ales|Alessandria Della Rocca|Alessandria|Alessandria Del Carretto|Alessano|Alezio|Alfano|Alfedena|Alfianello|Alfiano Natta|Alfonsine|Alghero|Algua|Ali|Alia|Aliano|Alice Bel Colle|Alice Castello|Alife|Ali Terme|Alimena|Aliminusa|Allai|Allein|Alleghe|Allerona|Alliste|Allumiere|Alme|Villa Dalme|Almenno San Bartolomeo|Almenno San Salvatore|Almese|Alonte|Alpette|Alpignano|Alseno|Alserio|Altamura|Altare|Altavilla Monferrato|Altavilla Irpina|Altavilla Milicia|Altavilla Silentina|Altavilla Vicentina|Altidona|Altilia|Altino|Altissimo|Altivole|Alto|Altofonte|Altomonte|Altopascio|Alviano|Alvignano|Alvito|Alzano Scrivia|Alzano Lombardo|Alzate Brianza|Amalfi|Amandola|Amantea|Amaro|Amaroni|Amaseno|Amato|Amatrice|Ambivere|Ameglia|Amelia|Amendolara|Ameno|Amorosi|Cortina Dampezzo|Ampezzo|Anacapri|Anagni|Ancarano|Ancona|Andali|Andalo Valtellino|Andalo|Andezeno|Andora|Andorno Micca|Andrano|Andrate|Andreis|Andretta|Andria|Andriano|Anela|Anfo|Angera|Anghiari|Angiari|Angolo Terme|Angri|Angrogna|Anguillara Veneta|Anguillara Sabazia|Annicco|Castello Di Annone|Annone Di Brianza|Annone Veneto|Anoia|Antegnate|Antey Saint Andre|Anterivo|La Magdeleine|Anticoli Corrado|Fiuggi|Antignano|Antillo|Antonimina|Antrodoco|Antrona Schieranco|Anversa Degli Abruzzi|Anzano Del Parco|Anzano Di Puglia|Anzi|Anzio|Anzola Dellemilia|Anzola Dossola|Aosta|Apecchio|Apice|Apiro|Apollosa|Appiano Sulla Strada Del Vino|Appiano Gentile|Appignano|Appignano Del Tronto|Aprica|Apricale|Apricena|Aprigliano|Aprilia|Aquara|Aquila Darroscia|Laquila|Aquileia|Aquilonia|Aquino|Aradeo|Aragona|Aramengo|Arba|Tortoli|Arborea|Arborio|Arbus|Arcade|Arce|Arcene|Arcevia|Archi|San Nicolo Darcidano|Arcidosso|Arcinazzo Romano|Arcisate|Arco|Arcola|Arcole|Arconate|Arcore|Arcugnano|Ardara|Ardauli|Ardenno|Ardesio|Ardore|Arena|Arena Po|Arenzano|Arese|Arezzo|Argegno|Argelato|Argenta|Argentera|Arguello|Argusto|Ari|Ariano Irpino|Ariano Nel Polesine|Ariccia|Arielli|Arienzo|Arignano|Aritzo|Arizzano|Arlena Di Castro|Arluno|Armeno|Armento|Armo|Armungia|Arnara|Arnasco|Arnad|Arnesano|Arola|Arona|Arosio|Arpaia|Arpaise|Arpino|Arqua Petrarca|Arqua Polesine|Arquata Scrivia|Arquata Del Tronto|Arre|Arrone|Arzago Dadda|Arsago Seprio|Arsie|Arsiero|Arsita|Arsoli|Arta Terme|Artegna|Artena|Artogne|Arvier|Arzachena|Arzana|Arzano|Arzergrande|Arzignano|Ascea|Asciano|Ascoli Piceno|Ascoli Satriano|Ascrea|Asiago|Asigliano Vercellese|Asigliano Veneto|Sinalunga|Asola|Asolo|Casperia|Assago|Assemini|Assisi|Asso|Assolo|Assoro|Asti|Asuni|Ateleta|Atella|Atena Lucana|Atessa|Atina|Atrani|Atri|Atripalda|Attigliano|Attimis|Atzara|Augusta|Auletta|Aulla|Aurano|Aurigo|Auronzo Di Cadore|Ausonia|Austis|Avegno|Avelengo|Avella|Avellino|Averara|Aversa|Avetrana|Avezzano|Aviano|Aviatico|Avigliana|Avigliano|Avio|Avise|Avola|Avolasca|Azeglio|Azzanello|Azzano Dasti|Azzano San Paolo|Azzano Mella|Azzano Decimo|Azzate|Azzio|Azzone|Baceno|Bacoli|Badalucco|Badia|Badia Pavese|Badia Polesine|Badia Calavena|Badia Tedalda|Badolato|Bagaladi|Bagheria|Bagnacavallo|Bagnaria|Bagnara Di Romagna|Bagnara Calabra|Bagnaria Arsa|Bagnasco|Bagnatica|Bagni Di Lucca|Montecatini Terme|San Giuliano Terme|Bagno A Ripoli|Bagno Di Romagna|Bagnoli Irpino|Bagnoli Del Trigno|Bagnoli Di Sopra|Bagnolo Mella|Bagnolo Cremasco|Bagnolo Piemonte|Bagnolo Del Salento|Bagnolo In Piano|Bagnolo Di Po|Bagnolo San Vito|Bagnone|Bagnoregio|Bagolino|Baia E Latina|Baiano|Bajardo|Bairo|Baiso|Balangero|Baldichieri Dasti|Baldissero Dalba|Baldissero Canavese|Baldissero Torinese|Balestrate|Balestrino|Ballabio|Ballao|Balme|Balmuccia|Balocco|Balsorano|Balvano|Balzola|Banari|Banchette|Villa Verde|Bannio Anzino|Banzi|Baone|Baradili|Baragiano|Baranello|Barano Dischia|Baranzate|Barasso|Baratili San Pietro|Barbania|Barbara|Barbarano Romano|Barbaresco|Barbariga|Barbata|Barberino Di Mugello|Barbianello|Barbiano|Barbona|Barcellona Pozzo Di Gotto|Barcis|Bard|Bardello|Bardi|Bardineto|Bardolino|Bardonecchia|Bareggio|Barengo|Baressa|Barete|Barga|Bargagli|Barge|Barghe|Bari|Bari Sardo|Bariano|Baricella|Barile|Barisciano|Barlassina|Barletta|Barni|Barolo|Barone Canavese|Baronissi|Barrafranca|Barrali|Barrea|Barumini|Barzago|Barzana|Barzano|Barzio|Basaluzzo|Bascape|Baschi|Basciano|Baselga Di Pine|Baselice|Basiano|Basico|Basiglio|Basiliano|Vasanello|Bassano Bresciano|Bassano Del Grappa|Bassano Romano|Tronzano Lago Maggiore|Bassano In Teverina|Bassiano|Bassignana|Bastia Mondovi|Bastia Umbra|Bastida Pancarana|Bastiglia|Battaglia Terme|Battifollo|Battipaglia|Battuda|Baucina|Boville Ernica|Bauladu|Baunei|Baveno|Bedero Valcuvia|Bedizzole|Bedollo|Bedonia|Bedulita|Bee|Beinasco|Beinette|Belcastro|Belfiore|Belforte Monferrato|Belforte Del Chienti|Belforte Allisauro|Belgioioso|Belgirate|Bella|Bellano|Bellante|Bellaria Igea Marina|Bellegra|Bellino|Bellinzago Lombardo|Bellinzago Novarese|Bellona|Bellosguardo|Belluno|Bellusco|Belmonte Piceno|Belmonte Del Sannio|Belmonte Calabro|Belmonte Castello|Belmonte Mezzagno|Belmonte In Sabina|Belpasso|Belsito|Belvedere Ostrense|Belveglio|Lizzano In Belvedere|Belvedere Di Spinello|Belvedere Marittimo|Belvedere Langhe|Belvi|Bema|Bene Lario|Bene Vagienna|Benestare|Benetutti|Benevello|Benevento|Benna|Bentivoglio|Berbenno|Berbenno Di Valtellina|Berceto|Berchidda|Beregazzo Con Figliaro|Bereguardo|Bergamasco|Bergamo|Bergantino|Bergeggi|Bergolo|Berlingo|Bernalda|Bernareggio|Bernate Ticino|Bernezzo|Bertinoro|Bertiolo|Bertonico|Berzano Di San Pietro|Berzano Di Tortona|Berzo San Fermo|Berzo Demo|Berzo Inferiore|Besana In Brianza|Besano|Besate|Besenello|Besenzone|Besnate|Besozzo|Bessude|Bettola|Bettona|Beura Cardezza|Bevagna|Beverino|Bevilacqua|Biancavilla|Bianchi|Bianco|Biandrate|Biandronno|Bianzano|Bianze|Bianzone|Biassono|Bibbiano|Bibbiena|Bibbona|Bibiana|Biccari|Bicinicco|Bidoni|Blera|Biella|Bienno|Bieno|Bientina|Binago|Binasco|Binetto|Bioglio|Bionaz|Bione|Birori|Bisaccia|Bisacquino|Bisceglie|Bisegna|Bisenti|Bisignano|Bistagno|Bisuschio|Bitetto|Bitonto|Bitritto|Bitti|Bivona|Bivongi|Bizzarone|Bleggio Superiore|Blello|Blessagno|Blevio|Boara Pisani|Bobbio|Bobbio Pellice|Boca|Bocchigliero|Boccioleto|Bocenago|Bodio Lomnago|Boffalora Dadda|Boffalora Sopra Ticino|Bogliasco|Bognanco|Bogogno|Bojano|Boissano|Bolano|Bolgare|Bollate|Bollengo|Nova Siri|Bologna|Bolognano|Bolognetta|Bolognola|Bolotana|Bolsena|Boltiere|Bolzano|Bolzano Novarese|Bolzano Vicentino|Bomarzo|Bomba|Bompensiere|Bompietro|Bomporto|Bonarcado|Bonassola|Bonate Sotto|Bonate Sopra|Bonavigo|Bondeno|Bondone|Bonea|Bonefro|Bonemerse|Bonifati|Bonito|Bonnanaro|Bono|Bonorva|Bonvicino|Borbona|Borca Di Cadore|Bordano|Bordighera|Bordolano|Bore|Boretto|Borgarello|Borgaro Torinese|Borgetto|Borghetto Di Vara|Borghetto Darroscia|Borghetto Lodigiano|Borgo Velino|Borghetto Di Borbera|Borghetto Santo Spirito|Borghi|Borgia|Borgiallo|Borgio Verezzi|Borgo Valsugana|Borgo A Mozzano|Borgorose|Borgo Dale|Borgo Di Terzo|Motteggiana|Suardi|Borgofranco Divrea|Borgolavezzaro|Borgo San Giovanni|Borgomale|Borgomanero|Borgomaro|Borgomasino|Borgone Susa|Borgonovo Val Tidone|Borgo Pace|Borgo Priolo|Borgoratto Alessandrino|Borgoratto Mormorolo|Borgoricco|Borgo San Dalmazzo|Fidenza|Borgo San Giacomo|Borgo San Lorenzo|Borgo San Martino|Borgo San Siro|Borgosatollo|Borgosesia|Borgo Val Di Taro|Borgo Ticino|Borgo Tossignano|Borgo Vercelli|Bormida|Bormio|Bornasco|Borno|Boroneddu|Borore|Borrello|Borriana|Borso Del Grappa|Bortigali|Bortigiadas|Borutta|Borzonasca|Bosa|Bosaro|Boschi Santanna|Bosco Marengo|Bosco Chiesanuova|Bosconero|Boscoreale|Boscotrecase|Bosia|Bosio|Bosisio Parini|Bosnasco|Bossico|Bossolasco|Botricello|Botrugno|Bottanuco|Botticino|Bottidda|Bova|Bovalino|Bova Marina|Bovegno|Boves|Bovezzo|Bovino|Bovisio Masciago|Bovolenta|Bovolone|Bozzole|Bozzolo|Bra|Bracca|Bracciano|Bracigliano|Braies|Brallo Di Pregola|Brancaleone|Brandico|Brandizzo|Branzi|Braone|Brebbia|Breda Di Piave|Castelverde|Bregano|Breganze|Bregnano|Brembate|Brembate Di Sopra|Brembio|Breme|Brendola|Brenna|Brennero|Breno|Brenta|Brentino Belluno|Brentonico|Brenzone Sul Garda|Brescello|Brescia|Bresimo|Bressana Bottarone|Bressanone|Bressanvido|Bresso|Brez|Brezzo Di Bedero|Briaglia|Briatico|Bricherasio|Brienno|Brienza|Briga Alta|Briga Novarese|Brignano Gera Dadda|Brignano Frascata|Brindisi|Brindisi Montagna|Brinzio|Briona|Brione|Briosco|Brisighella|Brissago Valtravaglia|Brissogne|Brittoli|Brivio|Broccostella|Brogliano|Brognaturo|Brolo|Brondello|Broni|Bronte|Bronzolo|Brossasco|Brosso|Brovello Carpugnino|Brozolo|Brugherio|Brugine|Brugnato|Brugnera|Bruino|Brumano|Brunate|Brunello|Brunico|Bruno|Brusaporto|Brusasco|Brusciano|Brusimpiano|Brusnengo|Brusson|Bruzolo|Bruzzano Zeffirio|Bubbiano|Bubbio|Buccheri|Bucchianico|Bucciano|Buccinasco|Buccino|Bucine|Budduso|Budoia|Budoni|Budrio|Buggerru|Buggiano|Buglio In Monte|Bugnara|Buguggiate|Buja|Bulciago|Bulgarograsso|Bultei|Bulzi|Buonabitacolo|Buonalbergo|Montebello Sul Sangro|Buonconvento|Buonvicino|Burago Di Molgora|Burcei|Burgio|Burgos|Buriasco|Burolo|Buronzo|Busachi|Busalla|Busano|Busca|Buscate|Buscemi|Buseto Palizzolo|Busnago|Bussero|Busseto|Bussi Sul Tirino|Busso|Bussolengo|Bussoleno|Busto Arsizio|Busto Garolfo|Butera|Buti|Buttapietra|Buttigliera Alta|Buttigliera Dasti|Buttrio|San Paolo Dargon|Cabella Ligure|Castello Cabiaglio|Cabiate|Cabras|Caccamo|Poggio Sannita|Caccuri|Cadegliano Viconago|Cadelbosco Di Sopra|Cadeo|Caderzone Terme|Cadoneghe|Cadorago|Caerano Di San Marco|Cafasse|Caggiano|Cagli|Cagliari|Caglio|Cagnano Varano|Cagnano Amiterno|Cagno|Caianello|Caiazzo|Caines|Caino|Caiolo|Cairano|Cairate|Cairo Montenotte|Caivano|Calabritto|Calalzo Di Cadore|Calamandrana|Calamonaci|Calangianus|Calanna|Calasca Castiglione|Calascibetta|Calascio|Calasetta|Calatabiano|Calatafimi Segesta|Lungavilla|Calcata|Calceranica Al Lago|Calci|Calciano|Calcinaia|Calcinate|Calcinato|Calcio|Calco|Caldaro Sulla Strada Del Vino|Caldarola|Calderara Di Reno|Caldes|Caldiero|Caldogno|Caldonazzo|Calendasco|Calenzano|Calestano|Calice Ligure|Calice Al Cornoviglio|Calimera|Calitri|Calizzano|Callabiana|Calliano|Calliano|Calolziocorte|Calopezzati|Calosso|Caloveto|Caltabellotta|Caltagirone|Caltanissetta|Caltavuturo|Caltignaga|Calto|Caltrano|Calusco Dadda|Caluso|Calvagese Della Riviera|Calvanico|Calvatone|Calvello|Calvene|Calvenzano|Calvera|Calvi|Calvi Risorta|Calvi Dellumbria|Calvignano|Calvignasco|Calvisano|Calvizzano|Camagna Monferrato|Camaiore|Camandona|Camastra|Cambiago|Cambiano|Cambiasca|Camburzano|Santelena Sannita|Camerana|Camerano|Camerano Casasco|Camerata Picena|Camerata Cornello|Camerata Nuova|Cameri|Camerino|Camerota|Camigliano|Camini|Camino|Camino Al Tagliamento|Camisano|Camisano Vicentino|Cammarata|Camogli|Chamois|Campagna|Campagna Lupia|Castel Campagnano|Campagnano Di Roma|Campagnatico|Campagnola Cremasca|Campagnola Emilia|Campana|Camparada|Campegine|Campello Sul Clitunno|Campertogno|Campi Salentina|Campi Bisenzio|Campiglia Marittima|Valprato Soana|Campiglia Dei Berici|Campiglione Fenile|Campione Ditalia|Campitello Di Fassa|Campli|Campo Calabro|Campobasso|Campobello Di Licata|Campobello Di Mazara|Campochiaro|Campodarsego|Campodenno|Campo Di Giove|Campodimele|Campodipietra|Campo Di Trens|Campodolcino|Campodoro|Campofelice Di Roccella|Campofelice Di Fitalia|Campofilone|Campofiorito|Campoformido|Campofranco|Campo Ligure|Campogalliano|Champorcher|Campolattaro|Campoli Del Monte Taburno|Campoli Appennino|Campolieto|Campolongo Maggiore|Campomaggiore|Campomarino|Campomorone|Campo Nellelba|Camponogara|Campora|Camporeale|Camporgiano|Camporosso|Camporotondo Etneo|Camporotondo Di Fiastrone|Camposampiero|Campo San Martino|Camposano|Camposanto|Campospinoso|Campotosto|Campo Tures|Camugnano|Canale|Canale Dagordo|Canale Monterano|Canal San Bovo|Canaro|Canazei|Cancellara|Cancello Ed Arnone|Canda|Candela|Candelo|Candia Lomellina|Candia Canavese|Candiana|Candida|Candidoni|Candiolo|Canegrate|Canelli|Orvinio|Canepina|Caneva|Canicatti|Canicattini Bagni|Canino|Canischio|Canistro|Canna|Cannalonga|Cannara|Cannero Riviera|Canneto Sulloglio|Canneto Pavese|Cannobio|Cannole|Canolo|Canonica Dadda|Canosa Di Puglia|Canosa Sannita|Canosio|Cansano|Cantagallo|Cantalice|Cantalupa|Cantalupo Ligure|Cantalupo Nel Sannio|Cantalupo In Sabina|Mandela|Cantarana|Cantello|Canterano|Cantiano|Cantoira|Cantu|Canzano|Canzo|Caorle|Caorso|Capaccio Paestum|Capaci|Capalbio|Capannoli|Capannori|Capena|Capergnanica|Capestrano|Capiago Intimiano|Capistrano|Capistrello|Capitignano|Capizzi|Capizzone|Ponte Nelle Alpi|Capodimonte|Capo Di Ponte|Capo Dorlando|Capodrise|Capoliveri|Capolona|Caponago|Caporciano|Caposele|Capoterra|Capovalle|Cappadocia|Cappella Maggiore|Cappella Cantone|Cappella De Picenardi|Cappelle Sul Tavo|Capracotta|Capraia E Limite|Capraia Isola|Capralba|Capranica Prenestina|Capranica|Marzabotto|Caprarica Di Lecce|Caprarola|Caprauna|Caprese Michelangelo|Caprezzo|Capri Leone|Capri|Capriana|Capriano Del Colle|Capriata Dorba|Capriate San Gervasio|Capriati A Volturno|Caprie|Capriglia Irpina|Capriglio|Caprile|Caprino Veronese|Caprino Bergamasco|Capriolo|Capriva Del Friuli|Capua|Capurso|Caraffa Di Catanzaro|Caraffa Del Bianco|Caraglio|Caramagna Piemonte|Caramanico Terme|Carano|Carapelle|Carapelle Calvisio|Carasco|Carassai|Carate Brianza|Carate Urio|Caravaggio|Caravate|Caravino|Caravonica|Carbognano|Carbonara Scrivia|Villasimius|Carbonara Di Nola|Carbonara Al Ticino|Carbonate|Carbone|Carbonera|Carbonia|Carcare|Carceri|Carcoforo|Cardano Al Campo|Carde|Cardeto|Cardinale|Cardito|Careggine|Carema|Carenno|Carentino|Careri|Caresana|Caresanablot|Carezzano|Carfizzi|Cargeghe|Cariati|Carife|Carignano|Carimate|Carinaro|Carini|Carinola|Carisio|Carisolo|Carlantino|Carlazzo|Carlentini|Carlino|Carloforte|Carlopoli|Carmagnola|Carmiano|Carmignano|Carmignano Di Brenta|Carnago|Carnate|Cornedo Allisarco|Carobbio Degli Angeli|Carolei|Carona|Caronia|Caronno Pertusella|Caronno Varesino|Carosino|Carovigno|Carovilli|Carpaneto Piacentino|Carpanzano|Carpegna|Carpenedolo|Carpeneto|Carpi|Carpiano|Carpignano Salentino|Carpignano Sesia|Cura Carpignano|Carpineti|Carpineto Sinello|Carpineto Della Nora|Carpineto Romano|Carpino|Carpinone|Carrara|Carre|Carrega Ligure|Carro|Carrodano|Carrosio|Carru|Carsoli|Cartigliano|Cartignano|Cartoceto|Cartosio|Cartura|Carugate|Carugo|Carunchio|Carvico|Carzano|Casabona|Casacalenda|Casacanditella|Casagiove|Casalanguida|Casalattico|Casalbeltrame|Casalbordino|Casalbore|Casalborgone|Casalbuono|Casalbuttano Ed Uniti|Casal Cermelli|Casalciprano|Casal Di Principe|Casalduni|Casale Litta|Casale Corte Cerro|Casale Di Scodosia|Casale Marittimo|Casale Sul Sile|Casalecchio Di Reno|Casale Cremasco Vidolasco|Casaleggio Boiro|Casaleggio Novara|Casale Monferrato|Casaleone|Casaletto Lodigiano|Casaletto Spartano|Casaletto Ceredano|Casaletto Di Sopra|Casaletto Vaprio|Casalfiumanese|Casalgrande|Casalgrasso|Casal Velino|Casalincontrada|Casalino|Casalmaggiore|Casalmaiocco|Casalmorano|Casalmoro|Casalnoceto|Villapiana|Casalnuovo Monterotaro|Casalnuovo Di Napoli|San Paolo Albanese|Casaloldo|Casalpusterlengo|Casalromano|Casalserugo|Pozzaglio Ed Uniti|Trinitapoli|Casaluce|Casalvecchio Di Puglia|Casalvecchio Siculo|Casalvieri|Casalvolone|Casalzuigno|Casamarciano|Casamassima|Casamicciola Terme|Casandrino|Casanova Lerrone|Casanova Elvo|Casanova Lonati|Casape|Casapinta|Casaprota|Casapulla|Casarano|Casargo|Casarile|Casarza Ligure|Casarsa Della Delizia|Casasco|Casatenovo|Casatisma|Casavatore|Casazza|Cascia|Casciago|Cascina|San Giacomo Vercellese|Cascinette Divrea|Casei Gerola|Caselette|Casella|Caselle Lurani|Caselle In Pittari|Caselle Torinese|Caselle Landi|Scandicci|Caserta|Casier|Casignana|Casina|Castelsilano|Castel Di Casio|Casirate Dadda|Caslino Derba|Casnate Con Bernate|Casnigo|Casola In Lunigiana|Casola Di Napoli|Casola Valsenio|Casole Delsa|Casoli|Casorate Sempione|Casorate Primo|Casorezzo|Casoria|Casorzo|Caspoggio|Cassacco|Cassago Brianza|Cassano Irpino|Cassano Delle Murge|Cassano Valcuvia|Cassano Allionio|Cassano Dadda|Cassano Magnago|Cassaro|Cassiglio|Pero|Cassina De Pecchi|Cassina Rizzardi|Cassinasco|Cassina Valsassina|Cassine|Cassinelle|Cassinetta Di Lugagnano|Cassino|Cassola|Cassolnovo|Castel Castagna|Castagnaro|Castagneto Carducci|Castagneto Po|Castagnito|Castagnole Monferrato|Castagnole Piemonte|Castagnole Delle Lanze|Castana|Castellumberto|Castano Primo|Casteggio|Castegnato|Castegnero|Castelbaldo|Castel Baronia|Castelbelforte|Castelbellino|Castelbello Ciardes|Castelbianco|Castel Boglione|Castel Bolognese|Castelbottaccio|Castelbuono|Castelcivita|Servigliano|Castelcovati|Castelcucco|Casteldaccia|Castel Daiano|Castel Dario|Castel Dazzano|Castelli Calepio|Casteldelci|Casteldelfino|Castel Del Giudice|Castel Del Monte|Castel Del Piano|Castel Del Rio|Casteldidone|Castel Di Ieri|Castel Di Iudica|Castel Di Lama|Castel Di Lucio|Castel Di Sangro|Castel Di Sasso|Castel Di Tora|Castelfidardo|Castelfiorentino|Castel Focognano|Castelfondo|Castelforte|Castelfranci|Castelfranco In Miscano|Castelfranco Emilia|Castrolibero|Castel Vittorio|Castelfranco Veneto|Castelfranco Di Sotto|Castel Frentano|Castel Gabbiano|Castel Gandolfo|Castel Giorgio|Castel Goffredo|Castelgomberto|Castelgrande|Castel Guelfo Di Bologna|Castelguglielmo|Castelguidone|Castellabate|Castellafiume|Castellalfero|Castellalto|Castellammare Di Stabia|Castellammare Del Golfo|Castellamonte|Castellana Grotte|Castellana Sicula|Castellaneta|Castellania Coppi|Castellanza|Castellarano|Castellar Guidobono|Castellaro|Castellarquato|Castellazzara|Castellazzo Bormida|Castellazzo Novarese|Castelleone Di Suasa|Castelleone|Castellero|Castelletto Cervo|Castelletto Derro|Castelletto Di Branduzzo|Castelletto Dorba|Castelletto Merli|Castelletto Molina|Castelletto Monferrato|Castelletto Stura|Castelletto Sopra Ticino|Castelletto Uzzone|Castelli|Castellina In Chianti|Castellinaldo Dalba|Castellina Marittima|Castellino Del Biferno|Castellino Tanaro|Castelliri|Castello Del Matese|Castelveccana|Castel Condino|Castello Dagogna|Castello Dargile|Castello Dellacqua|Castello Di Brianza|Castello Di Cisterna|Castello Molina Di Fiemme|Castello Di Godego|Castello Tesino|Castellucchio|Castelmauro|Castelluccio Dei Sauri|Castelluccio Inferiore|Castelverrino|Castelluccio Superiore|Castelluccio Valmaggiore|Castel Madama|Castel Maggiore|Castelmagno|Castelmarte|Castelmassa|Castel Mella|Castelmezzano|Castelmola|Castel Morrone|Castelnovetto|Castelnuovo Di Ceva|Castelnovo Bariano|Castelnuovo|Castelnovo Del Friuli|Castelnovo Di Sotto|Castelnovo Ne Monti|Castelnuovo Bozzente|Castelnuovo Della Daunia|Castelnuovo Parano|Castelnuovo Di Farfa|Castelnuovo Del Garda|Castelnuovo Belbo|Castelnuovo Berardenga|Castelnuovo Bocca Dadda|Castelnuovo Bormida|Castelnuovo Calcea|Castelnuovo Cilento|Castelnuovo Don Bosco|Castelnuovo Di Conza|Castelnuovo Di Garfagnana|Castelnuovo Di Porto|Castelnuovo Magra|Castelnuovo Nigra|Castelnuovo Rangone|Castelnuovo Scrivia|Castelnuovo Di Val Di Cecina|Castelpagano|Castelpetroso|Castelpizzuto|Castelplanio|Castelpoto|Castelraimondo|Castel Ritaldi|Castel Rocchero|Castelrotto|Castel Rozzone|Castel San Giorgio|Castel San Giovanni|Castel San Lorenzo|Castel San Niccolo|Castel San Pietro Terme|Castel San Pietro Romano|Castelsantangelo Sul Nera|Castel Santangelo|Castel Santelia|Castel San Vincenzo|Castelsaraceno|Castelsardo|Castelseprio|Castelspina|Casteltermini|Castelvecchio Di Rocca Barbena|Castelvecchio Calvisio|Castelvecchio Subequo|Castelvenere|Verres|Castelvetere Sul Calore|Castelvetere In Val Fortore|Caulonia|Castelvetrano|Castelvetro Di Modena|Castelvetro Piacentino|Castel Viscardo|Castelvisconti|Castel Volturno|Castenaso|Castenedolo|Chatillon|Castiglione Dei Pepoli|Castiglione Di Sicilia|Castiglione Messer Marino|Castiglione Olona|Castiglione Cosentino|Castiglione Chiavarese|Castiglione Di Garfagnana|Castiglione Dadda|Castiglione Del Genovesi|Castiglione Torinese|Castiglione A Casauria|Castiglione Del Lago|Castiglione Della Pescaia|Colledara|Castiglione Delle Stiviere|Castiglione Dorcia|Castiglione Falletto|Castiglione In Teverina|Castiglione Messer Raimondo|Castiglione Tinella|Castiglion Fibocchi|Castiglion Fiorentino|Castignano|Castilenti|Castino|Castione Della Presolana|Castione Andevenno|Castions Di Strada|Castiraga Vidardo|Casto|Castorano|Castrezzato|Castri Di Lecce|Castrignano De Greci|Castrignano Del Capo|Castro|Castro Dei Volsci|Castrocaro Terme E Terra Del Sole|Castrocielo|Castrofilippo|Enna|Castronno|Castronovo Di Sicilia|Castronuovo Di Santandrea|Castropignano|Castroreale|Castroregio|Castrovillari|Catania|Catanzaro|Catenanuova|Catignano|Cattolica Eraclea|Cattolica|Cautano|Cava Manara|Cava De Tirreni|Cavaglia|Cavaglietto|Cavaglio Dagogna|Cavagnolo|Cavaion Veronese|Cavalese|Cavallerleone|Cavallermaggiore|Cavallino|Cavallirio|Cavareno|Cavargna|Cavaria Con Premezzo|Cavarzere|Cavaso Del Tomba|Cavasso Nuovo|Cavatore|Jesolo|Cavazzo Carnico|Cave|Cavedago|Cavedine|Cavenago Dadda|Cavenago Di Brianza|Cavernago|Cavezzo|Cavizzana|Cavour|Cavriago|Cavriana|Cavriglia|Cazzago San Martino|Cazzago Brabbia|Cazzano Santandrea|Cazzano Di Tramigna|Ceccano|Cecima|Cecina|Cedegolo|Cedrasco|Cefala Diana|Cefalu|Ceggia|Ceglie Messapica|Celano|Celenza Sul Trigno|Celenza Valfortore|Celico|Cella Monte|Cella Dati|Cellamare|Cellara|Cellarengo|Cellatica|Celle Enomondo|Celle Di Macra|Celle Di San Vito|Celle Ligure|Celle Di Bulgheria|Celleno|Cellere|Cellino San Marco|Cellino Attanasio|Cenadi|Cenate Sopra|Cenate Sotto|Cencenighe Agordino|Cene|Ceneselli|Cengio|Centallo|Cento|Centola|Centuripe|Centrache|Cepagatti|Ceppaloni|Ceppo Morelli|Ceprano|Cerami|Ceranesi|Cerano Dintelvi|Cerano|Ceranova|Ceraso|Cercemaggiore|Cercenasco|Cercepiccola|Cerchiara Di Calabria|Cerchio|Cercino|Cercivento|Cercola|Cerda|Ceres|Cerea|Ceregnano|Cerenzia|Ceresara|Cereseto|Ceresole Alba|Ceresole Reale|Cerete|Cerreto Grue|Ceretto Lomellina|Cergnago|Ceriale|Ceriana|Ceriano Laghetto|Cerignale|Cerignola|Cerisano|Cermenate|Cermignano|Cerreto Laziale|Cernobbio|Cernusco Lombardone|Cernusco Sul Naviglio|Cerreto Desi|Cerreto Sannita|Cerreto Di Spoleto|Cerreto Dasti|Cerreto Guidi|Cerretto Langhe|Cerrina Monferrato|Cerrione|Cerro Tanaro|Cerro Al Volturno|Cerro Al Lambro|Cerro Maggiore|Cerro Veronese|Cersosimo|Certaldo|Certosa Di Pavia|Cerva|Cervara Di Roma|Cervarese Santa Croce|Cervaro|Cervasca|Cervatto|Cerveno|Cervere|Cervesina|Cerveteri|Cervia|Cervicati|Cervignano Dadda|Cervignano Del Friuli|Cervinara|Cervino|Cervo|Cerzeto|Cesa|Cesana Brianza|Cesana Torinese|Cesano Boscone|Cesano Maderno|Cesara|Cesaro|Cesate|Cesena|Cesenatico|Cesinali|Cesiomaggiore|Cesio|Cessalto|Cessaniti|Cessapalombo|Cessole|Cetara|Ceto|Cetona|Cetraro|Ceva|Cevo|Challand Saint Anselme|Challand Saint Victor|Chambave|Champdepraz|Charvensod|Cherasco|Cheremule|Chialamberto|Chiampo|Chianche|Chianciano Terme|Chianni|Chianocco|Chiaramonte Gulfi|Chiaramonti|Chiarano|Chiaravalle|Chiaravalle Centrale|Chiari|Chiaromonte|Chiauci|Chiavari|Chiavenna|Chiaverano|Chienes|Chieri|Chiesa In Valmalenco|Chiesanuova|Chies Dalpago|Chiesina Uzzanese|Chieti|Chieuti|Chieve|Chignolo Disola|Chignolo Po|Chioggia|Chiomonte|Chions|Chiopris Viscone|Chitignano|Chiuduno|Chiuppano|Chiuro|Chiusa|Chiusa Di Pesio|Chiusa Sclafani|Chiusa Di San Michele|Chiusaforte|Chiusanico|Chiusano Dasti|Chiusano Di San Domenico|Chiusavecchia|Chiusdino|Chiusi|Chiusi Della Verna|Chivasso|Cianciana|Canossa|Crocetta Del Montello|Cibiana Di Cadore|Cicagna|Cicala|Cicciano|Cicerale|Ciciliano|Cicognolo|Ciconio|Cigliano|Ciglie|Cigognola|Cigole|Cilavegna|Cimadolmo|Cimbergo|Cimina|Ciminna|Cimitile|Tavernole Sul Mella|Cimolais|Cimone|Cinaglio|Cineto Romano|Cingia De Botti|Cingoli|Cinigiano|Cinisello Balsamo|Cinisi|Cino|Cinquefrondi|Cintano|Cinte Tesino|Cinto Euganeo|Cinto Caomaggiore|Cinzano|Ciorlano|Santa Maria Del Cedro|Cipressa|Circello|Cirie|Cirigliano|Cirimido|Ciro|Ciro Marina|Cis|Cisano Bergamasco|Cisano Sul Neva|Ciserano|Cislago|Cisliano|Cison Di Valmarino|Cissone|Cisterna Dasti|Cisterna Di Latina|Cisternino|Citerna|Cittadella|Citta Della Pieve|Citta Di Castello|Cittaducale|Cittanova|Cittareale|Citta Santangelo|Cittiglio|Civate|Civezza|Civezzano|Civiasco|Cividale Del Friuli|Cividate Al Piano|Cividate Camuno|Civita|Civitacampomarano|Civita Castellana|Civita Dantino|Lanuvio|Civitaluparella|Civitanova Del Sannio|Civitanova Marche|Civitaquana|Duronia|Civitavecchia|Civitella In Val Di Chiana|Civitella Messer Raimondo|Civitella Di Romagna|Civitella Alfedena|Civitella Casanova|Civitella Dagliano|Civitella Del Tronto|Civitella Paganico|Civitella Roveto|Civitella San Paolo|Civo|Claino Con Osteno|Ubiale Clanezzo|Claut|Clauzetto|Clavesana|Claviere|Cles|Cleto|Clivio|Cloz|Clusone|Coassolo Torinese|Coazze|Coazzolo|Coccaglio|Cocconato|Cocquio Trevisago|Cocullo|Codevigo|Codevilla|Codigoro|Codogne|Codogno|Codroipo|Codrongianos|Coggiola|Cogliate|Cogne|Cogoleto|Cogollo Del Cengio|Cogorno|Colazza|Colere|Colfelice|Coli|Colico|Collalto Sabino|Collarmele|Collazzone|Colle Sannita|Colle Di Val Delsa|Colle Umberto|Collebeato|Colle Brianza|Collecchio|Collecorvino|Colle Danchise|Colledimacine|Colledimezzo|Colle Di Tora|Colleferro|Collegiove|Collegno|Collelongo|Collepardo|Collepasso|Collepietro|Colleretto Castelnuovo|Colleretto Giacosa|Collesalvetti|Colle San Magno|Collesano|Colle Santa Lucia|Colletorto|Collevecchio|Colli Del Tronto|Colli A Volturno|Colliano|Colli Sul Velino|Collinas|Collio|Collobiano|Colloredo Di Monte Albano|Colmurano|Colobraro|Cologna Veneta|Cologne|Cologno Al Serio|Cologno Monzese|Colognola Ai Colli|Colonna|Colonnella|Colonno|Colorina|Colorno|Colosimi|Colturano|Colzate|Comabbio|Comacchio|Comano|Comazzo|Comeglians|Santo Stefano Di Cadore|Comelico Superiore|Comerio|Comezzano Cizzago|Comignago|Comiso|Comitini|Comiziano|Commessaggio|Commezzadura|Como|Compiano|Comunanza|Valsolda|Comun Nuovo|Cona|Conca Della Campania|Conca Dei Marini|Conca Casale|Concamarise|Concerviano|Concesio|Concordia Sagittaria|Concordia Sulla Secchia|Concorezzo|Condofuri|Condove|Condro|Conegliano|Confienza|Configni|Conflenti|Coniolo|Conselice|Conselve|Contessa Entellina|Contigliano|Contrada|Controguerra|Controne|Contursi Terme|Conversano|Conza Della Campania|Conzano|Copertino|Copiano|Copparo|Corana|Corato|Corbara|Corbetta|Corbola|Corchiano|Corciano|Cordenons|Cordignano|Cordovado|Coreglia Ligure|Coreglia Antelminelli|Coreno Ausonio|Corfinio|Cori|Coriano|Corigliano Dotranto|Corinaldo|Corio|Corleone|Corleto Perticara|Corleto Monforte|Courmayeur|Cormano|Cormons|Corna Imagna|Cornalba|Cornaredo|Cornate Dadda|Cornedo Vicentino|Cornegliano Laudense|Corneliano Dalba|Tarquinia|Corniglio|Corno Di Rosazzo|Corno Giovine|Cornovecchio|Cornuda|Morimondo|Correggio|Correzzana|Correzzola|Corrido|Corridonia|Corropoli|Corsano|Corsico|Corsione|Cortaccia Sulla Strada Del Vino|Cortale|Cortandone|Cortanze|Cortazzone|Corte Brugnatella|Corte De Cortesi Con Cignone|Corte De Frati|Corte Franca|Cortemaggiore|Cortemilia|Corteno Golgi|Cortenova|Cortenuova|Corte Palasio|Cortiglione|Cortina Sulla Strada Del Vino|Cortino|Cortona|Corvara|Corvara In Badia|Corvino San Quirico|Corzano|Coseano|Cosenza|Cosio Darroscia|Cosio Valtellino|Cosoleto|Cossano Canavese|Cossano Belbo|Cossato|Cosseria|Cossignano|Cossogno|Cossoine|Cossombrato|Costa Vescovato|Costa Valle Imagna|Costa Di Rovigo|Costabissara|Costacciaro|Costa De Nobili|Costa Di Mezzate|Costa Serina|Costa Masnaga|Costanzana|Costarainera|Costa Volpino|Costermano Sul Garda|Costigliole Dasti|Costigliole Saluzzo|Cotignola|Crotone|Cotronei|Cottanello|Covo|Cozzo|Craco|Crandola Valsassina|Cravagliana|Cravanzana|Craveggia|Creazzo|Crecchio|Credaro|Credera Rubbiano|Crema|Cremella|Cremenaga|Cremeno|Cremia|Cremolino|Cremona|Cremosano|Crescentino|Crespadoro|Crespiatica|Crespino|Cressa|Crevacuore|Crevalcore|Crevoladossola|Crispano|Crispiano|Crissolo|Crocefieschi|Crodo|Crognaleto|Cropalati|Cropani|Crosia|Crosio Della Valle|Crotta Dadda|Crova|Croviana|Crucoli|Cuasso Al Monte|Veronella|Cuccaro Vetere|Cucciago|Cuceglio|Cuggiono|Cugliate Fabiasco|Cuglieri|Cugnoli|Cumiana|Cumignano Sul Naviglio|Cunardo|Cuneo|Cunico|Cuorgne|Cupello|Cupra Marittima|Cupramontana|Curcuris|Cureggio|Curiglia Con Monteviasco|Curinga|Curino|Curno|Curon Venosta|Cursi|Curtarolo|Curtatone|Curti|Cusago|Cusano Mutri|Cusano Milanino|Cusino|Cusio|Custonaci|Cutro|Cutrofiano|Cuveglio|Cuvio|Daiano|Dairago|Dalmine|Dambel|Danta Di Cadore|Darfo Boario Terme|Dasa|Davagna|Daverio|Davoli|Dazio|Decimomannu|Decimoputzu|Decollatura|Dego|Deiva Marina|Delebio|Delia|Delianuova|Deliceto|Dello|Demonte|Denice|Denno|Dernice|Derovere|Deruta|Dervio|Desana|Desenzano Del Garda|Desio|Desulo|Diamante|Scigliano|Diano Dalba|Teggiano|Diano Arentino|Diano Castello|Diano Marina|Diano San Pietro|Dicomano|Dignano|Dinami|Dipignano|Diso|Divignano|Dizzasco|Dobbiaco|Doberdo Del Lago|Dogliani|Dogliola|Dogna|Dolce|Dolceacqua|Dolcedo|Dolegna Del Collio|Dolianova|San Dorligo Della Valle Dolina|Dolo|Dolzago|Domanico|Domaso|Domegge Di Cadore|Domicella|Domodossola|Domus De Maria|Domusnovas|Donnas|Donato|Dongo|Donori|Dorgali|Dorio|Dormelletto|Dorno|Dorzano|Dosolo|Dossena|Dosso Del Liro|Doues|Dovadola|Dovera|Dozza|Dragoni|Drapia|Drena|Drenchia|Dresano|Dro|Dronero|Druento|Druogno|Dualchi|Dubino|Dueville|Dugenta|Duino Aurisina|Dumenza|Duno|Durazzano|Dusino San Michele|Eboli|Edolo|Egna|Elice|Elini|Ello|Elmas|Elva|Emarese|Empoli|Endine Gaiano|Enego|Enemonzo|Entracque|Entratico|Envie|Episcopia|Eraclea|Erba|Erbe|Erbezzo|Erbusco|Erchie|Erice|Erli|Erto E Casso|Erve|Esanatoglia|Escalaplano|Escolca|Exilles|Esine|Esino Lario|Esperia|Esporlatu|Este|Esterzili|Etroubles|Eupilio|Fabbrica Curone|Fabbrico|Fabriano|Fabrica Di Roma|Fabrizia|Fabro|Faedis|Faedo Valtellino|Faedo|Faenza|Faeto|Fagagna|Faggeto Lario|Faggiano|Fagnano Castello|Fagnano Alto|Fagnano Olona|Fai Della Paganella|Faicchio|Falcade|Falciano Del Massico|Falconara Marittima|Falconara Albanese|Falcone|Faleria|Falerna|Falerone|Fallo|Faloppio|Falvaterra|Falzes|Fanano|Fanna|Fano|Fano Adriano|Fara Gera Dadda|Fara Olivana Con Sola|Fara Novarese|Fara In Sabina|Fara Filiorum Petri|Fara San Martino|Fara Vicentino|Fardella|Farigliano|Farindola|Farini|Farnese|Farra Disonzo|Farra Di Soligo|Fasano|Fascia|Fauglia|Faule|Favale Di Malvaro|Valsinni|Favara|Favignana|Favria|Orco Feglino|Feisoglio|Feletto|Felino|Felitto|Felizzano|Feltre|Fenegro|Fenestrelle|Fenis|Ferentillo|Ferentino|Ferla|Fermignano|Fermo|Ferno|Feroleto Antico|Feroleto Della Chiesa|Pianopoli|Ferrandina|Ferrara|Ferrara Di Monte Baldo|Ferrazzano|Ferrera Di Varese|Ferrera Erbognone|Moncenisio|Ferrere|Ferriere|Ferruzzano|Fraconalto|Fiamignano|Fiano Romano|Fiano|Fiastra|Fiave|Poggio San Vicino|Ficarazzi|Ficarolo|Ficarra|Ficulle|Fie Allo Sciliar|Fierozzo|Fiesco|Fiesole|Fiesse|Fiesso Umbertiano|Fiesso Dartico|Figino Serenza|Figline Vegliaturo|Gonnosno|Filacciano|Filadelfia|Filago|Filandari|Filattiera|Filettino|Filetto|Filiano|Filighera|Filignano|Filogaso|Filottrano|Finale Emilia|Finale Ligure|Fino Del Monte|Fino Mornasco|Fiorano Al Serio|Fiorano Modenese|Fiorano Canavese|Fiorenzuola Darda|Firenze|Firenzuola|Firmo|Fisciano|Fiumalbo|Fiumara|Fiume Veneto|Fiumedinisi|Fiumefreddo Di Sicilia|Fiumefreddo Bruzio|Fiuminata|Fivizzano|Flaibano|Flero|Floresta|Floridia|Florinas|Flumeri|Fluminimaggiore|Flussio|Fobello|Foggia|Foglianise|Fogliano Redipuglia|Foglizzo|Foiano Della Chiana|Foiano Di Val Fortore|Folgaria|Folignano|Foligno|Follina|Follo|Follonica|Fombio|Fondachelli Fantina|Fondi|Fondo|Fonni|Fontainemore|Fontana Liri|Fontanelice|Fontanafredda|Fontanarosa|Fontanella|Fontanellato|Fontanelle|Fontaneto Dagogna|Fontanetto Po|Fontanigorda|Fontanile|Fontaniva|Fonte|Fontecchio|Fontechiari|Fontegreca|Fonteno|Fontevivo|Fonzaso|Foppolo|Forano|San Giovanni Teatino|Force|Forchia|Forcola|Fordongianus|Forenza|Foresto Sparso|Forgaria Nel Friuli|Forino|Forio|Forli Del Sannio|Forli|Forlimpopoli|Formazza|Formello|Formia|Formicola|Formigara|Formigine|Formigliana|Fornace|Fornelli|Tonezza Del Cimone|Forni Avoltri|Forni Di Sopra|Forni Di Sotto|Forno Canavese|Fornovo San Giovanni|Fornovo Di Taro|Forte Dei Marmi|Fortezza|Fortunago|Forza Dagro|Fosciandora|Fosdinovo|Fossa|Fossalto|Fossacesia|Fossalta Di Piave|Fossalta Di Portogruaro|Fossano|Fossato Serralta|Fossato Di Vico|Montebello Jonico|Fosso|Fossombrone|Foza|Frabosa Soprana|Frabosa Sottana|Fragagnano|Fragneto Labate|Fragneto Monforte|Fraine|Framura|Francavilla Bisio|Francavilla Dete|Francavilla Fontana|Francavilla Angitola|Francavilla Al Mare|Francavilla Marittima|Francavilla Di Sicilia|Francavilla In Sinni|Francica|Francofonte|Francolise|Frascaro|Frascarolo|Frascati|Frascineto|Frassilongo|Frassinelle Polesine|Frassinello Monferrato|Frassineto Po|Frassinetto|Frassino|Frassinoro|Frasso Telesino|Frasso Sabino|Umbertide|Fratta Todina|Fratta Polesine|Frattamaggiore|Frattaminore|Fratte Rosa|Frazzano|Fregona|Fresagrandinaria|Fresonara|Frigento|Frignano|Villa Di Briano|Frinco|Frisa|Frisanco|Front|Frontino|Frontone|Frosinone|Frosolone|Frossasco|Frugarolo|Fubine Monferrato|Fucecchio|Fuipiano Valle Imagna|Fumane|Fumone|Funes|Furci|Furci Siculo|Furnari|Furore|Furtei|Fuscaldo|Fusignano|Fusine|Futani|Gabbioneta Binanuova|Gabiano|Gabicce Mare|Gaby|Gadesco Pieve Delmona|Gadoni|Gaeta|Gaggi|Gaggiano|Gaggio Montano|Gaglianico|Gagliano Castelferrato|Gagliano Aterno|Gagliano Del Capo|Gagliato|Gagliole|Gaiarine|Gaiba|Gaiola|Gaiole In Chianti|Gairo|Gais|Galati Mamertino|Galatina|Galatone|Galatro|Galbiate|Galeata|Galgagnano|Gallarate|Gallese|Galliate Lombardo|Galliate|Galliavola|Gallicano|Gallicano Nel Lazio|Gallicchio|Galliera|Galliera Veneta|Gallinaro|Gallio|Gallipoli|Gallo Matese|Gallodoro|Galluccio|Galtelli|Galzignano Terme|Gamalero|Gambara|Gambarana|Gambasca|Gambassi Terme|Gambatesa|Gambellara|Gamberale|Gambettola|Gambolo|Gambugliano|Gandellino|Gandino|Gandosso|Gangi|Garaguso|Garbagna|Garbagna Novarese|Garbagnate Milanese|Garbagnate Monastero|Garda|Gardone Riviera|Gardone Val Trompia|Garessio|Gargallo|Gargazzone|Gargnano|Garlasco|Garlate|Garlenda|Garniga Terme|Garzeno|Garzigliana|Gasperina|Gassino Torinese|Gattatico|Gatteo|Gattinara|Gavardo|Gavello|Gaverina Terme|Gavi|Gavignano|Gavirate|Gavoi|Gavorrano|Gazoldo Degli Ippoliti|Gazzada Schianno|Gazzaniga|Gazzo|Gazzo Veronese|Gazzola|Gazzuolo|Gela|Gemmano|Gemona Del Friuli|Gemonio|Genazzano|Genga|Genivolta|Genola|Genoni|Genova|Genuri|Genzano Di Lucania|Genzano Di Roma|Gera Lario|Gerace|Locri|Geraci Siculo|Gerano|Gerenzago|Gerenzano|Gergei|Germagnano|Germagno|Germignaga|Gerocarne|Gerola Alta|Gerre De Caprioli|Gesico|Gessate|Gessopalena|Gesturi|Gesualdo|Ghedi|Ghemme|Ghiffa|Ghilarza|Ghisalba|Ghislarengo|Giacciano Con Baruchella|Giaglione|Gianico|Giano Vetusto|Giano Dellumbria|Giardinello|Giardini Naxos|Giarole|Giarratana|Giarre|Giave|Giaveno|Giavera Del Montello|Giba|Gibellina|Gifflenga|Giffone|Giffoni Sei Casali|Giffoni Valle Piana|Gignese|Gignod|Gildone|Gimigliano|Ginestra|Ginestra Degli Schiavoni|Ginosa|Gioi|Gioia Del Colle|Gioia Sannitica|Gioia Dei Marsi|Gioia Tauro|Gioiosa Marea|Gioiosa Ionica|Giove|Giovinazzo|Giovo|Girasole|Girifalco|Gissi|Giuggianello|Giugliano In Campania|Giuliana|Giuliano Teatino|Giuliano Di Roma|Giulianova|Giungano|Giurdignano|Giussago|Giussano|Giustenice|Giustino|Giusvalla|Givoletto|Gizzeria|Glorenza|Sesta Godano|Godega Di Santurbano|Godiasco Salice Terme|Godrano|Goito|Golasecca|Golferenzo|Gombito|Gonars|Goni|Gonnosfanadiga|Gonnesa|Gonnoscodina|Gonnostramatza|Gonzaga|Gordona|Gorga|Gorgo Al Monticano|Gorgoglione|Gorgonzola|Goriano Sicoli|Gorizia|Gorlago|Gorla Maggiore|Gorla Minore|Gorle|Gornate Olona|Gorno|Goro|Gorreto|Gorzegno|Gosaldo|Gossolengo|Gottasecca|Gottolengo|Govone|Gozzano|Gradara|Gradisca Disonzo|Grado|Gradoli|Graffignana|Graffignano|Graglia|Gragnano|Gragnano Trebbiense|Grammichele|Grana|Granarolo Dellemilia|Grandate|Grandola Ed Uniti|Graniti|Granozzo Con Monticello|Grantola|Grantorto|Granze|Grassano|Grassobbio|Gratteri|Gravellona Lomellina|Gravellona Toce|Gravere|Gravina In Puglia|Gravina Di Catania|Grazzanise|Grazzano Badoglio|Greccio|Greci|Greggio|Gremiasco|Gressan|Gressoney La Trinite|Gressoney Saint Jean|Greve In Chianti|Grezzago|Grezzana|Griante|Gricignano Di Aversa|Grignasco|Grigno|Grimacco|Grimaldi|Grinzane Cavour|Grisignano Di Zocco|Grisolia|Grizzana Morandi|Grognardo|Gromo|Grondona|Grone|Grontardo|Gropello Cairoli|Gropparello|Groscavallo|Grosio|Grosotto|Grosseto|Grosso|Grottaferrata|Grottaglie|Grottaminarda|Grottammare|Grottazzolina|Grotte|Grotte Di Castro|Grotteria|Grottole|Grottolella|Gruaro|Grugliasco|Grumello Cremonese Ed Uniti|Grumello Del Monte|Grumento Nova|Grumo Appula|Grumo Nevano|Grumolo Delle Abbadesse|Guagnano|Gualdo|Gualdo Cattaneo|Gualdo Tadino|Gualtieri|Gualtieri Sicamino|Guamaggiore|Guanzate|Guarcino|Guardabosone|Guardamiglio|Guardavalle|Guarda Veneta|Guardea|Guardia Piemontese|Guardiagrele|Guardialfiera|Guardia Lombardi|Guardia Perticara|Guardiaregia|Guardia Sanframondi|Guardistallo|Guarene|Guasila|Guastalla|Guazzora|Gubbio|Gudo Visconti|Guglionesi|Guidizzolo|Guidonia Montecelio|Guiglia|Siziano|Guilmi|Gurro|Guspini|Gussago|Gussola|Hone|Jacurso|Idro|Iglesias|Igliano|Ilbono|Illasi|Illorai|Imbersago|Imer|Imola|Imperia|Impruneta|Inarzo|Incisa Scapaccino|Incudine|Induno Olona|Ingria|Intragna|Introbio|Introd|Introdacqua|Inverigo|Inverno E Monteleone|Inverso Pinasca|Inveruno|Invorio|Inzago|Jolanda Di Savoia|Ionadi|Irgoli|Irma|Irsina|Isasca|Isca Sullo Ionio|Ischia|Ischia Di Castro|Ischitella|Iseo|Isera|Isernia|Isili|Isnello|Isola Dasti|Isola Di Capo Rizzuto|Isola Del Liri|Isola Del Cantone|Madesimo|Isola Del Gran Sasso Ditalia|Isolabella|Isolabona|Isola Del Giglio|Isola Della Scala|Isola Delle Femmine|Isola Del Piano|Isola Di Fondra|Isola Vicentina|Isola Dovarese|Isola Rizza|Isola Santantonio|Isole Tremiti|Isorella|Ispani|Ispica|Ispra|Issiglio|Issime|Isso|Issogne|Vasto|Istrana|Itala|Itri|Ittireddu|Ittiri|Ivrea|Izano|Jelsi|Jenne|Jerago Con Orago|Jerzu|Jesi|Joppolo|Joppolo Giancaxio|Jovencan|Labico|Labro|La Cassa|Lacchiarella|Lacco Ameno|Lacedonia|Laces|Laconi|Laerru|Laganadi|Laghi|Laglio|Lagnasco|Lago|Lagonegro|Lagosanto|Lagundo|Lajatico|Laigueglia|Lainate|Laino|Laino Borgo|Laino Castello|Laion|Laives|Lallio|La Loggia|Lama Dei Peligni|La Maddalena|Lama Mocogno|Lambrugo|Lamon|La Morra|Lampedusa E Linosa|Lamporecchio|Lamporo|Lana|Lanciano|Landiona|Landriano|Langhirano|Langosco|Lanusei|Lanzada|Lanzo Torinese|Lapedona|Lapio|Lappano|Larciano|Lardirago|Larino|Lasa|La Salle|Lascari|Lasnigo|La Spezia|Las Plassas|Lastebasse|Lastra A Signa|Latera|Laterza|La Thuile|Latiano|Latina|Latisana|Latronico|Lattarico|Lauco|Laureana Di Borrello|Laureana Cilento|Lauregno|Laurenzana|Lauria|Lauriano|Laurino|Laurito|Lauro|Lavagna|Lavagno|La Valle Agordina|La Valle|Lavarone|Lavello|Lavena Ponte Tresa|Laveno Mombello|Lavenone|Laviano|Lavis|Lazise|Lazzate|Lecce Nei Marsi|Lecce|Lecco|Leffe|Leggiuno|Legnago|Legnano|Legnaro|Lei|Leini|Leivi|Lemie|Lendinara|Leni|Lenna|Leno|Lenola|Lenta|Lentate Sul Seveso|Lentella|Lentini|Leonessa|Leonforte|Leporano|Lequile|Lequio Tanaro|Lequio Berria|Lercara Friddi|Lerici|Lerma|Lesa|Lesegno|Lesignano De Bagni|Terenzo|Lesina|Lesmo|Lessolo|Lestizza|Letino|Letojanni|Lettere|Lettomanoppello|Lettopalena|Levanto|Levate|Leverano|Levice|Levico Terme|Levone|Lezzeno|Liberi|Librizzi|Licata|Licciana Nardi|Licenza|Licodia Eubea|Lierna|Lignana|Lignano Sabbiadoro|Lillianes|Limana|Limatola|Limbadi|Limbiate|Limena|Limido Comasco|Limina|Limone Sul Garda|Limone Piemonte|Limosano|Linarolo|Linguaglossa|Lioni|Lipari|Lipomo|Lirio|Liscate|Liscia|Lisciano Niccone|Lisio|Lissone|Milena|Liveri|Livigno|Livinallongo Del Col Di Lana|Livo|Livo|Livorno|Livorno Ferraris|Livraga|Lizzanello|Lizzano|Loano|Loazzolo|Locana|Locate Varesino|Locate Di Triulzi|Locatello|Loceri|Locorotondo|Loculi|Lode|Lodi|Lodine|Lodi Vecchio|Lodrino|Lograto|Loiano|Lomagna|Lomazzo|Lombardore|Lombriasco|Lomello|Lona Lases|Lonate Ceppino|Lonate Pozzolo|Londa|Longano|Longare|Longhena|Longi|Longiano|Longobardi|Longobucco|Longone Al Segrino|Porto Azzurro|Longone Sabino|Lonigo|Loranze|Loreggia|Loreglia|Lorenzago Di Cadore|Loreo|Loreto|Loreto Aprutino|Loria|Loro Ciuffenna|Loro Piceno|Lorsica|Losine|Lotzorai|Lovere|Lovero|Lozio|Lozza|Lozzo Di Cadore|Lozzo Atestino|Lozzolo|Lubriano|Lucca Sicula|Lucca|Lucera|Lucignano|Lucinasco|Lucito|Luco Dei Marsi|Lucoli|Lugagnano Val Darda|Lugnano In Teverina|Lugo|Lugo Di Vicenza|Luino|Luisago|Lula|Lumarzo|Lumezzane|Lunamatrona|Lunano|Lungro|Luogosano|Luogosanto|Lupara|Lurago Derba|Lurago Marinone|Lurano|Luras|Lurate Caccivio|Lusciano|Luserna|Luserna San Giovanni|Lusernetta|Lusevera|Lusia|Lusiglie|Luson|Lustra|Luvinate|Luzzana|Luzzara|Luzzi|Maccastorna|Macchia Disernia|Macchiagodena|Macchia Valfortore|Macello|Macerata|Macerata Campania|Macerata Feltria|Macherio|Maclodio|Macomer|Macra|Macugnaga|Maddaloni|Madignano|Madone|Madonna Del Sasso|Maenza|Mafalda|Magasa|Magenta|Maggiora|Magherno|Magione|Magisano|Magliano Di Tenna|Magliano Alpi|Magliano Alfieri|Magliano In Toscana|Magliano De Marsi|Magliano Sabina|Magliano Romano|Magliano Vetere|Maglie|Magliolo|Maglione|Magnacavallo|Magnago|Magnano In Riviera|Magnano|Magomadas|Magre Sulla Strada Del Vino|Magreglio|Majano|Maida|Maiera|Maierato|Maiolati Spontini|Maiolo|Maiori|Mairago|Mairano|Maissana|Malagnino|Malalbergo|Malborghetto Valbruna|Malcesine|Male|Malegno|Maleo|Malesco|Maletto|Malfa|Malgesso|Malgrate|Malito|Mallare|Malles Venosta|Malnate|Malo|Malonno|Malosco|Maltignano|Malvagna|Malvicino|Malvito|Mammola|Mamoiada|Manciano|Mandanici|Mandas|Mandatoriccio|Mandello Del Lario|Mandello Vitta|Manduria|Manerba Del Garda|Manerbio|Manfredonia|Mango|Mangone|Maniago|Manocalzati|Manoppello|Mansue|Manta|Mantello|Mantova|Manzano|Manziana|Mapello|Mara|Maracalagonis|Maranello|Marano Sul Panaro|Marano Di Napoli|Marano Ticino|Marano Equo|Marano Lagunare|Marano Di Valpolicella|Marano Vicentino|Marano Marchesato|Marano Principato|Maranzana|Maratea|Marcallo Con Casone|Marcaria|Marcedusa|Marcellina|Marcellinara|Marcetelli|Marcheno|Marchirolo|Marciana|Marciana Marina|Marcianise|Marciano Della Chiana|Marcignago|Marcon|Marebbe|Marene|Mareno Di Piave|Marentino|Maretto|Margarita|Margherita Di Savoia|Margno|Mariana Mantovana|Mariano Comense|Mariano Del Friuli|Marianopoli|Mariglianella|Marigliano|Marina Di Gioiosa Ionica|Marineo|Marino|Marlengo|Marliana|Marmentino|Marmirolo|Marmora|Marnate|Marone|Maropati|Marostica|Marradi|Marrubiu|Marsaglia|Marsala|Marsciano|Marsico Nuovo|Marsicovetere|Marta|Martano|Martellago|Martello|Martignacco|Martignana Di Po|Martignano|Martina Franca|Martinengo|Martiniana Po|Martinsicuro|Martirano|Martirano Lombardo|Martis|Martone|Marudo|Maruggio|Marzano Di Nola|Marzano Appio|Marzano|Marzi|Marzio|Masate|Mascali|Mascalucia|Maschito|Masciago Primo|Maser|Masera|Masera Di Padova|Maserada Sul Piave|Masi|Masio|Masi Torello|Maslianico|Masone|Massa Fermana|Massa Dalbe|Massa|Massa Martana|Massa E Cozzile|Massafra|Massalengo|Massa Lombarda|Massa Lubrense|Massa Marittima|Massanzago|Massarosa|Massazza|Massello|Masserano|San Marco Evangelista|Massignano|Massimeno|Massimino|Massino Visconti|Massiola|Masullas|Matelica|Matera|Mathi|Matino|Matrice|Mattie|Mattinata|Mazara Del Vallo|Mazzano|Mazzano Romano|Mazzarino|Mazzarra Santandrea|Mazze|Mazzin|Mazzo Di Valtellina|Meana Sardo|Meana Di Susa|Meda|Mede|Medea|Medesano|Medicina|Mediglia|Medolago|Medole|Medolla|Meduna Di Livenza|Meduno|Megliadino San Vitale|Meina|Melara|Melazzo|Meldola|Mele|Melegnano|Melendugno|Meleti|Melfi|Melicucca|Melicucco|Melilli|Melissa|Melissano|Melito Irpino|Melito Di Napoli|Melito Di Porto Salvo|Melizzano|Melle|Mello|Silea|Melpignano|Meltina|Melzo|Menaggio|Menconico|Mendatica|Mendicino|Menfi|Mentana|Meolo|Merana|Merano|Merate|Mercallo|Mercatello Sul Metauro|Mercatino Conca|Novafeltria|Mercato San Severino|Mercato Saraceno|Mercenasco|Mercogliano|Mereto Di Tomba|Mergo|Mergozzo|Meri|Merlara|Merlino|Merone|Mesagne|Mese|Mesenzana|Mesero|Mesola|Mesoraca|Messina|Mestrino|Meta|Mezzago|Mezzana Mortigliengo|Mezzana|Mezzana Bigli|Mezzana Rabattone|Mezzane Di Sotto|Mezzanego|Mezzanino|Mezzano|Mezzenile|Mezzocorona|Mezzojuso|Mezzoldo|Mezzolombardo|Mezzomerico|Miagliano|Miane|Miasino|Miazzina|Micigliano|Miggiano|Miglianico|Miglierina|Miglionico|Mignanego|Mignano Monte Lungo|Milano|Milazzo|Mileto|Milis|Militello In Val Di Catania|Militello Rosmarino|Millesimo|Milo|Milzano|Mineo|Minerbe|Minerbio|Minervino Murge|Minervino Di Lecce|Minori|Minturno|Minucciano|Mioglia|Mira|Mirabella Eclano|Mirabella Imbaccari|Mirabello Monferrato|Mirabello Sannitico|Miradolo Terme|Miranda|Mirandola|Mirano|Mirto|Misano Di Gera Dadda|Misano Adriatico|Misilmeri|Misinto|Missaglia|Missanello|Misterbianco|Mistretta|Moasca|Moconesi|Modena|Modica|Modigliana|Tavazzano Con Villavesco|Modolo|Modugno|Moena|Moggio|Moggio Udinese|Moglia|Mogliano|Mogliano Veneto|Mogorella|Ruinas|Mogoro|Moiano|Moimacco|Moio De Calvi|Moio Alcantara|Moio Della Civitella|Moiola|Mola Di Bari|Molare|Molazzana|Molfetta|Molinara|Molinella|Molini Di Triora|Molino Dei Torti|Molise|Moliterno|Mollia|Porto Empedocle|Molochio|Molteno|Moltrasio|Molveno|Mombaldone|Mombarcaro|Mombaroccio|Mombaruzzo|Mombasiglio|Mombello Monferrato|Mombello Di Torino|Mombercelli|Momo|Mompantero|Mompeo|Momperone|Monacilioni|Monale|Monasterace|Monastero Bormida|Monastero Di Vasco|Monastero Di Lanzo|Monasterolo Del Castello|Monasterolo Casotto|Monasterolo Di Savigliano|Monastier Di Treviso|Monastir|Moncalieri|Moncalvo|Moncestino|Monchiero|Monchio Delle Corti|Moncrivello|Moncucco Torinese|Mondaino|Mondavio|Mondolfo|Mondovi|Mondragone|Moneglia|Monesiglio|Monfalcone|Serramazzoni|Monforte Dalba|Monforte San Giorgio|Monfumo|Mongardino|Monghidoro|Mongiana|Mongiardino Ligure|Montjovet|Mongiuffi Melia|Mongrando|Mongrassano|Monguelfo Tesido|Monguzzo|Moniga Del Garda|Monleale|Monno|Monopoli|Monreale|Monrupino|Monsampietro Morico|Monsampolo Del Tronto|Monsano|Monselice|Monserrato|Monsummano Terme|Monta|Montabone|Montacuto|Montafia|Montagano|Montagna|Montagna In Valtellina|Montagnana|Montagnareale|Montaguto|Montaione|Montalbano Jonico|Montalbano Elicona|Ostra|Montaldeo|Montaldo Bormida|Montaldo Di Mondovi|Montaldo Torinese|Montaldo Roero|Montaldo Scarampi|Montale|Montalenghe|Montallegro|Montalto Delle Marche|Montalto Uffugo|Montalto Pavese|Montalto Di Castro|Montalto Dora|Montanaro|Montanaso Lombardo|Montanera|Montano Antilia|Montano Lucino|Montappone|Montaquila|Montasola|Montauro|Montazzoli|Monte Cremasco|Monte Argentario|Montebello Della Battaglia|Montebello Di Bertona|Montebello Vicentino|Montebelluna|Montebruno|Montebuono|Montecalvo Irpino|Montecalvo Versiggia|Montecalvo In Foglia|Montecarlo|Montecarotto|Montecassiano|Montecastello|Monte Castello Di Vibio|Montecastrilli|Montecatini Val Di Cecina|Monte Cavallo|Montecchia Di Crosara|Montecchio|Montecchio Emilia|Montecchio Maggiore|Montecchio Precalcino|Monte Cerignone|Montechiaro Dasti|Montechiaro Dacqui|Montichiari|Montechiarugolo|Monteciccardo|Montecilfone|Monte Compatri|Montecopiolo|Montecorice|Montecorvino Pugliano|Montecorvino Rovella|Montecosaro|Montecrestese|Montecreto|Monte Di Malo|Montedinove|Monte Di Procida|Montedoro|Montefalcione|Montefalco|Montefalcone Appennino|Montefalcone Di Val Fortore|Montefalcone Nel Sannio|Montefano|Montefelcino|Monteferrante|Montefiascone|Montefino|Montefiore Dellaso|Montefiore Conca|Montefiorino|Monteflavio|Monteforte Irpino|Monteforte Cilento|Monteforte Dalpone|Montefortino|Montefranco|Montefredane|Montefusco|Montegabbione|Montegalda|Montegaldella|Montegallo|Monte Giberto|Montegioco|Montegiordano|Montegiorgio|Montegranaro|Montegridolfo|Monte Grimano Terme|Montegrino Valtravaglia|Montegrosso Dasti|Montegrosso Pian Latte|Montegrotto Terme|Monteiasi|Monte Isola|Montelabbate|Montelanico|Montelapiano|Monteleone Di Fermo|Vibo Valentia|Monteleone Di Puglia|Monteleone Di Spoleto|Monteleone Sabino|Monteleone Rocca Doria|Monteleone Dorvieto|Montelepre|Montelibretti|Montella|Montello|Montelongo|Montelparo|Montelupo Albese|Montelupo Fiorentino|Montelupone|Montemaggiore Belsito|Montemagno|Santarcangelo Trimonte|Montemale Di Cuneo|Montemarano|Montemarciano|Monte Marenzo|Montemarzino|Montemesola|Montemezzo|Montemignaio|Montemiletto|Pollenza|Montemilone|Montemitro|Montemonaco|Montemurlo|Montemurro|Montenars|Montenero Di Bisaccia|Montenerodomo|Montenero Sabino|Montenero Val Cocchiara|Ostra Vetere|Monteodorisio|Roseto Degli Abruzzi|Montepaone|Monteparano|Monte Porzio|Monte Porzio Catone|Monteprandone|Montepulciano|Monterchi|Montereale|Montereale Valcellina|Monterenzio|Monteriggioni|Monte Rinaldo|Monte Roberto|Monteroduni|Monte Romano|Monteroni Di Lecce|Monteroni Darbia|Monterosi|Monterosso Calabro|Monterosso Grana|Monterosso Al Mare|Monterosso Almo|Monterotondo|Monterotondo Marittimo|Monterubbiano|Monte San Biagio|Monte San Giacomo|Monte San Giovanni In Sabina|Monte San Giovanni Campano|Monte San Giusto|Monte San Martino|Montesano Salentino|Montesano Sulla Marcellana|Monte San Pietrangeli|Monte San Pietro|Monte San Savino|Monte Santa Maria Tiberina|Monte Santangelo|Potenza Picena|Monte San Vito|Montesarchio|Montescaglioso|Montescano|Montescheno|Montescudaio|Montese|Montesegale|Montesilvano|Montespertoli|Monteu Da Po|Monte Urano|Monteu Roero|Montevago|Montevarchi|Montevecchia|Monteverde|Monteverdi Marittimo|Monteviale|Monte Vidon Combatte|Monte Vidon Corrado|Montezemolo|Monti|Montiano|Monticello Dalba|Monticelli Pavese|Monticelli Dongina|Monticelli Brusati|Monticello Brianza|Monticello Conte Otto|Monticiano|Montieri|Montignoso|Montirone|Montodine|Montoggio|Montone|Montopoli In Val Darno|Montopoli Di Sabina|Montorfano|Montorio Nei Frentani|Montorio Al Vomano|Montorio Romano|Montorso Vicentino|Montottone|Montresta|Montu Beccaria|Monvalle|Monza|Monzambano|Monzuno|Morano Sul Po|Morano Calabro|Moransengo|Moraro|Morazzone|Morbegno|Morbello|Morciano Di Romagna|Morciano Di Leuca|Morcone|Mordano|Morengo|Mores|Moresco|Moretta|Morfasso|Morgano|Morgex|Morgongiori|Mori|Moriago Della Battaglia|Moricone|Morigerati|Morino|Moriondo Torinese|Morlupo|Mormanno|Mornago|Mornese|Mornico Al Serio|Mornico Losana|Morolo|Morozzo|Morra De Sanctis|Morro Dalba|Morro Reatino|Morro Doro|Morrone Del Sannio|Morrovalle|Morsano Al Tagliamento|Morsasco|Mortara|Mortegliano|Morterone|Moruzzo|Moscazzano|Moschiano|Mosciano Santangelo|Moscufo|Moso In Passiria|Mossa|Motta Di Livenza|Motta Baluffi|Motta Camastra|Motta Daffermo|Motta De Conti|Mottafollone|Mottalciata|Motta Montecorvino|Motta San Giovanni|Motta Santa Lucia|Motta Santanastasia|Motta Visconti|Mottola|Mozzagrogna|Mozzanica|Mozzate|Mozzecane|Mozzo|Muccia|Muggia|Muggio|Mugnano Del Cardinale|Mugnano Di Napoli|Mulazzano|Mulazzo|Mura|Muravera|Murazzano|Salcedo|Murello|Murialdo|Murisengo|Murlo|Muro Leccese|Muro Lucano|Muros|Muscoline|Musei|Musile Di Piave|Musso|Mussolente|Mussomeli|Pineto|Muzzana Del Turgnano|Muzzano|Nago Torbole|Nalles|Nanto|Napoli|Narbolia|Narcao|Nardo|Nardodipace|Narni|Naro|Narzole|Nasino|Naso|Naturno|Nave|Navelli|Naz Sciaves|Nazzano|Ne|Nebbiuno|Negrar Di Valpolicella|Neirone|Neive|Nembro|Nemi|Nemoli|Neoneli|Nepi|Nereto|Nerola|Nervesa Della Battaglia|Nerviano|Nespolo|Nesso|Netro|Nettuno|Neviano|Neviano Degli Arduini|Neviglie|Niardo|Nibbiola|Nibionno|Nichelino|Nicolosi|Nicorvo|Nicosia|Nicotera|Niella Belbo|Niella Tanaro|Nimis|Niscemi|Nissoria|Nizza Di Sicilia|Nizza Monferrato|Noale|Noasca|Nocara|Nocciano|Nocera Terinese|Nocera Umbra|Nocera Inferiore|Nocera Superiore|Noceto|Noci|Nociglia|Noepoli|Nogara|Nogaredo|Nogarole Rocca|Nogarole Vicentino|Noicattaro|Nola|Nole|Noli|Nomaglio|Nomi|Nonantola|None|Nonio|Noragugume|Norbello|Norcia|Norma|Nosate|Ponte Nossa|Notaresco|Noto|Nova Milanese|Novaledo|Novalesa|Nova Levante|Nova Ponente|Novara Di Sicilia|Novara|Novate Milanese|Novate Mezzola|Nove|Novedrate|Novellara|Novello|Noventa Padovana|Noventa Di Piave|Noventa Vicentina|Novi Ligure|Novi Di Modena|Novi Velia|Noviglio|Novoli|Nucetto|Nughedu Santa Vittoria|Nughedu San Nicolo|Nule|Nulvi|Numana|Nuoro|Nurachi|Nuragus|Nurallao|Nuraminis|Nureci|Nurri|Nus|Nusco|Nuvolento|Nuvolera|Nuxis|Occhieppo Inferiore|Occhieppo Superiore|Occhiobello|Occimiano|Ocre|Odalengo Grande|Odalengo Piccolo|Oderzo|Odolo|Ofena|Offagna|Offanengo|Offida|Offlaga|Oggebbio|Oggiona Con Santo Stefano|Oggiono|Oglianico|Ogliastro Cilento|Oyace|Olbia|Olcenengo|Oldenico|Oleggio|Oleggio Castello|Olevano Di Lomellina|Olevano Romano|Olevano Sul Tusciano|Olgiate Comasco|Olgiate Molgora|Olgiate Olona|Olginate|Oliena|Oliva Gessi|Olivadi|Oliveri|Oliveto Lucano|Oliveto Citra|Oliveto Lario|Olivetta San Michele|Olivola|Ollastra|Ollolai|Ollomont|Olmedo|Olmeneta|Olmo Gentile|Olmo Al Brembo|Oltre Il Colle|Oltressenda Alta|Oltrona Di San Mamette|Olzai|Ome|Omegna|Omignano|Onani|Onano|Oncino|Oneta|Onifai|Oniferi|Ono San Pietro|Onore|Onzo|Opera|Opi|Oppeano|Oppido Lucano|Oppido Mamertina|Ora|Orani|Oratino|Orbassano|Orbetello|Orciano Pisano|Orero|Orgiano|Pieve Fissiraga|Orgosolo|Oria|Oricola|Origgio|Orino|Orio Litta|Orio Al Serio|Orio Canavese|Oriolo|Oriolo Romano|Oristano|Ormea|Ormelle|Ornago|Ornavasso|Ornica|Orosei|Orotelli|Orria|Orroli|Orsago|Orsara Bormida|Orsara Di Puglia|Orsenigo|Orsogna|Orsomarso|Orta Di Atella|Orta Nova|Ortacesus|Orta San Giulio|Orte|Ortelle|Ortezzano|Ortignano Raggiolo|Ortisei|Ortona|Ortona Dei Marsi|Luni|Ortovero|Ortucchio|Ortueri|Orune|Orvieto|Orzinuovi|Orzivecchi|Osasco|Osasio|Oschiri|Osidda|Osiglia|Osilo|Osimo|Osini|Osio Sopra|Osio Sotto|Osnago|Osoppo|Ospedaletti|Ospedaletto Dalpinolo|Ospedaletto Lodigiano|Ospedaletto Euganeo|Ospedaletto|Ospitale Di Cadore|Ospitaletto|Ossago Lodigiano|Ossana|Ossi|Ossimo|Ossona|Ostana|Ostellato|Ostiano|Ostiglia|Ostuni|Otranto|Otricoli|Ottaviano|Ottana|Ottati|Ottiglio|Ottobiano|Ottone|Oulx|Ovada|Ovaro|Oviglio|Ovindoli|Ovodda|Ozegna|Ozieri|Ozzano Monferrato|Ozzano Dellemilia|Ozzero|Pabillonis|Paceco|Pace Del Mela|Pacentro|Pachino|Paciano|Padenghe Sul Garda|Paderna|Paderno Franciacorta|Paderno Dadda|Paderno Dugnano|Paderno Ponchielli|Robbiate|Padova|Padria|Padula|Paduli|Paesana|Paese|Pagani|Paganico Sabino|Pagazzano|Pagliara|Paglieta|Pagnacco|Pagno|Pagnona|Pago Del Vallo Di Lauro|Pago Veiano|Paisco Loveno|Paitone|Paladina|Palagano|Palagianello|Palagiano|Palagonia|Palaia|Palanzano|Palata|Palau|Palazzago|Palazzo Pignano|Palazzo San Gervasio|Palazzo Canavese|Palazzo Adriano|Palazzolo Sulloglio|Palazzolo Vercellese|Palazzolo Acreide|Palazzolo Dello Stella|Palazzuolo Sul Senio|Palena|Palermiti|Palermo|Palestrina|Palestro|Paliano|Palizzi|Pallagorio|Pallanzeno|Pallare|Palma Di Montechiaro|Palma Campania|Palmanova|Palmariggi|Palmas Arborea|San Giovanni Suergiu|Palmi|Palmiano|Palmoli|Palo Del Colle|Palomonte|Palombara Sabina|Palombaro|Palosco|Palu Del Fersina|Palu|Paludi|Plaus|Paluzza|Pamparato|Pancalieri|Pancarana|Panchia|Pandino|Panettieri|Panicale|Villaricca|Pannarano|Panni|Pantelleria|Pantigliate|Paola|Paolisi|Valderice|Papasidero|Papozze|Parabiago|Parabita|Paratico|Parcines|Parella|Parenti|Parete|Pareto|Parghelia|Parlasco|Parma|Parodi Ligure|Paroldo|Parolise|Parona|Parrano|Parre|Partanna|Partinico|Paruzzaro|Parzanica|Pasian Di Prato|Pasiano Di Pordenone|Paspardo|Passerano Marmorito|Passignano Sul Trasimeno|Passirano|Pastena|Pastorano|Pastrengo|Pasturana|Pasturo|Paternopoli|Paterno|Paterno Calabro|Patrica|Pattada|Patti|Patu|Pau|Paularo|Pauli Arbarei|San Nicolo Gerrei|Paulilatino|Paullo|Paupisi|Pavarolo|Pavia|Pavia Di Udine|Pavone Del Mella|Pavone Canavese|Pavullo Nel Frignano|Pazzano|Peccioli|Pecetto Di Valenza|Pecetto Torinese|Pedara|Pedaso|Pedavena|Pedemonte|San Paolo|Pederobba|Pedesina|Pedivigliano|Pedrengo|Peglio|Peglio|Pegognaga|Peia|Peio|Pelago|Pella|Pellegrino Parmense|Pellezzano|Pellizzano|Pelugo|Penango|Poggiridenti|Penna In Teverina|Pennabilli|Pennadomo|Pennapiedimonte|Penna San Giovanni|Penna Santandrea|Penne|Pentone|Perano|Perarolo Di Cadore|Perca|Percile|Perdasdefogu|Perdaxius|Perdifumo|Pereto|Perfugas|Pergine Valsugana|Pergola|Perinaldo|Perito|Perledo|Perletto|Perlo|Perloz|Pernumia|Perosa Canavese|Perosa Argentina|Perrero|San Giovanni In Persiceto|Persico Dosimo|Pertengo|Pertica Alta|Pertica Bassa|Pertosa|Pertusio|Perugia|Pesaro|Pescaglia|Pescantina|Pescara|Pescarolo Ed Uniti|Pescasseroli|Pescate|Pesche|Peschici|Peschiera Borromeo|Peschiera Del Garda|Pescia|Pescina|Pescocostanzo|Pesco Sannita|Pescolanciano|Pescopagano|Pescopennataro|Pescorocchiano|Pescosansonesco|Pescosolido|Pessano Con Bornago|Pessina Cremonese|Pessinetto|Petacciato|Turania|Petilia Policastro|Petina|Petralia Soprana|Petralia Sottana|Petrella Tifernina|Petrella Salto|Petriano|Petriolo|Petritoli|Petrizzi|Petrona|Petruro Irpino|Pettenasco|Pettinengo|Pettineo|Pettoranello Del Molise|Pettorano Sul Gizio|Pettorazza Grimani|Peveragno|Pezzana|Pezzaze|Pezzolo Valle Uzzone|Piacenza Dadige|Piacenza|Piaggine|Valle Dellangelo|Piana Di Monte Verna|Piana Crixia|Piana Degli Albanesi|Pontboset|Pian Camuno|Piancastagnaio|Piancogno|Piandimeleto|Piane Crati|Pianella|Pianello Del Lario|Pianello Val Tidone|Pianengo|Pianezza|Pianezze|Pianfei|Pianico|Pianiga|San Benedetto Val Di Sambro|Piano Di Sorrento|Pianoro|Piansano|Piantedo|Piario|Piasco|Piateda|Piatto|Piazza Brembana|Piazza Armerina|Piazza Al Serchio|Piazzatorre|Piazzola Sul Brenta|Piazzolo|Picciano|Picerno|Picinisco|Pico|Piea|Piedicavallo|Piedimonte Matese|Piedimonte Etneo|Piedimonte San Germano|Piedimulera|Piegaro|Pienza|Pieranica|Pietramontecorvino|Pietra Ligure|Pietrabbondante|Pietrabruna|Pietracamela|Pietracatella|Pietracupa|Pietradefusi|Pietra De Giorgi|Pietraferrazzana|Satriano Di Lucania|Pietrafitta|Pietragalla|Pietralunga|Pietra Marazzi|Pietramelara|Pietranico|Pietrapaola|Pietrapertosa|Pietraperzia|Pietraporzio|Pietraroja|Pietrarubbia|Pietrasanta|Pietrastornina|Pietravairano|Pietrelcina|Pieve Di Teco|Pieve Emanuele|Pieve Albignola|Pieve A Nievole|Pieve Del Cairo|Pieve Di Cadore|Pieve Di Cento|Pieve Di Soligo|Pieve Ligure|Pieve Dolmi|Pieve Fosciana|Pievepelago|Pieve Porto Morone|Pieve San Giacomo|Pieve Santo Stefano|Pieve Tesino|Pieve Torina|Pieve Vergonte|Piglio|Pigna|Pignataro Maggiore|Pignataro Interamna|Pignola|Pignone|Pigra|Pila|Pimentel|Pimonte|Pinarolo Po|Pinasca|Pincara|Pinerolo|Pino Dasti|Pino Torinese|Pinzano Al Tagliamento|Pinzolo|Piobbico|Piobesi Dalba|Piobesi Torinese|Piode|Pioltello|Piombino|Piombino Dese|Pioraco|Piossasco|Piova Massaia|Piove Di Sacco|Piovene Rocchette|Piozzano|Piozzo|Priverno|Piraino|Pisa|Pisano|Pisoniano|Piscina|Pisciotta|Pisogne|Pisticci|Pistoia|Pitigliano|Piubega|Piuro|Piverone|Pizzale|Pizzighettone|Pizzo|Pizzoferrato|Pizzoli|Pizzone|Pizzoni|Placanica|Plataci|Platania|Plati|Taipana|Plesio|Ploaghe|Plodio|Pocapaglia|Pocenia|Podenzana|Podenzano|Pofi|Poggiardo|Poggibonsi|Poggio Rusco|Poggio A Caiano|Poggio Bustone|Poggio Catino|Poggiodomo|Poggiofiorito|Poggio Imperiale|Poggiomarino|Poggio Mirteto|Poggio Moiano|Poggio Nativo|Poggio Picenze|Poggioreale|Poggio Renatico|Poggiorsini|Poggio San Lorenzo|Poggio San Marcello|Pogliano Milanese|Pognana Lario|Pognano|Pogno|Pojana Maggiore|Poirino|Polaveno|Polcenigo|Polesella|Poli|Polia|Policoro|Polignano A Mare|San Pietro In Cerro|Polinago|Polino|Polistena|Polizzi Generosa|Polla|Pollein|Pollena Trocchia|Pollica|Pollina|Pollone|Pollutri|Polonghera|Polpenazze Del Garda|Polverara|Polverigi|Pomarance|Pomaretto|Pomarico|Pomaro Monferrato|Pomarolo|Pombia|Pomezia|Pomigliano Darco|Pompei|Pompeiana|Pompiano|Pomponesco|Pompu|Poncarale|Ponderano|Ponna|Ponsacco|Ponso|Pontassieve|Pont Canavese|Ponte|Ponte In Valtellina|Ponte Gardena|Pontebba|Ponte Buggianese|Pontecagnano Faiano|Pontecchio Polesine|Pontechianale|Pontecorvo|Pontecurone|Pontedassio|Ponte Dellolio|Pontedera|Ponte Di Legno|Ponte Di Piave|Ponte Lambro|Pontelandolfo|Pontelatone|Pontelongo|Ponte Nizza|Pontenure|Ponteranica|Pont Saint Martin|Ponte San Nicolo|Ponte San Pietro|Pontestura|Pontevico|Pontey|Ponti|Ponti Sul Mincio|Pontida|Pontinia|Pontinvrea|Pontirolo Nuovo|Pontoglio|Pontremoli|Ponza|Ponzano Monferrato|Ponzano Di Fermo|Ponzano Romano|Ponzano Veneto|Ponzone|Popoli|Poppi|Porano|Porcari|Porcia|Stella Cilento|Pordenone|Porlezza|Pornassio|Porpetto|Portacomaro|Portalbera|Porte|Portici|Portico Di Caserta|Portico E San Benedetto|Portigliola|Porto Ceresio|Porto Valtravaglia|Portobuffole|Portocannone|Portoferraio|Portofino|Portogruaro|Portomaggiore|Porto Mantovano|Porto Recanati|Porto San Giorgio|Porto Santelpidio|Portoscuso|Porto Tolle|Porto Torres|Portovenere|Porto Viro|Portula|Posada|Posina|Positano|Possagno|Posta|Posta Fibreno|Postal|Postalesio|Postiglione|Postua|Potenza|Pove Del Grappa|Povegliano|Povegliano Veronese|Poviglio|Povoletto|Pozzaglia Sabina|Pozzallo|Pozzilli|Pozzo Dadda|Pozzoleone|Pozzolengo|Pozzol Groppo|Pozzolo Formigaro|Pozzomaggiore|Pozzonovo|Pozzuoli|Pozzuolo Martesana|Pozzuolo Del Friuli|Pradalunga|Pradamano|Pradleves|Sasso Marconi|Pragelato|Pray|Praia A Mare|Praiano|Pralboino|Prali|Pralormo|Pralungo|Pramaggiore|Pramollo|Prarolo|Prarostino|Prasco|Prascorsano|Prata Di Principato Ultra|Prata Sannita|Prata Dansidonia|Prata Camportaccio|Prata Di Pordenone|Pratella|Pratiglione|Prato|Prato Sesia|Prato Carnico|Prato Allo Stelvio|Pratola Serra|Pratola Peligna|Pravisdomini|Prazzo|Samo|Precenicco|Preci|Predappio|Predazzo|Predoi|Predore|Predosa|Preganziol|Pregnana Milanese|Prela|Premana|Premariacco|Premeno|Premia|Premilcuore|Premolo|Premosello Chiovenda|Preone|Prepotto|Pre Saint Didier|Preseglie|Presenzano|Presezzo|Pressana|Pretoro|Prevalle|Prezza|Priero|Prignano Sulla Secchia|Prignano Cilento|Primaluna|Priocca|Priola|Prizzi|Proceno|Procida|Propata|Proserpio|Prossedi|Provaglio Val Sabbia|Provaglio Diseo|Proves|Provvidenti|Prunetto|Puegnago Sul Garda|Puglianello|Pula|Pulfero|Pulsano|Pumenengo|Pusiano|Putifigari|Putignano|Quadrelle|Quadri|Quagliuzzo|Qualiano|Quaranti|Quargnento|Quarna Sopra|Quarna Sotto|Quarona|Quarrata|Quart|Quarto|Quarto Daltino|Quartu Santelena|Quartucciu|Quassolo|Quattordio|Quattro Castella|Quiliano|Quincinetto|Quindici|Quingentole|Quintano|Quinto Di Treviso|Quinto Vercellese|Quinto Vicentino|Quinzano Doglio|Quistello|Rabbi|Racale|Racalmuto|Racconigi|Raccuja|Racines|Radda In Chianti|Raddusa|Radicofani|Radicondoli|Raffadali|Ragogna|Ragusa|Ruviano|Raiano|Ramacca|Rancio Valcuvia|Ranco|Randazzo|Ranica|Ranzanico|Ranzo|Rapagnano|Rapallo|Rapino|Rapolano Terme|Rapolla|Rapone|Rassa|Rasun Anterselva|Rasura|Ravanusa|Ravarino|Ravascletto|Ravello|Ravenna|Raveo|Raviscanina|Re|Rea|Realmonte|Reana Del Rojale|Reano|Recale|Recanati|Recco|Recetto|Recoaro Terme|Redavalle|Redondesco|Refrancore|Refrontolo|Regalbuto|Reggello|Reggio Nellemilia|Reggio Di Calabria|Reggiolo|Reino|Reitano|Remanzacco|Remedello|Renate|Rende|Renon|Resana|Rescaldina|Resia|Ercolano|Resiutta|Resuttano|Retorbido|Revello|Revigliasco Dasti|Revine Lago|Revo|Rezzago|Rezzato|Rezzo|Rezzoaglio|Val Rezzo|Rhemes Notre Dame|Rhemes Saint Georges|Rho|Riace|Rialto|Riano|Riardo|Ribera|Ribordone|Ricadi|Ricaldone|Riccia|Riccione|Ricco Del Golfo Di Spezia|Ricengo|Ricigliano|Riese Pio X|Riesi|Rieti|Rifiano|Rifreddo|Rignano Sullarno|Rignano Garganico|Rignano Flaminio|Rigolato|Rimella|Rimini|Rio Saliceto|Rio Di Pusteria|Riofreddo|Riola Sardo|Riolo Terme|Riolunato|Riomaggiore|Rionero In Vulture|Rionero Sannitico|Ripabottoni|Ripacandida|Ripalimosani|Ripalta Arpina|Ripalta Cremasca|Ripalta Guerina|Riparbella|Ripa Teatina|Ripatransone|Ripe San Ginesio|Ripi|Riposto|Rittana|Rivamonte Agordino|Riva Ligure|Riva Del Garda|Riva Di Solto|Rivalba|Rivalta Bormida|Rivalta Di Torino|Rivanazzano Terme|Riva Presso Chieri|Rivara|Rivarolo Canavese|Rivarolo Del Re Ed Uniti|Rivarolo Mantovano|Rivarone|Rivarossa|Rive|Rive Darcano|Rivello|Rivergaro|Rivisondoli|Rivodutri|Rivoli|Rivoli Veronese|Rivolta Dadda|Rizziconi|Roana|Roaschia|Roascio|Rovasenda|Roasio|Roatto|Robassomero|Robbio|Robecchetto Con Induno|Robecco Doglio|Robecco Sul Naviglio|Robecco Pavese|Robella|Robilante|Roburent|Rocca Pietore|Roccavaldina|Roccabascerana|Roccabernarda|Roccabianca|Roccabruna|Rocca Canavese|Rocca Canterano|Roccacasale|Roccafluvione|Rocca Ciglie|Rocca Darazzo|Rocca Darce|Roccadaspide|Rocca De Baldi|Rocca De Giorgi|Rocca Devandro|Rocca Di Botte|Rocca Di Cambio|Rocca Di Cave|Rocca Di Mezzo|Rocca Di Neto|Rocca Di Papa|Roccafiorita|Roccaforte Ligure|Roccaforte Mondovi|Roccaforte Del Greco|Roccaforzata|Roccafranca|Roccagiovine|Roccagloriosa|Roccagorga|Rocca Grimalda|Rocca Imperiale|Roccalbegna|Roccalumera|Roccamandolfi|Rocca Massima|Roccamena|Roccamonfina|Roccamontepiano|Roccamorice|Roccanova|Roccantica|Roccapalumba|Rocca Pia|Roccapiemonte|Rocca Priora|Roccarainola|Roccaraso|Roccaromana|Rocca San Casciano|Rocca San Felice|Rocca San Giovanni|Rocca Santa Maria|Rocca Santo Stefano|Roccascalegna|Roccasecca|Roccasecca Dei Volsci|Roccasicura|Rocca Sinibalda|Roccasparvera|Roccaspinalveti|Roccastrada|Rocca Susella|Roccaverano|Roccavignale|Roccavione|Roccavivara|Roccella Valdemone|Roccella Ionica|Rocchetta A Volturno|Rocchetta E Croce|Rocchetta Nervina|Rocchetta Di Vara|Rocchetta Belbo|Rocchetta Ligure|Rocchetta Palafea|Rocchetta Santantonio|Rocchetta Tanaro|Rodano|Roddi|Roddino|Rodello|Rodengo|Rodengo Saiano|Rodero|Rodi Milici|Rodi Garganico|Rodigo|Roe Volciano|Rofrano|Rogeno|Roggiano Gravina|Roghudi|Rogliano|Rognano|Rogno|Rogolo|Roiate|Roio Del Sangro|Roisan|Roletto|Rolo|Roma|Romagnano Sesia|Romagnano Al Monte|Romagnese|Romallo|Romana|Romanengo|Romano Di Lombardia|Romano Canavese|Romano Dezzelino|Romans Disonzo|Rombiolo|Romeno|Romentino|Rometta|Ronago|Ronca|Roncade|Roncadelle|Roncaro|Roncegno Terme|Roncello|Ronchi Dei Legionari|Ronchi Valsugana|Ronchis|Ronciglione|Roncobello|Ronco Scrivia|Ronco Briantino|Ronco Biellese|Ronco Canavese|Ronco Alladige|Roncoferraro|Roncofreddo|Roncola|Rondanina|Rondissone|Ronsecco|Ronzone|Roppolo|Rora|Roure|Rosa|Rosarno|Rosasco|Rosate|Rosazza|Rosciano|Roscigno|Rose|Rosello|Roseto Valfortore|Rosignano Monferrato|Rosignano Marittimo|Roseto Capo Spulico|Rosolina|Rosolini|Rosora|Rossa|Rossana|Rossano Veneto|Rossiglione|Rosta|Rota Dimagna|Rota Greca|Rotella|Rotello|Rotonda|Rotondella|Rotondi|Rottofreno|Rotzo|Rovato|Rovegno|Rovellasca|Rovello Porro|Roverbella|Roverchiara|Rovere Della Luna|Rovere Veronese|Roveredo In Piano|Roveredo Di Gua|Rovereto|Rovescala|Rovetta|Roviano|Rovigo|Rovito|Rovolon|Rozzano|Rubano|Rubiana|Rubiera|Ruda|Rudiano|Rueglio|Ruffano|Ruffia|Ruffre Mendola|Rufina|Rumo|Ruoti|Russi|Rutigliano|Rutino|Ruvo Di Puglia|Ruvo Del Monte|Sabaudia|Sabbio Chiese|Sabbioneta|Sacco|Saccolongo|Sacile|Sacrofano|Sadali|Sagama|Sagliano Micca|Sagrado|Sagron Mis|Saint Christophe|Saint Denis|Saint Marcel|Saint Nicolas|Saint Oyen|Saint Pierre|Saint Rhemy En Bosses|Saint Vincent|Sala Monferrato|Sala Bolognese|Sala Comacina|Sala Biellese|Sala Baganza|Sala Consilina|Salbertrand|Salento|Salandra|Salaparuta|Salara|Salasco|Salassa|Salcito|Sale|Sale Delle Langhe|Sale Marasino|Salemi|Salerano Sul Lambro|Salerano Canavese|Salerno|Sale San Giovanni|Salgareda|Sali Vercellese|Salice Salentino|Saliceto|San Mauro Di Saline|Salisano|Salizzole|Salle|Salmour|Salo|Salorno|Salsomaggiore Terme|Saltrio|Saludecio|Saluggia|Salussola|Saluzzo|Salve|Savoia Di Lucania|Salvirola|Salvitelle|Salza Irpina|Salza Di Pinerolo|Salzano|Samarate|Samassi|Samatzai|Sambuca Di Sicilia|Sambuca Pistoiese|Sambuci|Sambuco|Sammichele Di Bari|Samolaco|Samone|Samone|Sampeyre|Samugheo|Sanarica|San Bartolomeo Val Cavargna|San Bartolomeo Al Mare|San Bartolomeo In Galdo|San Basile|San Basilio|San Bassano|San Bellino|San Benedetto Del Tronto|San Benedetto Belbo|San Benedetto Po|San Benedetto Dei Marsi|San Benedetto In Perillis|San Benedetto Ullano|San Benigno Canavese|San Bernardino Verbano|San Biagio Platani|San Biagio Saracinisco|San Biagio Della Cima|San Biagio Di Callalta|San Biase|San Bonifacio|San Buono|San Calogero|San Candido|San Canzian Disonzo|San Carlo Canavese|San Casciano Dei Bagni|San Casciano In Val Di Pesa|San Cataldo|San Cesario Di Lecce|San Cesario Sul Panaro|San Chirico Nuovo|San Chirico Raparo|San Cipirello|San Cipriano Daversa|San Cipriano Po|San Cipriano Picentino|San Clemente|San Colombano Certenoli|San Colombano Al Lambro|San Colombano Belmonte|San Cono|San Cosmo Albanese|San Costantino Calabro|San Costantino Albanese|San Costanzo|San Cristoforo|San Damiano Dasti|San Damiano Macra|San Damiano Al Colle|San Daniele Po|San Daniele Del Friuli|San Demetrio Corone|San Demetrio Ne Vestini|San Didero|Sandigliano|San Donaci|San Dona Di Piave|San Donato Val Di Comino|San Donato Di Ninea|San Donato Di Lecce|San Donato Milanese|Sandrigo|San Fele|San Felice Del Molise|San Felice A Cancello|San Felice Sul Panaro|San Felice Circeo|San Felice Del Benaco|San Ferdinando Di Puglia|San Fermo Della Battaglia|San Fili|San Filippo Del Mela|San Fior|San Fiorano|San Floriano Del Collio|San Floro|San Francesco Al Campo|Aglientu|San Fratello|Sanfre|Sanfront|Sangano|San Gavino Monreale|San Gemini|San Genesio Atesino|San Genesio Ed Uniti|San Gennaro Vesuviano|San Germano Vercellese|San Germano Chisone|San Gervasio Bresciano|San Giacomo Degli Schiavoni|San Giacomo Filippo|San Giacomo Delle Segnate|Sangiano|San Gillio|San Gimignano|San Ginesio|Sangineto|San Giorgio Monferrato|San Giorgio A Liri|San Giorgio Albanese|San Giorgio Ionico|San Giorgio Bigarello|San Giorgio Su Legnano|San Giorgio Di Lomellina|San Giorgio Piacentino|San Giorgio Lucano|San Giorgio Morgeto|San Giorgio Canavese|San Giorgio Della Richinvelda|San Giorgio A Cremano|San Giorgio Delle Pertiche|San Giorgio Del Sannio|San Giorgio Di Nogaro|San Giorgio Di Piano|San Giorgio In Bosco|San Giorgio La Molara|San Giorgio Scarampi|San Giorio Di Susa|San Giovanni Valdarno|San Giovanni Di Gerace|San Giovanni Al Natisone|San Giovanni A Piro|San Giovanni Bianco|San Giovanni Del Dosso|Villa San Giovanni In Tuscia|San Giovanni Gemini|San Giovanni Ilarione|San Giovanni Incarico|San Giovanni In Croce|San Giovanni In Fiore|San Giovanni In Galdo|San Giovanni In Marignano|San Giovanni La Punta|San Giovanni Lipioni|San Giovanni Lupatoto|San Giovanni Rotondo|San Giuliano Del Sannio|San Giuliano Di Puglia|San Giuliano Milanese|San Giuseppe Vesuviano|San Giuseppe Jato|San Giustino|San Giusto Canavese|San Godenzo|San Gregorio Nelle Alpi|San Gregorio Matese|San Gregorio Di Catania|San Gregorio Dippona|San Gregorio Da Sassola|San Gregorio Magno|Sanguinetto|San Lazzaro Di Savena|San Leo|San Leonardo|San Leonardo In Passiria|San Leucio Del Sannio|San Lorenzello|San Lorenzo Di Sebato|San Lorenzo Al Mare|San Lorenzo In Campo|San Lorenzo|San Lorenzo Bellizzi|San Lorenzo Del Vallo|San Lorenzo Isontino|San Lorenzo Maggiore|San Lorenzo Nuovo|San Luca|San Lucido|San Lupo|Sanluri|San Mango Sul Calore|San Mango Daquino|San Mango Piemonte|San Marcellino|San Marcello|San Marco Argentano|San Marco Dalunzio|San Marco Dei Cavoti|San Marco In Lamis|San Marco La Catola|San Martino Alfieri|San Martino In Badia|San Martino In Passiria|San Martino In Pensilis|San Martino Sulla Marrucina|San Martino Di Finita|San Martino Dagri|San Martino Di Venezze|San Martino Canavese|San Martino Al Tagliamento|San Martino Sannita|San Martino Buon Albergo|San Martino Dallargine|San Martino Del Lago|San Martino Di Lupari|San Martino In Rio|San Martino In Strada|San Martino Siccomario|San Martino Valle Caudina|San Marzano Oliveto|San Marzano Di San Giuseppe|San Marzano Sul Sarno|San Massimo|San Maurizio Canavese|San Maurizio Dopaglio|San Mauro Marchesato|San Mauro Pascoli|San Mauro Castelverde|San Mauro Forte|San Mauro Torinese|San Mauro Cilento|San Mauro La Bruca|San Michele Di Serino|San Michele Di Ganzaria|San Michele Mondovi|San Michele Al Tagliamento|San Michele Alladige|San Michele Salentino|San Miniato|Sannazzaro De Burgondi|San Nazzaro|San Nazzaro Val Cavargna|San Nazzaro Sesia|Sannicandro Di Bari|San Nicandro Garganico|San Nicola La Strada|San Nicola Dellalto|San Nicola Da Crissa|Sannicola|San Nicola Arcella|San Nicola Baronia|San Nicola Manfredi|San Nicolo Di Comelico|San Pancrazio|San Pancrazio Salentino|San Paolo Di Jesi|San Paolo Di Civitate|San Paolo Bel Sito|San Paolo Solbrito|San Pellegrino Terme|San Pier Disonzo|San Pier Niceto|San Piero Patti|San Pietro Di Cadore|San Pietro Al Tanagro|San Pietro Val Lemina|San Pietro Al Natisone|San Pietro A Maida|San Pietro Apostolo|San Pietro Avellana|San Pietro Clarenza|San Pietro Di Carida|San Pietro Di Feletto|San Pietro Di Morubio|San Pietro In Gu|San Pietro In Amantea|San Pietro In Cariano|San Pietro In Casale|San Pietro Infine|San Pietro In Guarano|San Pietro In Lama|San Pietro Mosezzo|San Pietro Mussolino|Villa San Pietro|San Pietro Vernotico|San Pietro Viminario|San Pio Delle Camere|San Polo Matese|San Polo Denza|San Polo Di Piave|San Polo Dei Cavalieri|San Ponso|San Possidonio|San Potito Ultra|San Potito Sannitico|San Prisco|San Procopio|San Prospero|San Quirico Dorcia|San Quirino|San Raffaele Cimena|Sanremo|San Roberto|San Rocco Al Porto|San Romano In Garfagnana|San Rufo|San Salvatore Monferrato|San Salvatore Telesino|San Salvatore Di Fitalia|San Salvo|San Sebastiano Curone|San Sebastiano Al Vesuvio|San Sebastiano Da Po|San Secondo Parmense|San Secondo Di Pinerolo|Sansepolcro|San Severino Marche|San Severino Lucano|San Severo|San Siro|San Sossio Baronia|San Sostene|San Sosti|San Sperate|Santa Brigida|Santa Caterina Villarmosa|Santa Caterina Dello Ionio|Santa Caterina Albanese|Santa Cesarea Terme|Santa Cristina Valgardena|Santa Cristina Gela|Santa Cristina E Bissone|Santa Cristina Daspromonte|Santa Croce Sullarno|Santa Croce Camerina|Santa Croce Del Sannio|Santa Croce Di Magliano|Santadi|Santa Domenica Talao|Santa Domenica Vittoria|Santa Elisabetta|Santa Fiora|Santa Flavia|Santagapito|Santagata Fossili|Santagata Bolognese|Santagata Di Esaro|Santagata Di Puglia|Santagata Sul Santerno|Santagata De Goti|Santagata Del Bianco|Santagata Di Militello|Santagata Feltria|Santagata Li Battiati|Santa Giuletta|Santa Giusta|Santa Giustina|Santa Giustina In Colle|Santagnello|Santalbano Stura|Santalessio Con Vialone|Santalessio In Aspromonte|Santalessio Siculo|Santalfio|Santa Luce|Santa Lucia Di Serino|Santa Lucia Del Mela|Santa Lucia Di Piave|Santa Margherita Di Belice|Santa Margherita Ligure|Santa Margherita Di Staffora|Santa Maria A Monte|Santa Maria A Vico|Santa Maria Capua Vetere|Travaco Siccomario|Santa Maria Della Versa|Santa Maria Del Molise|Santa Maria Di Licodia|Santa Maria Di Sala|Santa Maria Hoe|Santa Maria Imbaro|Santa Maria La Fossa|Santa Maria La Longa|Santa Maria Maggiore|Santa Maria Nuova|Santa Marina|Santa Marina Salina|Santa Marinella|Santambrogio Sul Garigliano|Santambrogio Di Torino|Santambrogio Di Valpolicella|Santomenna|San Tammaro|Santanastasia|Santanatolia Di Narco|Santandrea Di Conza|Santandrea Del Garigliano|Santandrea Apostolo Dello Ionio|Santandrea Frius|Santangelo Dalife|Santangelo Lodigiano|Santangelo Di Piove Di Sacco|Santangelo Lomellina|Santangelo A Cupolo|Santangelo A Fasanella|Santangelo Allesca|Santangelo A Scala|Santangelo Dei Lombardi|Santangelo Del Pesco|Santangelo Di Brolo|Santangelo Romano|Santangelo In Pontano|Santangelo In Vado|Santangelo Le Fratte|Santangelo Limosano|Santangelo Muxaro|Santa Ninfa|Santanna Dalfaedo|Santantimo|Santantioco|Santantonino Di Susa|Villa Santantonio|Santantonio Abate|Santa Paolina|Santapollinare|Santarcangelo Di Romagna|Santarcangelo|Santarpino|Santarsenio|Santa Severina|Santa Sofia Depiro|Santa Sofia|Santa Teresa Di Riva|Santa Teresa Gallura|Santa Venerina|Santa Vittoria In Matenano|Santa Vittoria Dalba|Santegidio Del Monte Albino|Santegidio Alla Vibrata|Santelena|Santelia A Pianisi|Santelia Fiumerapido|Vallefiorita|Santelpidio A Mare|Sante Marie|Santena|San Teodoro|San Teodoro|Santeramo In Colle|Santeufemia A Maiella|Santeufemia Daspromonte|Santeusanio Del Sangro|Santeusanio Forconese|Santhia|Santi Cosma E Damiano|Santilario Dello Ionio|Santilario Denza|Santippolito|Santolcese|San Tomaso Agordino|Santomero|Santonofrio|Santopadre|Santoreste|Santorso|Santorsola Terme|Santo Stefano Quisquina|Santo Stefano Del Sole|Santo Stefano Di Rogliano|Santo Stefano Di Sessanio|Santo Stefano Ticino|Santo Stefano Lodigiano|Santo Stefano Di Magra|Villa Santo Stefano|Santo Stefano Al Mare|Santo Stefano Belbo|Santo Stefano Daveto|Santo Stefano Di Camastra|Santo Stefano In Aspromonte|Santo Stefano Roero|San Stino Di Livenza|Santu Lussurgiu|Santurbano|San Valentino In Abruzzo Citeriore|San Valentino Torio|San Venanzo|San Vendemiano|San Vero Milis|San Vincenzo La Costa|San Vincenzo Valle Roveto|San Vincenzo|San Vitaliano|San Vito Di Cadore|San Vito Sullo Ionio|San Vito Chietino|San Vito Dei Normanni|San Vito Romano|San Vito Di Leguzzano|San Vito|San Vito Al Tagliamento|San Vito Al Torre|San Vito Di Fagagna|San Vito Lo Capo|San Vittore Del Lazio|San Vittore Olona|Sanza|Sanzeno|San Zeno Naviglio|San Zeno Di Montagna|San Zenone Al Lambro|San Zenone Al Po|San Zenone Degli Ezzelini|Saonara|Saponara|Sappada|Sapri|Saracena|Saracinesco|Sarcedo|Sarconi|Sardara|Sardigliano|Sarego|Sarentino|Sarezzano|Sarezzo|Sarmato|Sarmede|Sarnano|Sarnico|Sarno|Sarnonico|Saronno|Sarre|Sarroch|Sarsina|Sarteano|Sartirana Lomellina|Sarule|Sarzana|Sassano|Sassari|Sassello|Sassetta|Sassinoro|Sasso Di Castalda|Sassofeltrio|Sassoferrato|Sassuolo|Satriano|Sauris|Sauze Di Cesana|Sauze Doulx|Sava|Savelli|Saviano|Savigliano|Savignano Irpino|Savignano Sul Rubicone|Savignano Sul Panaro|Savignone|Saviore Delladamello|Savoca|Savogna|Savogna Disonzo|Savona|Scafa|Scafati|Scagnello|Scala Coeli|Scala|Scaldasole|Scalea|Scalenghe|Scaletta Zanclea|Scampitella|Scandale|Scandiano|Scandolara Ravara|Scandolara Ripa Doglio|Scandriglia|Scanno|Scano Di Montiferro|Scansano|Scanzorosciate|Scapoli|Scarlino|Scarmagno|Scarnafigi|Scena|Scerni|Scheggia E Pascelupo|Scheggino|Schiavi Di Abruzzo|Schiavon|Schignano|Schilpario|Schio|Schivenoglia|Sciacca|Sciara|Scicli|Scido|Scilla|Scillato|Sciolze|Scisciano|Sclafani Bagni|Scontrone|Scopa|Scopello|Scoppito|Scordia|Scorrano|Scorze|Scurcola Marsicana|Scurelle|Scurzolengo|Seborga|Secinaro|Secli|Secugnago|Sedegliano|Sedico|Sedilo|Sedini|Sedriano|Sedrina|Sefro|Segariu|Seggiano|Segni|Segonzano|Segrate|Segusino|Selargius|Selci|Selegas|Sellano|Sellero|Sellia|Sellia Marina|Selva Di Val Gardena|Selva Di Cadore|Selva Dei Molini|Selva Di Progno|Selvazzano Dentro|Selvino|Semestene|Semiana|Seminara|Semproniano|Senago|Senale San Felice|Senales|Seneghe|Senerchia|Seniga|Senigallia|Senis|Senise|Senna Comasco|Senna Lodigiana|Sennariolo|Sennori|Senorbi|Sepino|Sequals|Seravezza|Serdiana|Seregno|Seren Del Grappa|Sergnano|Seriate|Serina|Serino|Serle|Sermide E Felonica|Sirmione|Sermoneta|Sernaglia Della Battaglia|Sernio|Serole|Serra San Bruno|Serra Ricco|Serracapriola|Serra Daiello|Serra De Conti|Serradifalco|Serralunga Di Crea|Serralunga Dalba|Serramanna|Serramezzana|Serramonacesca|Serrapetrona|Serrara Fontana|Serra San Quirico|Serra Santabbondio|Serrastretta|Serrata|Serravalle Scrivia|Serravalle Langhe|Serravalle Pistoiese|Serravalle Di Chienti|Serravalle A Po|Serravalle Sesia|Serre|Serrenti|Serri|Serrone|Sersale|Sovramonte|Sessa Aurunca|Sessa Cilento|Sessame|Sessano Del Molise|Sestino|Sesto Campano|Sesto Ed Uniti|Sesto Fiorentino|Sesto Al Reghena|Sesto|Sesto Calende|Sestola|Sesto San Giovanni|Sestriere|Sestri Levante|Sestu|Settala|Settefrati|Settime|Settimo San Pietro|Settimo Milanese|Settimo Rottaro|Settimo Vittone|Settimo Torinese|Settingiano|Setzu|Seui|Seulo|Seveso|Sezzadio|Sezze|Sfruz|Sgonico Zgonik|Sgurgola|Siamaggiore|Siamanna|Siano|Siapiccia|Siculiana|Siddi|Siderno|Siena|Sigillo|Signa|Silandro|Silanus|Siligo|Siliqua|Silius|Sillavengo|Silvano Dorba|Silvano Pietra|Silvi|Simala|Simaxis|Simbario|Simeri Crichi|Sinagra|Sindia|Sini|Sinio|Siniscola|Sinnai|Sinopoli|Siracusa|Sirignano|Siris|Sirolo|Sirone|Sirtori|Siurgus Donigala|Sizzano|Sluderno|Smerillo|Soave|Socchieve|Soddi|Sogliano Al Rubicone|Sogliano Cavour|Soglio|Soiano Del Lago|Solagna|Solarino|Solaro|Solarolo|Solarolo Rainerio|Solarussa|Solbiate Arno|Solbiate Olona|Soldano|Soleminis|Solero|Solesino|Soleto|Solferino|Soliera|Solignano|Sulmona|Solofra|Solonghello|Solopaca|Solto Collina|Solza|Somaglia|Somano|Somma Lombardo|Somma Vesuviana|Sommacampagna|Sommariva Del Bosco|Sommariva Perno|Sommatino|Sommo|Sona|Soncino|Sondalo|Sondrio|Songavazzo|Sonico|Sonnino|Sora|Soraga Di Fassa|Soragna|Sorano|Sorbo Serpico|Sorbo San Basile|Sordevolo|Sordio|Soresina|Sorga|Sorgono|Sori|Sorianello|Soriano Calabro|Soriano Nel Cimino|Sorico|Soriso|Sorisole|Sormano|Sorradile|Sorrento|Sorso|Sortino|Sospiro|Sospirolo|Sossano|Sostegno|Sotto Il Monte Giovanni Xxiii|Sover|Soverato|Sovere|Soveria Mannelli|Soveria Simeri|Soverzene|Sovicille|Sovico|Sovizzo|Sozzago|Spadafora|Spadola|Sparanise|Sparone|Specchia|Spello|Sperlinga|Sperlonga|Sperone|Spessa|Spezzano Albanese|Spezzano Della Sila|Spiazzo|Spigno Monferrato|Spigno Saturnia|Spilamberto|Spilimbergo|Spilinga|Spinadesco|Spinazzola|Spinea|Spineda|Spinete|Spineto Scrivia|Spinetoli|Spino Dadda|Spinone Al Lago|Spinoso|Spirano|Spoleto|Spoltore|Spongano|Spormaggiore|Sporminore|Spotorno|Spresiano|Spriana|Squillace|Squinzano|Staffolo|Stagno Lombardo|Staiti|Staletti|Stanghella|Staranzano|Stazzano|Stazzema|Stazzona|Stefanaconi|Stella|Stellanello|Stelvio|Stenico|Sternatia|Stezzano|Stienta|Stigliano|Stignano|Stilo|Stimigliano|Stio|Stornara|Stornarella|Storo|Stra|Stradella|Strambinello|Strambino|Strangolagalli|Stregna|Strembo|Stresa|Strevi|Striano|Strona|Stroncone|Strongoli|Stroppiana|Stroppo|Strozza|Sturno|Subbiano|Subiaco|Succivo|Sueglio|Suelli|Suello|Suisio|Sulbiate|Sulzano|Sumirago|Summonte|Suni|Suno|Supersano|Supino|Surano|Surbo|Susa|Susegana|Sustinente|Sutera|Sutri|Sutrio|Suvereto|Suzzara|Taceno|Tadasuni|Taggia|Tagliacozzo|Taglio Di Po|Tagliolo Monferrato|Taibon Agordino|Taino|Talamello|Talamona|Talana|Taleggio|Talla|Talmassons|Tambre|Taormina|Tarano|Taranta Peligna|Tarantasca|Taranto|Tarcento|Tarsia|Tartano|Tarvisio|Tarzo|Tassarolo|Taurano|Taurasi|Taurianova|Taurisano|Tavagnacco|Tavagnasco|Tavenna|Taverna|Tavernerio|Tavernola Bergamasca|Taviano|Tavigliano|Tavoleto|Tavullia|Teana|Teano|Teglio|Teglio Veneto|Telese Terme|Telgate|Telti|Telve|Telve Di Sopra|Tempio Pausania|Temu|Tenna|Tenno|Teolo|Teora|Teramo|Terdobbiate|Terelle|Terento|Terlano|Terlizzi|Termeno Sulla Strada Del Vino|Termini Imerese|Termoli|Ternate|Ternengo|Terni|Terno Disola|Terracina|Terragnolo|Terralba|Terranuova Bracciolini|Terranova Da Sibari|Terranova Dei Passerini|Terranova Di Pollino|Terranova Sappo Minulio|Terrasini|Terrassa Padovana|Terravecchia|Terrazzo|Terricciola|Terruggia|Tertenia|Terzigno|Terzo|Terzo Daquileia|Terzolas|Terzorio|Tesero|Tesimo|Tessennano|Testico|Teti|Teulada|Teverola|Tezze Sul Brenta|Thiene|Thiesi|Tiana|Ticengo|Ticineto|Tiggiano|Tiglieto|Tigliole|Tignale|Tinnura|Tione Degli Abruzzi|Tione Di Trento|Tirano|Tires|Tiriolo|Tirolo|Tissi|Tito|Tivoli|Tizzano Val Parma|Toano|Tocco Caudio|Tocco Da Casauria|Toceno|Todi|Toffia|Toirano|Tolentino|Tolfa|Tollegno|Tollo|Tolmezzo|Tolve|Tombolo|Ton|Tonara|Tonco|Tonengo|Tora E Piccilli|Torano Castello|Torano Nuovo|Torbole Casaglia|Torcegno|Torchiara|Torchiarolo|Torella Dei Lombardi|Torella Del Sannio|Torgiano|Torgnon|Torino Di Sangro|Torino|Toritto|Torlino Vimercati|Tornaco|Tornareccio|Tornata|Tornimparte|Torno|Tornolo|Toro|Torpe|Torraca|Torralba|Torrazza Coste|Torrazza Piemonte|Torrazzo|Torre Di Ruggiero|Torre Mondovi|Torre Cajetani|Torre Di Santa Maria|Torre Annunziata|Torreano|Torre Canavese|Torrebelvicino|Torre Beretti E Castellaro|Torre Boldone|Torre Bormida|Torrebruna|Torrecuso|Torre Darese|Torre De Busi|Torre De Picenardi|Torre Del Greco|Torre De Negri|Torre De Passeri|Torre De Roveri|Torre Di Mosto|Torre Disola|Torreglia|Torregrotta|Torre Le Nocelle|Torremaggiore|Torre Orsaia|Torre Pallavicina|Torre Pellice|Torre San Giorgio|Torre San Patrizio|Torre Santa Susanna|Torresina|Torretta|Torrevecchia Teatina|Torrevecchia Pia|Torri In Sabina|Torri Del Benaco|Torrice|Torricella Peligna|Torricella Verzate|Torricella In Sabina|Torricella|Torricella Sicura|Torricella Del Pizzo|Torri Di Quartesolo|Torriglia|Torrile|Torrioni|Torrita Tiberina|Torrita Di Siena|Tortona|Tortora|Tortorella|Tortoreto|Tortorici|Torviscosa|Tuscania|Toscolano Maderno|Tossicia|Tovo San Giacomo|Tovo Di Santagata|Trabia|Tradate|Tramatza|Trambileno|Tramonti|Tramonti Di Sopra|Tramonti Di Sotto|Tramutola|Trana|Trani|Traona|Trapani|Trappeto|Trarego Viggiona|Trasacco|Trasaghis|Trasquera|Tratalias|Travagliato|Traves|Travedona Monate|Traversella|Traversetolo|Travesio|Travo|Trebaseleghe|Trebisacce|Trecastagni|Trecate|Trecchina|Trecenta|Tredozio|Treglio|Tregnago|Treia|Treiso|Tremestieri Etneo|Tremosine Sul Garda|Trentinara|Trento|Trentola Ducenta|Trenzano|Treppo Grande|Trepuzzi|Trequanda|Tresana|Trescore Balneario|Trescore Cremasco|Tresivio|Tresnuraghes|Trevenzuolo|Trevi|Trevi Nel Lazio|Trevico|Treviglio|Trevignano Romano|Trevignano|Treville|Treviolo|Treviso Bresciano|Treviso|Trezzano Rosa|Trezzano Sul Naviglio|Trezzo Tinella|Trezzo Sulladda|Trezzone|Tribano|Tribiano|Tribogna|Tricarico|Tricase|Tricerro|Tricesimo|Triei|Trieste|Triggiano|Trigolo|Trinita|Trinita Dagultu E Vignola|Trino|Triora|Tripi|Trisobbio|Trissino|Triuggio|Trivento|Trivigliano|Trivignano Udinese|Trivigno|Trivolzio|Trodena Nel Parco Naturale|Trofarello|Troia|Troina|Tromello|Trontano|Tronzano Vercellese|Tropea|Trovo|Truccazzano|Tubre|Tufara|Tufillo|Tufino|Tufo|Tuglie|Tuili|Tula|Tuoro Sul Trasimeno|Valvestino|Turano Lodigiano|Turate|Turbigo|Turi|Turri|Turriaco|Turrivalignani|Tursi|Tusa|Uboldo|Ucria|Udine|Ugento|Uggiano La Chiesa|Uggiate Trevano|Ula Tirso|Ulassai|Ultimo|Umbriatico|Urago Doglio|Uras|Urbana|Urbania|Urbe|Urbino|Urbisaglia|Urgnano|Uri|Ururi|Urzulei|Uscio|Usellus|Usini|Usmate Velate|Ussana|Ussaramanna|Ussassai|Usseaux|Usseglio|Ussita|Ustica|Uta|Uzzano|Vaccarizzo Albanese|Vacone|Vacri|Vadena|Vado Ligure|Vaglia|Vaglio Serra|Vaglio Basilicata|Vagli Sotto|Vaiano Cremasco|Vaiano|Vaie|Vailate|Vairano Patenora|Valbondione|Valbrembo|Valbrevenna|Valbrona|Valdagno|Valdaora|Valdastico|Val Della Torre|Valdengo|Valdidentro|Valdieri|Valdina|Val Di Nizza|Valdisotto|Val Di Vizze|Valdobbiadene|Valduggia|Valeggio Sul Mincio|Valeggio|Valentano|Valenza|Valenzano|Valera Fratta|Valfabbrica|Valfenera|Valfloriana|Valfurva|Valganna|Valgioie|Valgoglio|Valgrana|Valgreghentino|Valgrisenche|Valguarnera Caropepe|Vallada Agordina|Vallanzengo|Vallarsa|Vallata|Valle Di Cadore|Valle Di Maddaloni|Valle Lomellina|Valle Agricola|Valle Aurina|Vallebona|Valle Castellana|Vallecorsa|Vallecrosia|Valle Di Casies|Valledolmo|Valledoria|Vallemaio|Vallelonga|Vallelunga Pratameno|Vallepietra|Vallerano|Vallermosa|Vallerotonda|Vallesaccarda|Valle Salimbene|Valle San Nicolao|Valleve|Valli Del Pasubio|Vallinfreda|Vallio Terme|Vallo Di Nera|Vallo Della Lucania|Vallo Torinese|Valloriate|Valmacca|Valmadrera|Val Masino|Valmontone|Valmorea|Valmozzola|Valnegra|Valpelline|Valperga|Valsavarenche|Valstrona|Valtopina|Valtournenche|Valtorta|Valva|Valverde|Vandoies|Vanzaghello|Vanzago|Vanzone Con San Carlo|Vaprio Dadda|Vaprio Dagogna|Varallo|Varallo Pombia|Varano Borghi|Varano De Melegari|Varapodio|Varazze|Varco Sabino|Varedo|Varena|Varenna|Varese Ligure|Varese|Varisella|Varmo|Varna|Varsi|Varzi|Varzo|Vasia|Vastogirardi|Vauda Canavese|Vazzano|Vazzola|Vecchiano|Vedano Olona|Vedano Al Lambro|Vedelago|Vedeseta|Veduggio Con Colzano|Veggiano|Veglie|Veglio|Vejano|Veleso|Velezzo Lomellina|Velletri|Vellezzo Bellini|Velo Veronese|Velo Dastico|Velturno|Venafro|Venaus|Venaria Reale|Venarotta|Venasca|Vendone|Vendrogno|Venegono Inferiore|Venegono Superiore|Venetico|Venezia|Veniano|Venosa|Venticano|Ventimiglia Di Sicilia|Ventimiglia|Ventotene|Venzone|Verano Brianza|Verano|Verbania|Verbicaro|Vercana|Verceia|Vercelli|Vercurago|Verdellino|Verdello|Verduno|Vergato|Verghereto|Vergiate|Vermiglio|Vernante|Vernasca|Vernate|Vernazza|Vernio|Vernole|Verolanuova|Verolavecchia|Verolengo|Veroli|Verona|Verrayes|Verretto|Verrone|Verrua Savoia|Verrua Po|Vertemate Con Minoprio|Vertova|Verucchio|Vervio|Verzegnis|Verzino|Verzuolo|Vescovana|Vescovato|Vesime|Vespolate|Vessalico|Vestenanova|Vestigne|Vestone|Vetralla|Vetto|Vezza Doglio|Vezza Dalba|Vezzano Ligure|Vezzano Sul Crostolo|Vezzi Portio|Viadana|Viadanica|Viagrande|Viale|Vialfre|Viano|Viareggio|Viarigi|Vibonati|Vicalvi|Vicari|Vicchio|Vicenza|Vicoforte|Vico Del Gargano|Vico Nel Lazio|Villa Literno|Vico Equense|Vicoli|Vicolungo|Ziano Piacentino|Vicopisano|Vicovaro|Vidigulfo|Vidor|Vidracco|Vieste|Vietri Di Potenza|Vietri Sul Mare|Vigano San Martino|Vigano|Vigarano Mainarda|Vigasio|Vigevano|Viggianello|Viggiano|Viggiu|Vighizzolo Deste|Vigliano Dasti|Vigliano Biellese|Vignale Monferrato|Vignanello|Vignate|Vignola|Vignola Falesina|Vignole Borbera|Vignolo|Vignone|Vigo Di Cadore|Vigodarzere|Vigolo|Vigolzone|Vigone|Vigonovo|Vigonza|Viguzzolo|Villa Santa Lucia|Villadossola|Villa Di Chiavenna|Villa Di Tirano|Villa Santina|Villa Bartolomea|Villa Basilica|Villabassa|Villabate|Villa Biscossi|Villa Carcina|Villa Castelli|Villa Celiera|Villachiara|Villacidro|Villa Collemandina|Villa Cortese|Villa Dadda|Villadeati|Villa Del Bosco|Villa Del Conte|Villa Di Serio|Villa Estense|Villa Dogna|Villadose|Villafalletto|Villa Faraldi|Villafranca Sicula|Villafranca Dasti|Villafranca In Lunigiana|Villafranca Padovana|Villafranca Piemonte|Villafranca Di Verona|Villafranca Tirrena|Villafrati|Villaga|Villagrande Strisaili|Villa Guardia|Villa Lagarina|Villalago|Villalba|Villalfonsina|Villalvernia|Villamagna|Villamaina|Villamar|Villamarzana|Villamassargia|Villa Minozzo|Villamiroglio|Villandro|Villanova Monferrato|Villanova Del Battista|Villanova Mondovi|Villanova Dalbenga|Villanova Del Sillaro|Villanova Biellese|Villanova Di Camposampiero|Villanova Sullarda|Villeneuve|Villanova Canavese|Villanova Dardenghi|Villanova Dasti|Villanova Del Ghebbo|Villanovaforru|Villanovafranca|Villanova Marchesana|Villanova Monteleone|Villanova Solaro|Villanova Truschedu|Villanova Tulo|Villanterio|Villanuova Sul Clisi|Villaputzu|Villar Dora|Villarbasse|Villarboit|Villareggia|Villar Focchiardo|Villaromagnano|Villarosa|Villar Pellice|Villar Perosa|Villar San Costanzo|Villasalto|Villasanta|Villa San Giovanni|Villa San Secondo|Villa Santa Lucia Degli Abruzzi|Villa Santa Maria|Villa Santangelo|Villasor|Villaspeciosa|Villastellone|Villata|Villaurbana|Villavallelonga|Villaverla|Villetta Barrea|Villette|Villesse|Villimpenta|Villongo|Villorba|Vilminore Di Scalve|Vimercate|Vimodrone|Vinadio|Vinchiaturo|Vinchio|Vinci|Vinovo|Vinzaglio|Viola|Vione|Vipiteno|Virle Piemonte|Visano|Vische|Visciano|Visco|Visone|Visso|Vistarino|Vistrorio|Vita|Viterbo|Viticuso|Vito Dasio|Vitorchiano|Vittoria|Vittorio Veneto|Vittorito|Vittuone|Vitulazio|Vitulano|Viu|Vivaro Romano|Vivaro|Viverone|Vizzini|Vizzola Ticino|Vizzolo Predabissi|Vo|Vobarno|Vobbia|Vocca|Vodo Cadore|Voghera|Voghiera|Vogogna|Volano|Volla|Volongo|Volpago Del Montello|Volpara|Volpedo|Volpeglino|Volpiano|Voltaggio|Voltago Agordino|Volta Mantovana|Volterra|Voltido|Volturara Irpina|Volturara Appula|Volturino|Volvera|Vottignasco|Zaccanopoli|Zafferana Etnea|Zagarise|Zagarolo|Zambrone|Zandobbio|Zane|Zanica|Zavattarello|Zeccone|Zeddiani|Zelbio|Zelo Buon Persico|Zeme|Zenevredo|Zenson Di Piave|Zerba|Zerbo|Zerbolo|Zerfaliu|Zeri|Zermeghedo|Zero Branco|Zevio|Ziano Di Fiemme|Zibido San Giacomo|Zignago|Zimella|Zimone|Zinasco|Zoagli|Zocca|Zogno|Zola Predosa|Zollino|Zone|Zoppe Di Cadore|Zoppola|Zovencedo|Zubiena|Zuccarello|Zugliano|Zuglio|Zumaglia|Zumpano|Zungoli|Zungri|Lariano|Lamezia Terme|Santanna Arresi|Terme Vigliatore|Acquedolci|Ladispoli|Ardea|Badesi|Sicignano Degli Alburni|Molina Aterno|Scanzano Jonico|Portopalo Di Capo Passero|Avigliano Umbro|Viddalba|Casapesenna|Castro|Cellole|Porto Cesareo|San Cassiano|Vajont|Ordona|Zapponeta|Blufi|Paterno|Masainas|Mazzarrone|Ciampino|Santa Maria La Carita|Golfo Aranci|Loiri Porto San Paolo|Santantonio Di Gallura|San Ferdinando|Villaperuccio|Priolo Gargallo|Trecase|Petrosino|Tergu|Maniace|Santa Maria Coghinas|Cardedu|Torrenova|Ragalna|Castiadas|Massa Di Somma|Stintino|Piscinas|Erula|Bellizzi|San Cesareo|Fiumicino|Statte|Due Carrare|Padru|Montiglio Monferrato|Ronzo Chienis|Cavallino Treporti|Fonte Nuova|Campolongo Tapogliano|Lonato Del Garda|Ledro|Comano Terme|Gravedona Ed Uniti|Mappano|Rivignano Teor|Trecastelli|Fabbriche Di Vergemoli|Valsamoggia|Figline E Incisa Valdarno|Castelfranco Piandisco|Fiscaglia|Poggio Torriana|Sissa Trecasali|Scarperia E San Piero|Casciana Terme Lari|Crespina Lorenzana|Pratovecchio Stia|Montoro|Vallefoglia|Quero Vas|Santomobono Terme|Val Brembilla|Bellagio|Colverde|Verderio|Cornale E Bastida|Maccagno Con Pino E Veddasca|Borgo Virgilio|Tremezzina|Longarone|Valdaone|Predaia|San Lorenzo Dorsino|Valvasone Arzene|Sillano Giuncugnano|La Valletta Brianza|Altavalle|Altopiano Della Vigolana|Amblar Don|Borgo Chiese|Borgo Lares|Castel Ivano|Cembra Lisignago|Conta|Madruzzo|Porte Di Rendena|Primiero San Martino Di Castrozza|Sella Giudicarie|Tre Ville|Vallelaghi|Ville Danaunia|Ventasso|Pieve Di Bono Prezzo|Dimaro Folgarida|Polesine Zibello|Montescudo Monte Colombo|Alto Reno Terme|Borgomezzavalle|Lessona|Corteolona E Genzone|Campiglia Cervo|Val Di Zoldo|Alpago|Abetone Cutigliano|San Marcello Piteglio|Montalcino|Terre Roveresche|Colli Al Metauro|Terre Del Reno|Valfornace|Alta Valle Intelvi|Val Liona|Casali Del Manco|Alta Val Tidone|Montalto Carpasio|Cassano Spinola|Alto Sermenza|San Giovanni Di Fassa Sen Jan|Rio|Laterina Pergine Valdarno|Castelgerundo|Centro Valle Intelvi|Valvarrone|Borgo Mantovano|Alluvioni Piovera|Cellio Con Breia|Treppo Ligosullo|Fiumicello Villa Vicentina|Barbarano Mossano|Borgo Veneto|Corigliano Rossano|Valle Cannobina|Val Di Chy|Borgocarbonara|Terre Dadige|Barberino Tavarnelle|Tresignana|Riva Del Po|Sorbolo Mezzani|Solbiate Con Cagno|Sassocorvaro Auditore|Quaregna Cerreto|Valchiusa|Gattico Veruno|Valdilana|Piadena Drizzona|Colli Verdi|Lu E Cuccaro Monferrato|Borgo Valbelluna|Pieve Del Grappa|Valbrenta|Vermezzo Con Zelo|Cadrezzate Con Osmate|Colceresa|Lusiana Conco|Presicce Acquarica\",\n            \"provinceOrCountry\": \"PDLOLCSIORPEMIPZRGFGCNMTAQRIPZBZSANACTCTCTCTCTFRCSBSPUMNCRVTCSVVAPTRAPBACLCBISALCSFRBACTBGBGROBSVRRMNARCPCNASSENPTATTOPDCRRCISFRBSBLRMVAMBNOAGSAANVIAOMBORENAQAVCSUDCSCEBIAOTOBNIMLCCNSSTNTOPVVCPEBLSVFRCNTEORMISABGVCPZRMPVSOVRPRCNCOSVALBAFGCOVICZTOTNMBCSPDREBGCOSVSVVAPVSOATPVTPMETNBZORAGALCSLELESAAQBSALRASSBGMEPAMTALVCCEMEPAPAORAOBLTRLERMBGBGBGBGTOVITOTOPCCOBASVALAVPASAVIFMCSCHVITVCNPACSLUTRCEFRALBGCOSAFMCSUDCZFRCZRIBGSPTRCSNOBNBLUDNAFRTEANCZSOTNTOSVBILETOPNAVBTBZSSBSVAARVRBSSATOPDRMCRATLCVERCBGAOBZAORMFRATMERCRIVBAQCOFGPZRMBOVBAOPUBNMCBNBZCOMCAPSOIMFGCSLTSAIMAQUDAVFRLEAGATPNNUORVCSUTVFRBGANCHORGRRMVATNSPVRMIMBVISSORSOBGRCVVPVGEMIARCOBOFECNCNCZCHAVRORMCHCETONUVBVTMINOPZIMSUFRSVAOLEVBNOCOBNBNFRPDROALAPPDTRBGVABLVITERMUDUDRMBSAOSSNUNAPDVISASIAPFGRIVIVCVISIMNTVRIMICAPGCOORENATORAQPZSACHFRSATEAVTRUDNUSRSAMSVBIMBLFRNUGEBZAVAVBGCETAAQPNBGTOPZTNAOSRALTOCRATBGBSPNVAVABGVBNAIMBZPVROVRARCZRCPARAPVRARCUDCNBGLUPTPIFIFCAVISPDBSCRCNLEREROMNMSVTBSCEAVIMTORETOATCNTOTOPASVLCSUTOVCVCAQPZALSSTOORVBPZPDORPZCBNAMIVAORTOANVTCNBSBGFIPVBZPDMEPNAOVAPRSVVRTOMINOORAQLUGECNBSBANUBGBOPZAQMBBTCOCNTOSAENSUAQSULCBGLCLCALPVTRTETNBNMIMEMIUDVTBSVIVTVAVTLTALCNPGPVMOPDCNSAPVPAFRORNUVBVABSTNPRBGVBTOCNCZVRALMCPUPVVBPZLCTERNRMCNMINOCESABLMBFMISCSFRPARICTCSANATBOKRCSCNNUSOCOCNRCSSCNBNBIBOBGSOPRSSCOPVALBGROSVCNBSMTMBMICNFCUDLOATALBGBSBSMBVAMITNPCVAVASSPCPGVBPGSPVRCTCSRCNOVABGVCSOMBREARLITOFGUDORVTBIBSTNPICOMIBABIAOBSNUAVPABTAQTECSALVABABABANUAGRCCOTNBGCOCOPDPCTONOCSVCTNVALOMIGEVBNOCBSVSPBGMITOMTBOPEPAMCNUVTBGBZNOVIVTCHCLPAMOORSPBGBGVRFETNBNCBCRCSAVSSSSSSCNRIBLUDIMCRPRREPVTOPASPIMLORIALSVFCCZTOSVTNLURIVCBGMNPVTONOLOCNNOIMTOTOPCPUPVALPVPDCNPRBSFIALPVBSVCPRNOBOVCSVSOPVBSORNUCHBITVNUSSSSGEORROVRALVRTONANACNALLCPVBGCNCZLEBGBSSSRCRCRCBSCNBSFGMBPDVRALMNCNBGRMSABZPVRCBSTOBGBSVATVCRVAVICOBGBGLOPVVICOBZBSVAVRTNVRREBSTNPVBZVIMITNVACNVVTOCOPZCNNOBGALBRPZVANOBSMBRAVAAOPELCFRVIVVMECNPVCTBZCNTOVBTOMBPDSPPNTOBGCOVABZATBGTONAVABIAOTORCMIATSRCHBNMISAARSSPNSSBOSUPTSOAQVAUDLCCOSSSSSABNCHSICSMBSUAGSSTOTOVCORGETOCNMISRTPMBMIPRPECBVRTOVAMICLPIVRTOATUDBGALVACOORPAISKRVAREPCTNPDCOTVTOSAPUCACOFGAQTNCECEBZBSSOAVVASVNAAVBLATAGSSRCVBENAQSUCTTPPVVTTNPIMTPIBGBSBGLCBZMCBOTNVRVITNPCFIPRSVSPLEAVSVBIATTNLCCSATCSAGCTCLPANOROVIBGTOBSSACRPZVIBGPZBNCETRPVMIBSNAALLUBIAGMITOVBBIISCNANATANBGRMNOMCSACERCALUDCRVIAGGEAOSAVECERMGRCRRECSMBREPGVCLEFILITOVITOCOTNTERCCBAGTPCBPDTNAQLTCBBZSOPDPAPAFMPAUDCLGEMOAOBNBNFRCBVEPZCBGELIVESAPALUIMCTMCPDPDNAMOPVAQBZBOCNBLRMTNROTNPZCEROFGBIPVTOPDAVRCTOMIATRIVTPNAGSRVTTOAQCSSAPGVBMNPVVBLERCBGBTCHCNAQPORITOALISRIRMATVARMPUTOCOTECOVEPCSAPAGRPILURMCRAQCOVVAQAQMEBGBLVTBSMECELIARMBAQAVCABSAQTVCRCRPEISFILICRRMVTBOLEVTCNARVBMENATNBSALBGCETOAVATBIVRBGBSGOCEBACZRCCNCNPETNFGAQGEAPMBCOBGVATOIMVTALSUNAPVCOPZTVSUSVPDVCVACNRCCZNALUTOLCALRCVCVCALKRSSCSAVTOCOCEPACEVCTNFGCOSRUDSUCZTOLEPOPDVAMBBZBGCSBGMEVAVATABRISPCCSPUBSALMOMILENOPVRECHPERMFGISMSVIALSPSPALCNAQVICNPUALPDMICOCHBGTNKRCBCHCECHFRNOCHAVTOSACRALCBCEBNVAVBPDPITVBOCRALNOALVRLOSACRCRCRBORECNSACHNOCRLOCRMNALCSFGNAPZMNLOMNPDCRBTCEFGMEFRNOVANABANANASVVCPVRMBIRICELELCMIGEPNALLCPVNABGPGVAPIVCTOPVTOGELOSATOLOFICETVRCREKRBOBGCOCOBGMSNARASICHVAPVMINAATSOUDLCAVBAVACSMIVASRBGMIMICOATLCALALMIFRVIPVTEVRLITOCNATTOATPVMEMIPVBSVIPDAVMNANBZSVATRACBPASAFMBSTVPABOMNVRBGRNCNISAQGRBOCRAQCTAPMEAQCERIANFIARTNLTAVBNMOCSIMTVPICHCRRMTRMNVIPZBOROCHSAAQATTENATPTOBAPATAALVAREALIMPCGRALNOANCRATBIALPVALALATALCNNOCNTESICNPICBCNFRCEVATNPVBOSOLCNATNTVTNMNCBFGPZISPZFGRMBOCNCOROBSPZMECEPVCNROTNPNRERECOFGFRRIVRATSILOALATSAATSALURMSPTOMOALPIBNISISANBNMCPGATBZBGSAPCSAARBORMMCRIVTISPZSSVAALAGSVAQAQBNAOAVBNRCTPMOPCTRCRCEBOBSAOBOCTCHVACSGELULOSATOPEPGGRTEMNSICNVTTECNARARAPTECNBGSOUDLOBSAPBSLELELEBGFRFCFRAGENVAPAPZCBMECSCSCTCZENPEAGRNBNPVSABINONOTOVRTNCNCNLENOTNCOVAVETVPNALVEUDRMTNTNLOMBBGMOTNTOREMNARBSVABGVRFRPVLIBSSOPAPAVEBRAQCHFGCSALCRBACSATBSATCNFGSVSAVTVTBRTECZBGBGBLBGROSVCNFESAENCZPEBNVBFRENGECONOPVSACBTOCBCSAQSOUDNAPATOVRROKRMNALCNTOBGALPVPVSVIMMBPCFGCSCOTERMCOLCMIANBNPGATFICNALBIATISMIMIVRPZFIPVCZRMPDFRCNVCBSCNPVRMRACSLOUDAVCEIMCSCELCTOMIMBVBMEMIFCFCAVBLIMTVVVMCATSABSSICSCNBSAOAOAOAOAOCNSSTOVIAVSIPITORGSSTVANCZBSPZISGESOTOBZTOSOTOBLPTCHFGCRBGPVVETOPNUDARBGVISOBZCNPATOUDIMATAVIMSISIARTOAGRETVBLGECZNASARMCRTOVCCNPVBSPVTVBSRCPANABSPNTNATRMCRMCGRMIPASORCTOTNPDVETOCECSIMBNTOMTCOKRKRTNBGSVBGVAMITVCNATLTBRPGPDPGPGRIRCRIPEVALCIMTNVCUDBGBSCSCBVTAQRMCHISMCPECBRMARCHFCAQPEVTTEGRAQRMSOCOBGPNPNCNTOTNCSVATNBGTOTOATBSATVAAQPDPVFETVLOUDSSBIMBAOGEVIGENOBGFRPCLCRIAQPGBNSITVBSLCPRPECBCHCHRIRMRITOAQFRLEAQTOTOLIFRPABLCBRIAPISSARISUBSVCUDMCMTVRBSBGMIVRRMTECOSOPRCSMIBGVAFEMSLOUDBLBLVABSNORGAGNAMNTNCOPRAPCOBGVECESAISVRRIBSVEMOMBRCTOMETVPVRICZALRAPDPARIAVTESASABAAVALLEPVFEPVBASAMIROVTPGPNTVPNGELUFRAQLTRNLEANTOPAPZSAAOMIGOBGBGMIMBVILOCNVTPRUDLOLOTVMIREMBPDCOMCTELEMIATBZCZATATATPCCRCRBSPCCNBSLCBGLOATBZTEARPEBZPVBSUDCSIMSORCTOCNBISVAPVBSSATALBGROVIPGPVBGBGLCVCIMBGVRATCNRAKRKRRIBGPVMTLCVCCNVBVICHBGCRCRLCVALCCOALCRCRVCVILORONOBIBOVBNATACNGEVBTECSCZCSVACRVCTNKRVAVRSACOTOMIVAORPETOCRVACNATTOCHAPANORNOVACZBIBGBZLEPDMNCEMIBNMICOBGTPKRLEVAVATNMIBGTNBLBSVVGEVACZSOCASUCZSVSPSOCLRCFGBSCNALTNALCRPGLCVCBSMBNUCSCSCNSAIMIMIMIMFIUDVVCSLENOCOBZGOCNCHUDVRIMIMGOSUTSVELCCSCOBLAVVBSUSUAOBICOSUNULCNOPVBIMNBGCOAOFCCRBOCEVVTNUDMITNCNTOVBNUSOVIBNTSVAVABNATSABSBZPENULCCACNAOFIBGVIUDCNBGCNPZVECOVRVRBSBRTPSVPNLCMCSUSUTOBSLCFRSSPDSUAOCOALREANVTVVTRUDSOTNRAFGUDCOTACSAQVATNBNBLCEANCSMEVTCZFMCHCOFRBZMOPNPUTEBGBGNORICHCHVIPZCNPEPCVTGOTVBRGEPICNGEMTAGTPTOSVCNTOPRSAALBLCOTOAOTRFRSRPUFMVACZRCCZMTFEVRCBVAPVTOATPCRCALRIRMTOMCTNMCPAROMETRBZTNCRFIBSROVECOCSORRMVVBGVVMSFRCHPZPVISVVANMOSVBGCOBGMOTOPCFIFICSSAMORCPNMECTCSMCMSUDBSMESRSSAVSUORVCFGBNGOTOARBNTNAPPGTVSPGRLOMELTTNNUAOFRBOPNAVBGPRTVNOVCGEATPDTVAQFRCEBGPRBLBGRICHAPBNSOORPZBGUDAVNAISFCFCVBRMLTCECRMOVCTNISVIUDUDUDTOBGPRLUBZPVMELUMSAQCBCHVEVECNCZPGRCVEPUVICNCNTABNBNCHSPALFMBRVVCHCSMEPZVVSRCEALPVRMCSTNROALALTOCNMOBNRIPGPGRONANAPUMETVCHALAVCECEATCHPNTOPUPUFRISTOALALFIBGVRFRBZCHMEMESASUCSRASOSACRALPUAOCRNULTMEMIBOBIENAQLECZMCTVROCNSINUBZMELELERCLCFCLOVAVTVANOPVLURMPZBOPDFRVILECEMECENUPDALBSPVCNFICBVICHFCPVVIBGBGBGPAMTALNOMILCVRBSBSCNNOBZBSPVLCSVTNCOTOCZTOREFCVCBSROBGALRMVANUGRMNVABGPDVRPCMNCLRNUDVARMANCRCNSUGESUPZRMCORCRCPARMPVVASUTOVBVAVVSOCRSUMICHSUAVBSNOVBORBGVCROTOBSCEPGPAMEALRGCTSSTOTVSUTPBIRCSASAVBAOCBCZPZBNTASABACEAQRCMERCTRBATNNUCZCHLENAPACHFRTESALEPVMBSVTNSVTOCZBZSPTVPVPAMNVAPVCRUDSUSUSUORORMNSORMTVMTMIAQGOBGVAVABGVABGFEGECNBLPCCNBSCNNOPUGOGOVTLOVTBINAPCCTATBOCOCOMENOVAPDPDMTBGPAPVVBTOBACTCEATRIAVVCALAOAOAOFIMIVRCOCENOTNUDCSCNVICSBOALBGALBGCRPVPCTOSOSOGRTORMTAAVAPFMAGVTRCMTAVVETOCRBGPZBANAVILEMCPGPGREMESUCOFRVCLOCZROTRCSCHCBAVPZCBBNPICNSUREALPGMICBMNRMMOPVCHVBSUBSCRAOCZBSSUCNNUVRSSLCTNBOIMFIVAATBSVATOVBLCAOAQCOPVTOMINOMIFEVVNUBSMTCNCZNAVTFGBSTNISSUPAATKRFRGESOTETOIMGRVRPAPUBGVICRVRALFGBSSARGVATOAOBGAOCHTVMELTSSSSTOCRCBRMVANUANVVAGAORMRITOMINAAVBZORSSRCVICOCNCSPZFEBZPISVMICOCSCSBZBZBGTOCHSSMOCOBLCNAGPTVCBZCHNOPVPRPVNUSOTOFMAVCSPTPVCBBZAOPACOSPSUVIFIVTTAAOBRLTUDPZCSUDRCSABZPZPZTOSASAAVGEVRBLBZTNPZVAVABSSATNVRMBAQLELCBGVAVRMIPDNUTOGETOROMEBGBSLTVCMBCHSRRIENTALECNCNPASPALNOCNPRPRFGMBTOUDCEMENAPECHSPBGLECNTNTOCOCEMEAGMSRMCTLCVCUDAOBLBNVVMBPDCOMEBSCNCBPVCTAVMECOPVMICHPGCNMBCLNASOBLCOTNLIVCLOLETASVATTOCOMIBGNUBANUNULONULOBSBSBOLCCOTOTOPVTNVAVAFIISVIBSMEFCCSCSCOLIRIVITOPDVBBLROANPETVARMCGEBSNUBGSOBSVABLPDVCVTAGLUFGARIMCBAQAQPCTRRAVIVACONUGEBSSUPUCSAVSSCBCOCOBGSSCOCETNTOTOUDROTOBZSAVABGRECSLOISISCBTOMCCEPUMBBSNUCNVBCECRBGVBLTCBBSMINOPVPGCZFMCNCNGRAQRIRMSALESVTOMNMIUDBIORBZCOUDCZCSVVANRNSALOBSSPCRBOUDVRTNBSLOVBCTMEVALCCSSVBZVAVIBSTNAPMEALCSRCNUGRMESUCSLCNOTABSBSFGCNCSPNAVPETVCNSOMNUDRMBGSSCAMOMONANORMUDVRVICSCSATPZMIMNCZRMCZRIBSVALILICEARPVVEBZCNTVTOATCNBTLCMNCOGOCLNANARCPARMBZPTBSMNCNVABSRCVIFIORCNTPPGPZPZVTLEVEBZUDCRLETABGCNTECZCZSSRCLOTAAVCEPVCSVAMICTCTPZVATVVBPDTVPDALFECOGEFMAQMSPGPTTALORANAGRPDLUBITOBICEAPTNSVNOVBORMCMTTOLECBTOFGTPBSRMCLMETOTNSONUTOMBPVGOPRBOMIBGMNMOTVPNPDNOROALFCGEMILELOPZRCRCSRKRLEAVNARCBNCNSOTVLEBZMICOPVIMCSAGRMVEALBZLCVAPUPURNSAFCTOAVUDANVBMEPDLOCOBRSOVAMIFEKRMEPDNAMBBITNPVPVVRGEPVTNTOTNPABGTNNOBITVNOVBRILECHCZMTGECEMIMEVVORCTMESVCTBSCTVRBOBTLESALTLUSVVEAVCTALCBPVISMOVEMEBGRNPAMBLCPZCTMEATGEMORGFCLOORBATNLCUDMNMCTVORORORBNUDBGMESACNBAALLUBABNBOIMALCBPZVCAGRCLCCOTNATCNPUATCNALTOATNOTORIALCBATRCATCNTOBGCNCNTVSUTOATALCNPRVCATRNPUPUCNCEGECNGOMOCNMETVATBOVVALAOMEBICSBZCOBSALBSBAPATSFMAPANPDCAPTCNATALATCBBZSOPDMEAVFIMTMEANALALCNTOCNATPTTOAGAPCSPVVTTOTOLOCNSACOFMISRICZCHCRGRPVPEVITVGERIAVPVPULUANMCALPGTRPIMCVRTRREVIVIPUATALBSPRPUCBRMPUSASASAMCVBMOVIAPNACLAVPGFMBNCBMCPUCHVTTEAPRNMORMAVSAVRFMTRAVAVTRVIVIAPFMALCSFMFMRNPUVAATIMPDTABSPURMCHFMVVFGPGRISSTRPARMAVBGCBFMCNFIMCPAATBNCNAVANLCALTACOARAVMCPZCBAPPOPZUDCBCHRIISANCHTECZTAPURMAPSIARAQPNBOSIFMANISVTLESIVTVVCNSPRGRMGRFMLTSARIFRMCMCLESAFMBOARPGFGMCANBNMTPVVBPIMOPVPEFITOFMCNAGARLCAVPIVIFMFMCNSSFCCNPVPCBSLCVISIGRMSBSCRGEPGPIRICOCBTERMVIFMORPVVAMBMNBOALCSATGOVASOALRNLEBNBOBGSSFMCNPCTVAOORTNTVRMSAAQTORMCSVAALBGPVFRCNAVANRITECBMCPNALPVUDLCUDCRAVTEPEBZGOTVCRMEMEVCCSBIFGRCCZCTMITACHBGCOVRBGMCTSMBAVNALOMSBSSUCNVICNSVALSILEPZSSBSSUVECOVICLTEUDBITNBZVINAORSULEVVTRAGCNSVMEBZBSAQBZRMGENOVRGECNBGRMPZORVTTERMTVMIRICOBIRMLEPRCNBSNOLCTOCTPVENVVCNCNUDCLENMEATVETOCSPECZPGSASAPRBALEPZVRTNVRVIBANATOSVTOTNMOTOVBNUORPGLTMIBGTESRMBTNTOBZBZMENOMISOVICORECNPDVEVIALMOSAMILECNORSSSSSSANNUORSUSUSUORSUAOAVBSBSSUBIBIROALAQALALTVBSAQANCRAPBSVBVALCTOSAAOSSVCVCNONOPVRMSACOLCVALCNUPVCZMEMTSALCIMALORNUAOSSCRATBGBGBGCONUBSVBSANUVTCNBGNUNUBSBGSVMIAQVRPZRCBZNUCBTOGRPIGEVILONUBRAQVAVALOBGTOCSVTORCNTVMBVBBGNUNUSASUTVALFGCOCHCSCEFGSUNOVTLEFMARBZCHAQSPSVAQNUNUTRBSBSTOTOSSNUSVSSANNUBGBGLCUDIMAVLOPDTNBLBSLOTNSSBSMICNFECRMNBRLETRNANUSAALPVPCTOALUDALAQNUTOSSALBOMISUTPMEAQSRPGBSALBSLCMICRLCPDSSSABNCNTVSARIBGMECHUDCNLCAVBNBSBSBGMOTATACTPIPRCBSSBGCRPZTOPABSVCSRUDFICHCZPARMPVFRRCKRVBSVAGNAUDLEORSURCAPCHBASARMCHBGTNVRCSBZUDCNTOPVTNCRCSPGNABNFGTPMICSBNTPCSROMILEBSBZTOCSCEALVVLCPRALCNAVPVTRBGTPPANOBGUDPNBSATPGBSFRCEVRALLCAVCTCSFRSSMELEORUDSUSUORMIBNTOPVUDBSTOMORCPIALTOCTFMBLVIBSTVSOCSBGCOPUMNBGTNFINOPRSATNTNATSOTRRNCHCHMCTEPECZCHBLBZRMNUSUSAAQSSTNPUIMSALCCNCNAOPDTOTOTOBOCRVCBSBSSATOPGPULUVRPECRAQLCISFGMIVRPTAQAQBNISPZISRIPEFRMICRTOCBRIKRSAPAPACBRIPUMCFMCZCZAVNOBIMEISAQROCNVCBSCNPDPCSASACESVPAAOBSSIBSPUCSPECOPCCRTOVICNBGVEBONABOVTSOBGCNSOBIBGENLUBGPDBGPEPZFRFRATBICECTFRVBPGSICRFGSVISIMTECBCBAVPVCHPZCSPZPGALCEPECSPZENCNBNPULUAVCEBNIMMIPVPTPVBLBOTVGECRLUMOPVCRARTNMCVBFRIMCEFRPZSPCOVCSUNAPVTOROTOATTOPNTNPUCNTOVCMILIPDMCTOATPDVIPCCNLTMEPINORMTOSABSMTPTGRMNSOTOPVCRVVCHAQISVVRCCSCZRCUDCOSSSVCNUDMSPCFRLESIMNPORIRIPGCHFGNARIRIRIAQTPFEBARIANMICOBGNOVITOBSPNRORMVVMTBAPCMOTRRCPASAAONASAPABICHCNBSPDANPITOMTALTNNORMNANAIMBSMNORBSBICOPIPDFITOBNSOBZUDPTSAROCNFRALIMPCPIBSTVCOBNCEPDPVPCBGAOPDBGALBSAOALMNBGLTSVBGBSMSLTALFMRMTVALPEARTRLUPNSAPNCOIMUDATPVTONACEFCRCVAVATVCBLIGEVEFEMNMCFMFMSUROSSSPROBINUVISATVRIFRBZSOSAVCPZVITVVRREUDRIRGISMIVIBSALALSSPDNAMIUDBGUDCNBOTOBICSSABSTOTOBIVETOVCTOALTOAVCEAQSOPNCETOPONOUDBZAVAQPNCNRCUDPGFCTNBZBGALTVMIIMLCUDVBVBFCBGVBUDUDAOBSCEBGVRCHBSAQCNMOSALCCNCNPAVTNAGECOLTBSBSBZCBCNBSBNCAUDTABGCOSSBAAVCHTONAATALVBVBVCPTAONAVECACATOALRESVTOAVMNCRTVVCVIBSMNTNLEAGCNMEBZSICTSISIAGUDRGCEAQCTVAVACTBGBGIMFMGECHSIPZPZVCBZSOAGMOUDSARAUDCEVBPVAGUDTOCEMCGENOVIPVMNATTVENFIRERCREBNMEUDBSMBCSBZTVMIUDNAUDCLPVCNATTVTNCOBSIMGECOAOAOMIRCSVRMCEAGTOVVALCBRNSPCRSATVCLRIBZCNFIFGRMUDVCRNREBZRMORRAMOSPPZISCBPZCBCRCRCRPICHAPMCFRCTCNBLIMTNBGTOALTOPVTOTOTOCRMNALTOVCUDPZPCAQRITOVRCRRCVICNCNVCVCATTOPVMICRMIPVATCNCNBLMEAVKRPRCNTORMAQAPCNATFRSACNPVCEAQAQRMAQKRRMMEALCNRCTABSRMSALTALCSGRMEISLTPACECHPEPZRIPAAQSARMNAAQCEFCAVCHTERMCHFRLTISRICNCHGRPVATSVCNCBMERCISCEIMSPCNALATFGATMICNCNCNBZBSCOMEFGMNBSSALCCSRCCSPVBGSORMCHAOTORERMNOSAPVTNSSCRBGTOVIGOVVTNNOMECOVRTVBSPVTNMBGOTNUDVTBGGEMBBITOVRMNFCBGGETOVCTNBITOTOVIRCPVMIBIPESACSCHFGALLICSROSRANVCCNVIGETOBGCSAPCBPZMTAVPCVIBSGECOCOMNVRTNVRPNVRTNPVBGRMROCSPDMIPDTOREUDBSTOLECNTNFITNPZRABASABAPZLTBSMNSAPDPNRMSUORBIGOTNAOAOAOAOAOAOAOAOALBOCOBIPRSATOSAMTTPROVCTOCBALCNBSTPLOTOSACNTVVCLECNVRRIVRPECNBSBZPRVARNVCBICNLEPZCRSAAVTOVEVASUSUAGPTRMCNBASOTOTNCNORLECOIMBNCSSUCRROAPCNMNAQAQCSTOVBAGFRIMTVCBVRCHVVBZGOTOSIFICLLEMOPZPZPACEPVSARNGEMITOCTCSVVPZPUALATCNPVCRUDCSAQTOBIBRVEFRCSLEMIVIPZCBCEMOLTBSBTCOCSMETVLOGOCZTOSSMECNCNTOSUTRBZPVNAVCTOBSCBSOMNVATOSIMCCSALFRCSTAMNMIPVPCMTRCTOPNNAPDBNUDBOPDBNATTOARRCUDSABGMNVTAGVRFRCRCSCBRNCTCHVRFGCBCBMINAPAPGTOFIBLCECTVVRMSAVRBORNUDBZBNBNBZIMPURCCSCSGOBNVTRCCSBNSUAVCZSACEANCSMEBNFGFGATBZBZCBCHCSPZROTOPNBNVRMNCRPDRELOPVAVATTASACBTONOKRFCPAMTTOSASAAVCTCNVETNBRPIPVBNCONOBAFGCEKRVVLECSAVBNBLBZBRANFGNAATBGGOMEMEBLSATOUDCZCZISCTRCTVVRPDCSVRBOCECSLENOVICABRPDAQCBRETVRMTOMOAVCECERCMOSIPNTOIMRCLOLUSAALBNMECHALNATOPRTOARMCPZFGCOAVCZCSSUBGCLCZCSLEBZPAPVRCPIRGBNCBSUCSMEAGGRPAISALBOCSFGRABNRCMERNCTPVORBLPDNACNPVRCMECTPIAVMETVAGGEPVPICECEPVPVISCTVELCCHCEUDVBANSAMERMFRTOVRSACENAPGAVFRCZSUCELOPDPVBNSAAVAVAVISMERMMCPUPZCBAGTPVRNASUTOORNAAVFRRNPZCESAKRCSFCMESSCTFMCNSATEPDCBFRCZFMAQTOMESSBAPERCCHAQVCLTRCREPUGEBLTEVVFRRMVITNAGAVCSAQMILOSPFRIMCNGEMERCCNVEORPDPESATRTVORCSAQLINABLCZCHBRRMVISUPNUDUDTPFRMISATNBSVRMIPVTVPDMEUDSACSRMVIPZSUALVIBZALBSPCTVMCBGSATNVAAOCAFCSIPVNUSPSASSSVLIBNPZPUANMOCZUDTOTOTAKRNACNAVFCMOGEBSMEUDGOSVPESACNCSSAPVCSTOMEAVKRRECRCRRIAQORGRBGISGRTOCNBZCHPGPGCHVICOBGVIMNAGPARGRCRCPATONAPAAQVCVCAQCTLEVEAQTNATIMAQLELOUDBLORSSMIBGMCSUGRRMTNMITVCARISUPGBSCZCZBZBLBZVRPDBGSSPVRCGRMIBZBZORAVBSANORPZCOLOORSSSUCBPNLUSUMBBLCRBGBGAVBSMNBSLTTVSOATVVGEFGCSANCLALCNSUSAPEMCNAANPUCZRCALCNPTMCMNVCSASUSUFRCZBLCESAATISARISCRFIPNBZVAMOMITOGECAMIFRATCAMITOTOTOCZSUSUSUMBALLTTNTSFRORORSAORAGSURCSIPGFIBZNUSSSUSUNOALPVTEORORVVCZMENUORCNNUCARCSRAVORANLCLCSUNOBZFMVRUDORFCLEATBSVISRMIRACRORVAVAIMSUALPDLEMNMOPRAQAVALBNBGBGLOCNVANAVRCNCNCLPVVRCRSOSOBGBSLTFRTNPRGRAVCZBILOCRVRNUGEVVVVVTCONOBGCOORNASSSRCRBLVIBIBGTNCZBGCZCZBLSIMBVINOMEVVCETOLEPGENLTAVPVCSCSTNALLTMOPNVVCRBTVECRCBALAPCRBGPZBGPGPELETNTNSVTVSOCZLEANCRRCCZPDGOALLUCOVVSVSVBZTNLEBGROMTRCRCRISAFGFGTNVEPVTOTOFRUDTNVBALNABITRKRVCCNBGAVARRMCELCSULCBGMBBSVAAVORNOLEFRLELETOTVMNCLVTUDLIMNLCORIMAQROALBLVARNSONUBGARUDBLMERICHCNTAUDCSSOUDTVALAVAVRCLEUDTOCBCZCOBGLEBIPUPUPZCESOVEBNBGSSTNTNSSBSTNTNPDAVTENOFRBZBZBABZPACBVABITRBGLTTNORARCSLOPZRCPAPDCSVRPIALNUNAALUDTNIMTNBZVTSVNUSUCEVIVISSNUCRALLEGEATBSORAQTNSOBZCZBZSSPZRMPRREBNPEVBPGRISVMCRMBICHUDPZPDTNNUATATCECSTEBSTNSABRAVCBPGAOCHTOBACRNOCHCRAQCOPRCBNUSASSPVTOBICZCNFRSONAUDTOVIPVBGCNCHBNPVBGCRNAPVPEBGVEPVPDMEAVFGSABGTOCNFMBRCNPACHPVRIVRFRCHPVRITATECRVIGEPRAVRMSIALCSSATEMEUDVTBSTESVSOPAVAORTNSAPNPNPZTOBTSOTPPAVBAQUDVBSUBSTOVATOPRPNPCPDCSCTNOPZROFCCHVRMCCNCTBSSATNCEBSUDLESIMSBGCRSOORVRPGFRAVBGRMTVALBGBSTVMIMICNMICOPDMIGEMTLEVCUDNUTSBACRCNSSVCIMMEALVIMBCBFRUDPZPVBZTOFGENPVVBVCVVPVMIBZCBCHNAAVLESUSSPGBSLOCOMIBASUGOPEMTMEVAMEUDLELECOORNUBZKRBSORPDPUSVPUMCBGSSCBNUGEORSSMBSUSUNUTOTOMCPACAPTCSRICHBZSVFIATPZLUCRPOTOCRCEBGBGGECOVIBZVITOBISOCNMEPVSOBZTVVCVRPVVTALBALOPGATTNSOVATOBGCNLCAOENBLBITNAVBLCEPVCEBZIMTEFRIMBZPASSFRVVCLRMVTSUFRAVPVBIBGVIRMBSPGSATOCNALLCSORMCOPRBGAOTOAOVBPGAOBGSACTBZMIMIVBMINOVCNOVAPRRCSVRIMBTNLCSPVATOUDBZPRPVVBIMISTOVVTVPIVAMBTVBGMBPDLEBIVTCOPVRMPVVRVIBZISTOTOAPCNSVLCVAVAMEVECOPZAVPAIMLTUDMBBZVBCSCOSOVCLCBGBGCNBOFCVATNCNPCMISPPOLEBSBSTOFRVRAOPVBITOPVCOBGRNSOUDKRCNPDCRATNOIMVRTOBSVTREBSCNSPRESVMNBGCTATTORELUATSAFRPAFIVICNFGFRCENAPENOPCPIRMPVTVTOFGPZSABGLCFEVRPVPZPZVAPDATBIALVTMIMOTNALCNVBBLPDBGPCTOVEPDALFRVBSOSOUDVRLUBZPAPVBSBRPEBSSULUMIBGALBIPDBGPDBGROCNIMAGATMSPDTOVRMEPAVINUCOTNAQCLCHALCHAVSUROSUREALBZALAVCNSVLOBIPDPCAOTOPVATROSUSUROSSCNORSUPVBSSUTOTOVCTOTOALENTOTOCNSUMBRCATAQCHAQSUSUTOVCORAQVIAQVBGOMNBGTVBGMBMICNCBATFITONOCNBSBZTOBSTONAUDALMCPVTOTPVTFRPNVTRGTVAQMICEBNTORMPNBICTVAMIPDBSGEVCBLPVFEVBTNNACRTVPVALALTOALBLMNPICRAVFGFGTOCNVVCTCZRMVVBGVIBGPVPVORCOLOPVPVTVPCPVPVORMSVITVVRTNMISPVRBIPVGEMOBGBOLEBSBLPNVIBISVVIUDBICSAVVVRMCZSUMEMERMRMSSSAAQMTSRTRSSCELECELELEPNFGFGPAPZSUCTRMNASSSSSSRCSUSRNATPSSCTSSNUMECTSUNASSSUSSSARMRMTAPDSSATTNVERMUDBSTNTNCOTOUDANLUBOFIARFERNPRFIPIPIARAVPUBLBGBGCOCOLCPVVAMNCOBLTNTNTNPNLULCTNTNTNTNTNTNTNTNTNTNTNTNTNTNTNRETNTNPRRNBOVBBIPVBIBLBLPTPTSIPUPUFEMCCOVICSPCIMALVCTNLIARLOCOLCMNALVCUDUDVIPDCSVBTOMNTNFIFEFEPRCOPUBITONOBICRPVALBLTVVIMIVAVIVILE\"\n        }\n    ],\n    \"licenses\": [\n        {\n            \"name\": \"Ministero dell'Interno\",\n            \"url\": \"https://developers.italia.it/en/anpr\",\n            \"license\": \"cc-by-4.0\",\n            \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/legalcode.it\",\n            \"termsAndConditions\": \"https://github.com/italia/anpr/blob/master/src/archivi/ANPR_archivio_comuni_legenda.md\",\n            \"authors\": \"https://github.com/italia/anpr/blob/master/AUTHORS\"\n        },\n        {\n            \"name\": \"Istituto nazionale di statistica\",\n            \"url\": \"https://www.istat.it\",\n            \"license\": \"cc-by-3.0\",\n            \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/it/\",\n            \"termsAndConditions\": \"https://www.istat.it/it/note-legali\"\n        },\n        {\n            \"name\": \"Agenzia delle Entrate\",\n            \"url\": \"https://www.agenziaentrate.gov.it\",\n            \"license\": \"cc-by-4.0\",\n            \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/legalcode.it\",\n            \"termsAndConditions\": \"https://github.com/italia/anpr/blob/master/src/archivi/ANPR_archivio_comuni_legenda.md\"\n        }\n    ],\n    \"sources\": [\n        \"https://www.istat.it/it/files//2011/01/Elenco-codici-e-denominazioni-unita-territoriali-estere.zip\",\n        \"https://www.istat.it/it/files//2011/01/Elenco-Paesi-esteri-cessati.zip\",\n        \"https://www.istat.it/storage/codici-unita-amministrative/Elenco-comuni-italiani.csv\",\n        \"https://raw.githubusercontent.com/italia/anpr/master/src/archivi/ANPR_archivio_comuni.csv\"\n    ]\n};\nexport default CITIES_COUNTRIES;\n","const YEAR: string = \"[12][0-9]{3}\";\nconst MONTH: string = \"0[1-9]|1[0-2]\";\nconst DAY: string = \"0[1-9]|[12][0-9]|3[01]\";\nconst LEAP_MONTH: string = \"02\";\nconst DAYS_30_MONTHS: string = \"0[469]|11\";\nconst DAYS_31_MONTHS: string = \"0[13578]|1[02]\";\nconst MONTH_DAY: string = `(?:${MONTH})-(?:0[1-9]|[12]\\\\d)|(?:${DAYS_30_MONTHS})-30|(?:${DAYS_31_MONTHS})-3[01]`;\nconst HOURS: string = \"[01]\\\\d|2[0-3]\";\nconst MINUTES: string = \"[0-5]\\\\d\";\nconst SECONDS: string = MINUTES;\nconst MILLISECONDS: string = \"\\\\d{3}\";\nconst TIMEZONE: string = `Z|[-+](?:${HOURS})(?::?${MINUTES})?`;\nconst TIME: string = `(?:${HOURS})(?::${MINUTES}(?::${SECONDS}(\\\\.${MILLISECONDS})?)?(?:${TIMEZONE})?)?`;\nconst ISO8601_SHORT_DATE: string = `${YEAR}-(?:${MONTH_DAY})(?:T${TIME})?`;\nconst ISO8601_DATE_TIME: string = `${YEAR}(?:-(?:(?:${MONTH})|(?:${MONTH_DAY})(?:T${TIME})?))?`;\n\n/**\n * Date Matcher consts\n * @property {Object} DATE_VALIDATOR\n * @property {string} DATE_VALIDATOR.YEAR Matcher for ISO8601 4 digits year (limited to 1000-2999)\n * @property {string} DATE_VALIDATOR.MONTH Matcher for ISO8601 2 digits month (01-12)\n * @property {string} DATE_VALIDATOR.DAY Matcher for ISO8601 2 digits day (01-31)\n * @property {string} DATE_VALIDATOR.LEAP_MONTH Matcher for ISO8601 2 digits leap month\n * @property {string} DATE_VALIDATOR.DAYS_30_MONTHS Matcher for ISO8601 2 digits 30 days month\n * @property {string} DATE_VALIDATOR.DAYS_31_MONTHS Matcher for ISO8601 2 digits 31 days month\n * @property {string} DATE_VALIDATOR.MONTH_DAY Matcher for ISO8601 2 + 2 digits (28~31)month + day\n * @property {string} DATE_VALIDATOR.ISO8601_SHORT_DATE Matcher for ISO8601 date: 4+2+2 digits year + (28~31)month + day\n * @property {string} DATE_VALIDATOR.HOURS Matcher for ISO8601 2 digits hours (00-23)\n * @property {string} DATE_VALIDATOR.MINUTES Matcher for ISO8601 2 digits minutes (00-59)\n * @property {string} DATE_VALIDATOR.SECONDS Matcher for ISO8601 2 digits seconds (00-59)\n * @property {string} DATE_VALIDATOR.MILLISECONDS Matcher for ISO8601 3 digits milliseconds (000-999)\n * @property {string} DATE_VALIDATOR.TIMEZONE Matcher for ISO8601 timezone (Z or ±## or ±##:## or ±####)\n * @property {string} DATE_VALIDATOR.TIME Matcher for ISO8601 for time (T## , T##:## , T##:##:## , T##:##:##.###)\n * @property {string} DATE_VALIDATOR.ISO8601_DATE_TIME Matcher for ISO8601 date/time format\n */\nexport {\n    DAY,\n    DAYS_30_MONTHS,\n    DAYS_31_MONTHS,\n    HOURS,\n    ISO8601_DATE_TIME,\n    ISO8601_SHORT_DATE,\n    LEAP_MONTH,\n    MILLISECONDS,\n    MINUTES,\n    MONTH,\n    MONTH_DAY,\n    SECONDS,\n    TIME,\n    TIMEZONE,\n    YEAR,\n};\n","import moment, { Moment } from \"moment\";\nimport DateDay from \"./date-day.type\";\nimport { ISO8601_DATE_TIME } from \"./date-matcher.const\";\nimport DateMonth from \"./date-month.type\";\nimport MultiFormatDate from \"./multi-format-date.type\";\nexport default class DateUtils {\n\n    /**\n     * Parse a Dated and Gender information to create Date/Gender CF part\n     * @param date Date or Moment instance, ISO8601 date string or array of numbers [year, month, day]\n     * @returns Parsed Date or null if not valid\n     */\n    public static parseDate(date?: MultiFormatDate | null): Date | null {\n        if (!(\n            date instanceof Date ||\n            date instanceof moment ||\n            typeof date === \"string\" && new RegExp(`^(?:${ISO8601_DATE_TIME})$`).test(date) ||\n            Array.isArray(date) && date.length && !date.some((value) => typeof value !== \"number\" || isNaN(value))\n        )) {\n            return null;\n        }\n        try {\n            let parsedDate: Moment;\n            if (Array.isArray(date)) {\n                const [year, month = 0, day = 1] = date;\n                if (month >= 0 && month <= 11 && day > 0 && day <= 31) {\n                    parsedDate = moment(Date.UTC(year, month || 0, day || 1));\n                } else {\n                    return null;\n                }\n            } else {\n                parsedDate = moment(date);\n            }\n            return parsedDate.isValid() ? parsedDate.toDate() : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    public static ymdToDate(year?: number | null, month?: DateMonth | null, day?: DateDay | null): Date | null {\n        return this.parseDate([year, month, day] as number[]);\n    }\n}\n","export const CONSONANT_LIST: string = \"B-DF-HJ-NP-TV-Z\";\nexport const VOWEL_LIST: string = \"AEIOU\";\nexport const OMOCODE_NUMBER_LIST: string = \"\\\\dLMNP-V\";\nexport const OMOCODE_NON_ZERO_NUMBER_LIST: string = \"1-9MNP-V\";\nexport const OMOCODE_ZERO_LIST: string = \"0L\";\nexport const MONTH_LIST: string = \"A-EHLMPR-T\";\nexport const MONTH_30DAYS_LIST: string = \"DHPS\";\nexport const MONTH_31DAYS_LIST: string = \"ACELMRT\";\nexport const CITY_CODE_LIST: string = \"A-M\";\nexport const COUNTRY_CODE_LIST: string = \"Z\";\n\nexport const CF_NAME_MATCHER: string = `[A-Z][${VOWEL_LIST}][${VOWEL_LIST}X]|[${CONSONANT_LIST}]{2}[A-Z]`;\nexport const CF_SURNAME_MATCHER: string = CF_NAME_MATCHER;\nexport const CF_FULL_NAME_MATCHER: string = `(?:${CF_NAME_MATCHER}){2}`;\n\nexport const YEAR_MATCHER: string = `[${OMOCODE_NUMBER_LIST}]{2}`;\nexport const LEAP_YEAR_MATCHER: string = \"[02468LNQSU][048LQU]|[13579MPRTV][26NS]\";\nexport const MONTH_MATCHER: string = `[${MONTH_LIST}]`;\nexport const DAY_2X_MATCHER: string = \"[26NS]\";\nexport const DAY_3X_MATCHER: string = \"[37PT]\";\nexport const DAY_29_MATCHER: string = `[${OMOCODE_ZERO_LIST}4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[1256MNRS][${OMOCODE_NUMBER_LIST}]`;\nexport const DAY_30_MATCHER: string = `[${DAY_3X_MATCHER}][${OMOCODE_ZERO_LIST}]`;\nexport const DAY_31_MATCHER: string = `[${DAY_3X_MATCHER}][${OMOCODE_ZERO_LIST}1M]`;\n\nexport const DAY_MATCHER: string = `(?:${DAY_29_MATCHER}|${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}1M])`;\nexport const MALE_DAY_MATCHER: string = `(?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[12MN][${OMOCODE_NUMBER_LIST}]|[3P][${OMOCODE_ZERO_LIST}1M])`;\nexport const FEMALE_DAY_MATCHER: string = `(?:[4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[56RS][${OMOCODE_NUMBER_LIST}]|[7T][${OMOCODE_ZERO_LIST}1M])`;\nexport const MONTH_DAY_MATCHER: string = `${MONTH_MATCHER}(?:${DAY_29_MATCHER})|[${MONTH_30DAYS_LIST}]${DAY_30_MATCHER}|[${MONTH_31DAYS_LIST}]${DAY_31_MATCHER}`;\nexport const FULL_DATE_MATCHER: string = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[${OMOCODE_ZERO_LIST}4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[15MR][${OMOCODE_NUMBER_LIST}]|${DAY_2X_MATCHER}[0-8LMNP-U])|[${MONTH_30DAYS_LIST}]${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}]${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}]${DAY_2X_MATCHER}[9V])|(?:${LEAP_YEAR_MATCHER})B${DAY_2X_MATCHER}[9V]`;\nexport const MALE_FULL_DATE_MATCHER: string = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[1M][${OMOCODE_NUMBER_LIST}]|[2N][0-8LMNP-U])|[${MONTH_30DAYS_LIST}][3P][${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}][3P][${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}][2N][9V])|(?:${LEAP_YEAR_MATCHER})B[2N][9V]`;\nexport const FEMALE_FULL_DATE_MATCHER: string = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[5R][${OMOCODE_NUMBER_LIST}]|[6S][0-8LMNP-U])|[${MONTH_30DAYS_LIST}][7T][${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}][7T][${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}][6S][9V])|(?:${LEAP_YEAR_MATCHER})B[6S][9V]`;\n\nexport const CITY_CODE_MATCHER: string = `[${CITY_CODE_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2}|[${OMOCODE_ZERO_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]|[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]))`;\nexport const COUNTRY_CODE_MATCHER: string = `${COUNTRY_CODE_LIST}[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2}`;\nexport const BELFIORE_CODE_MATCHER: string = `(?:[${CITY_CODE_LIST}${COUNTRY_CODE_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2})|(?:[${CITY_CODE_LIST}][${OMOCODE_ZERO_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]|[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]))`;\n\nexport const CHECK_DIGIT: string = \"[A-Z]\";\n\nexport const CODICE_FISCALE: string = `${CF_FULL_NAME_MATCHER}(?:${FULL_DATE_MATCHER})(?:${BELFIORE_CODE_MATCHER})${CHECK_DIGIT}`;\n\nexport const PARTIAL_CF_NAME_MATCHER: string = `[A-Z][${VOWEL_LIST}]?|[${CONSONANT_LIST}]{1,2}`;\nexport const PARTIAL_CF_FULL_NAME: string = `(?:${PARTIAL_CF_NAME_MATCHER})|(?:(?:${CF_NAME_MATCHER})(?:${PARTIAL_CF_NAME_MATCHER})?)`;\nexport const PARTIAL_YEAR: string = `[${OMOCODE_NUMBER_LIST}]`;\nexport const PARTIAL_MONTH_DAY: string = `${MONTH_MATCHER}[${OMOCODE_ZERO_LIST}12456MNQRS]?|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}]${DAY_3X_MATCHER}`;\nexport const PARTIAL_FULL_DATE: string = `${PARTIAL_YEAR}|(?:${YEAR_MATCHER}(?:${PARTIAL_MONTH_DAY})?)`;\nexport const PARTIAL_BELFIORE_CODE_MATCHER: string = `[${CITY_CODE_LIST}${COUNTRY_CODE_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]?)?|[${COUNTRY_CODE_LIST}](?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NUMBER_LIST}]?)?`;\n\nexport const PARTIAL_CF: string = `${PARTIAL_CF_FULL_NAME}|(?:${CF_FULL_NAME_MATCHER}(?:(?:${PARTIAL_FULL_DATE})|(?:${FULL_DATE_MATCHER})(?:(?:${PARTIAL_BELFIORE_CODE_MATCHER})|(?:${BELFIORE_CODE_MATCHER})${CHECK_DIGIT}?)?)?)?`;\n","enum CRC {\n    \"B\",\n    \"A\",\n    \"K\",\n    \"P\",\n    \"L\",\n    \"C\",\n    \"Q\",\n    \"D\",\n    \"R\",\n    \"E\",\n    \"V\",\n    \"O\",\n    \"S\",\n    \"F\",\n    \"T\",\n    \"G\",\n    \"U\",\n    \"H\",\n    \"M\",\n    \"I\",\n    \"N\",\n    \"J\",\n    \"W\",\n    \"Z\",\n    \"Y\",\n    \"X\",\n}\n\nexport default CRC;\n","enum BirthMonth {\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"H\",\n    \"L\",\n    \"M\",\n    \"P\",\n    \"R\",\n    \"S\",\n    \"T\",\n}\n\nexport default BirthMonth;\n","import {\n    CRC_OFFSET,\n    LASTNAME_OFFSET,\n} from \"../const/cf-offsets.const\";\nimport { PARTIAL_CF } from \"../const/matcher.const\";\nimport CRC from \"../enums/crc.enum\";\nimport generatorWrapper from \"../functions/generator-wrapper.function\";\nimport IGeneratorWrapper from \"../interfaces/generator-wrapper.interface\";\nimport CodiceFiscaleCRC from \"../types/codice-fiscale-crc.type\";\nclass CheckDigitizer {\n\n    /**\n     * Evaluate given partial CF to produce last check digit character\n     * @param codiceFiscale Partial or complete Fiscal Code to evaluate to produce last character\n     * @returns 16th CF char\n     */\n    public static checkDigit(codiceFiscale: string): CodiceFiscaleCRC | null {\n        if (typeof codiceFiscale === \"string\" && new RegExp(PARTIAL_CF).test(codiceFiscale)) {\n            const partialCF = codiceFiscale.substr(LASTNAME_OFFSET, CRC_OFFSET);\n            let partialCfValue = 0;\n            for (const charValue of this.evaluateChar(partialCF)) { partialCfValue += charValue as number; }\n            return String.fromCharCode(partialCfValue % this.CRC_MOD + this.CHAR_OFFSET) as CodiceFiscaleCRC;\n        }\n        return null;\n    }\n\n    public static evaluateChar(partialCF: string = \"\"): IGeneratorWrapper<number, 0, void> {\n      return generatorWrapper(this.evaluateCharGenerator(partialCF));\n    }\n\n    private static CHAR_OFFSET: number = 65;\n    private static CRC_MOD: number = 26;\n\n    /**\n     * Partial FiscalCode Evaluator\n     * @param Partial Fiscal Code to evaluate\n     * @yields character value odd/even\n     */\n    private static* evaluateCharGenerator(partialCF: string = \"\"): Generator {\n        if (typeof partialCF === \"string\" && partialCF.length) {\n            for (let index = 0; index < partialCF.length; index++) {\n                let char: string = partialCF[index].toUpperCase();\n                const isNumber: boolean = (/^\\d$/u).test(char);\n                if (isNumber) {\n                    // Numbers have always (odd/even) the same values of corresponding letters (0-9 => A-J)\n                    char = String.fromCharCode(parseInt(char, 10) + this.CHAR_OFFSET);\n                }\n                // Odd/Even are shifted/swapped\n                // array starts from 0, \"Agenzia delle Entrate\" documentation counts the string from 1\n                const isOdd: boolean = !(index % 2); // Odd according to documentation\n                if (isOdd) {\n                    // Odd positions\n                    yield parseInt(CRC[char as any], 10);\n                } else {\n                    // Even positions\n                    yield char.charCodeAt(0) - this.CHAR_OFFSET;\n                }\n            }\n        }\n        return 0;\n    }\n}\n\nexport default CheckDigitizer;\n","export const LASTNAME_OFFSET = 0;\nexport const LASTNAME_SIZE = 3;\nexport const FIRSTNAME_OFFSET = 3;\nexport const FIRSTNAME_SIZE = 3;\nexport const YEAR_OFFSET = 6;\nexport const YEAR_SIZE = 2;\nexport const MONTH_OFFSET = 8;\nexport const MONTH_SIZE = 1;\nexport const DAY_OFFSET = 9;\nexport const DAY_SIZE = 2;\nexport const DATE_OFFSET = YEAR_OFFSET;\nexport const DATE_SIZE = YEAR_SIZE + MONTH_SIZE + DAY_SIZE;\nexport const GENDER_OFFSET = DAY_OFFSET;\nexport const GENDER_SIZE = 1;\nexport const PLACE_OFFSET = 11;\nexport const PLACE_SIZE = 4;\nexport const CRC_OFFSET = 15;\nexport const CRC_SIZE = 1;\nexport const CF_SIZE = LASTNAME_SIZE + FIRSTNAME_SIZE + DATE_SIZE + PLACE_SIZE + CRC_SIZE;\n","enum GenderWeight {\n    \"M\" = 0,\n    \"F\" = 40,\n}\n\nexport default GenderWeight;\n","enum Omocodes {\n    \"L\",\n    \"M\",\n    \"N\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n}\n\nexport default Omocodes;\n","import { DateDay } from \"../date-utils/\";\nimport GenderWeight from \"../enums/gender-weight.enum\";\nimport Genders from \"../types/genders.type\";\n\nclass Gender {\n    public static getDay(genderDay: number): DateDay | null {\n        const plainDay = genderDay % GenderWeight.F;\n        return (plainDay > 0 && plainDay <= this.MAX_MONTH_DAY) ? plainDay as DateDay : null;\n    }\n\n    public static getGender(genderDay: number): Genders | null {\n        return this.toArray()\n            .find((gender) => genderDay >= GenderWeight[gender] &&\n                genderDay <= GenderWeight[gender] + this.MAX_MONTH_DAY)\n            || null;\n    }\n\n    public static genderizeDay(day: number, gender: Genders): number {\n        return day + GenderWeight[gender];\n    }\n\n    public static toArray(): Genders[] {\n        return [\"M\", \"F\"];\n    }\n\n    private static MAX_MONTH_DAY: number = 31;\n}\n\nexport default Gender;\n","import DiacriticRemover from \"@marketto/diacritic-remover\";\nimport moment from \"moment\";\nimport { Belfiore, BelfiorePlace } from \"../belfiore-connector\";\nimport BelfioreConnector from \"../belfiore-connector/classes/belfiore-connector.class\";\nimport {\n    CRC_OFFSET,\n    CRC_SIZE,\n    DAY_OFFSET,\n    DAY_SIZE,\n    FIRSTNAME_OFFSET,\n    FIRSTNAME_SIZE,\n    GENDER_OFFSET,\n    GENDER_SIZE,\n    LASTNAME_OFFSET,\n    LASTNAME_SIZE,\n    MONTH_OFFSET,\n    MONTH_SIZE,\n    PLACE_OFFSET,\n    PLACE_SIZE,\n    YEAR_OFFSET,\n    YEAR_SIZE,\n} from \"../const/cf-offsets.const\";\nimport { CF_FULL_NAME_MATCHER, CF_SURNAME_MATCHER } from \"../const/matcher.const\";\nimport { CONSONANT_LIST, VOWEL_LIST } from \"../const/matcher.const\";\nimport { DateDay, DateMonth, DateUtils, MultiFormatDate } from \"../date-utils\";\nimport BirthMonth from \"../enums/birth-month.enum\";\nimport GenderWeight from \"../enums/gender-weight.enum\";\nimport Omocodes from \"../enums/omocodes.enum\";\nimport IPersonalInfo from \"../interfaces/personal-info.interface\";\nimport Genders from \"../types/genders.type\";\nimport CheckDigitizer from \"./check-digitizer.class\";\nimport Gender from \"./gender.class\";\n\nconst diacriticRemover = new DiacriticRemover();\n\nexport default class Parser {\n    /**\n     * Default omocode bitmap\n     */\n    public static OMOCODE_BITMAP: number = 0b0111011011000000;\n\n    /**\n     * Convert omocode CF into plain one\n     * @param codiceFiscale Partial or complete Omocode/Regular CF to parse, starting from LastName\n     * @returns Regular CF w/o omocodes chars\n     */\n    public static cfDeomocode(codiceFiscale: string): string {\n        if (codiceFiscale && codiceFiscale.length <= YEAR_OFFSET) {\n            return codiceFiscale;\n        }\n        const deomocodedCf = this.partialCfDeomocode(codiceFiscale);\n        if (deomocodedCf.length < CRC_OFFSET) {\n            return deomocodedCf;\n        }\n        const partialDeomocodedCf = deomocodedCf.substr(LASTNAME_OFFSET, CRC_OFFSET);\n        return partialDeomocodedCf + this.appyCaseToChar(\n            CheckDigitizer.checkDigit(deomocodedCf) || \"\",\n            deomocodedCf.substr(CRC_OFFSET, CRC_SIZE),\n        );\n    }\n\n    public static cfOmocode(codiceFiscale: string, omocodeId: number): string {\n        if (!omocodeId) {\n            return this.cfDeomocode(codiceFiscale);\n        }\n        const omocodedCf = codiceFiscale.split(\"\");\n        // tslint:disable-next-line: prefer-for-of\n        for (let i = codiceFiscale.length - 1, o = 0; i >= 0; i--) {\n            // tslint:disable-next-line: no-bitwise\n            if (2 ** i & this.OMOCODE_BITMAP) {\n                // tslint:disable-next-line: no-bitwise\n                const charToEncode: boolean = !!(omocodeId & 2 ** o);\n                const isOmocode: boolean = isNaN(parseInt(omocodedCf[i], 10));\n                if (charToEncode !== isOmocode) {\n                    const char: any = omocodedCf[i].toUpperCase();\n                    omocodedCf[i] = Omocodes[char];\n                }\n                o++;\n            }\n        }\n        const crc = omocodedCf[CRC_OFFSET];\n        if (crc) {\n            const partialCf = omocodedCf.slice(LASTNAME_OFFSET, CRC_OFFSET).join(\"\");\n            omocodedCf[CRC_OFFSET] = this.appyCaseToChar(\n                CheckDigitizer.checkDigit(partialCf) || \"\",\n                crc,\n            );\n        }\n        return omocodedCf.join(\"\");\n    }\n\n    public static cfOmocodeId(codiceFiscale: string): number {\n        const cfOmocodeBitmap = codiceFiscale.split(\"\")\n            // tslint:disable-next-line: no-bitwise\n            .filter((char, index) => 2 ** index & this.OMOCODE_BITMAP)\n            .map((char) => (/^[a-z]$/i).test(diacriticRemover[char]) ? 1 : 0)\n            .join(\"\");\n        return parseInt(cfOmocodeBitmap , 2);\n    }\n\n    /**\n     * Parse lastName information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Partial/possible lastName\n     */\n    public static cfToLastName(codiceFiscale: string): string | null {\n        if (\n            typeof codiceFiscale !== \"string\"\n            || codiceFiscale.length < (LASTNAME_OFFSET + LASTNAME_SIZE)\n            || !(new RegExp(`^(?:${CF_SURNAME_MATCHER})`, \"iu\")).test(codiceFiscale)\n        ) {\n            return null;\n        }\n\n        const lastNameCf = codiceFiscale.substr(LASTNAME_OFFSET, LASTNAME_SIZE);\n\n        const [cons = \"\"] = lastNameCf.match(new RegExp(`^[${CONSONANT_LIST}]{1,3}`, \"ig\")) || [];\n        const [vow = \"\"] = lastNameCf.match(new RegExp(`[${VOWEL_LIST}]{1,3}`, \"ig\")) || [];\n\n        const matchingLength = cons.length + vow.length;\n\n        if (matchingLength < 2 || matchingLength < 3 && lastNameCf[2].toUpperCase() !== \"X\") {\n            return null;\n        }\n\n        switch (cons.length) {\n        case 3:\n            return (cons + vow).split(\"\").join(this.JOLLY_CHAR) + this.JOLLY_CHAR;\n        case 2:\n            return `${cons[0]}${vow[0]}*${cons[1]}${this.JOLLY_CHAR}`;\n        case 1:\n            return `${cons[0]}${vow}${this.JOLLY_CHAR}`;\n        default:\n            return `${vow}${vow.length === 3 ? this.JOLLY_CHAR : \"\"}`;\n        }\n    }\n\n    /**\n     * Parse firstName information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Partial/possible firstName\n     */\n    public static cfToFirstName(codiceFiscale: string): string | null {\n        if (\n            typeof codiceFiscale !== \"string\"\n            || codiceFiscale.length < (FIRSTNAME_OFFSET + FIRSTNAME_SIZE)\n            || !(new RegExp(`^(${CF_FULL_NAME_MATCHER})`, \"iu\")).test(codiceFiscale)\n        ) {\n            return null;\n        }\n        return this.cfToLastName(codiceFiscale.substr(FIRSTNAME_OFFSET, FIRSTNAME_SIZE));\n    }\n\n    /**\n     * Parse gender information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Male or female\n     */\n    public static cfToGender(codiceFiscale: string): Genders | null {\n        if (typeof codiceFiscale !== \"string\" || codiceFiscale.length < (GENDER_OFFSET + GENDER_SIZE)) {\n            return null;\n        }\n        const cfGenderPart = codiceFiscale.substr(GENDER_OFFSET, GENDER_SIZE);\n        const genderInt = parseInt(this.partialCfDeomocode(cfGenderPart, GENDER_OFFSET), 10) * 10;\n        return Gender.getGender(genderInt);\n    }\n\n    /**\n     * Parse birth year information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Birth Year (4 digits)\n     */\n    public static cfToBirthYear(codiceFiscale: string): number | null {\n        if (typeof codiceFiscale !== \"string\" || codiceFiscale.length < (YEAR_OFFSET + YEAR_SIZE)) {\n            return null;\n        }\n        const cfBirthYearPart = codiceFiscale.substr(YEAR_OFFSET, YEAR_SIZE);\n        const birthYear: number = parseInt(this.partialCfDeomocode(cfBirthYearPart, YEAR_OFFSET), 10);\n\n        if (isNaN(birthYear)) {\n            return null;\n        }\n\n        const current2DigitsYear: number = parseInt(moment().format(\"YY\"), 10);\n\n        const century: number = (birthYear > current2DigitsYear ? 1 : 0) * 100;\n        return moment().subtract(current2DigitsYear - birthYear + century, \"years\").year();\n    }\n\n    /**\n     * Parse birth month information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Birth Month (0...11 - Date notation)\n     */\n    public static cfToBirthMonth(codiceFiscale: string): DateMonth | null {\n        if (typeof codiceFiscale !== \"string\" || codiceFiscale.length < (MONTH_OFFSET + MONTH_SIZE)) {\n            return null;\n        }\n\n        const cfBirthMonthPart: any = codiceFiscale.substr(MONTH_OFFSET, MONTH_SIZE).toUpperCase();\n        const birthMonth = BirthMonth[cfBirthMonthPart];\n        if (typeof birthMonth !== \"number\" || birthMonth < 0 || birthMonth > 11) {\n            return null;\n        }\n        return birthMonth as DateMonth;\n    }\n\n    /**\n     * Parse birth day information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Birth day (1..31)\n     */\n    public static cfToBirthDay(codiceFiscale: string): DateDay | null {\n        if (typeof codiceFiscale !== \"string\" || codiceFiscale.length < (DAY_OFFSET + DAY_SIZE)) {\n            return null;\n        }\n\n        const cfBirthDayPart = codiceFiscale.substr(DAY_OFFSET, DAY_SIZE);\n        const birthDay: number = parseInt(this.partialCfDeomocode(cfBirthDayPart, DAY_OFFSET), 10);\n\n        if (isNaN(birthDay)) {\n            return null;\n        }\n        return Gender.getDay(birthDay);\n    }\n\n    /**\n     * Parse birth date information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Birth Date\n     */\n    public static cfToBirthDate(codiceFiscale: string): Date | null {\n        const birthDay = this.cfToBirthDay(codiceFiscale);\n        if (!birthDay) {\n            return null;\n        }\n\n        const birthMonth = this.cfToBirthMonth(codiceFiscale);\n        if (typeof birthMonth !== \"number\") {\n            return null;\n        }\n\n        const birthYear = this.cfToBirthYear(codiceFiscale);\n\n        return DateUtils.ymdToDate(birthYear, birthMonth, birthDay);\n    }\n\n    /**\n     * Parse birth place information\n     * @param codiceFiscale Partial or complete CF to parse\n     * @returns Birth place\n     */\n    public static cfToBirthPlace(codiceFiscale: string): BelfiorePlace | null {\n        if (typeof codiceFiscale !== \"string\" || codiceFiscale.length < (PLACE_OFFSET + PLACE_SIZE)) {\n            return null;\n        }\n\n        const cfBirthPlacePart = codiceFiscale.substr(PLACE_OFFSET, PLACE_SIZE);\n        const belfioreCode: string = this.partialCfDeomocode(cfBirthPlacePart, PLACE_OFFSET);\n\n        const birthPlace: BelfiorePlace | undefined = Belfiore[belfioreCode];\n        if (!birthPlace) {\n            return null;\n        }\n\n        const { creationDate, expirationDate } = birthPlace;\n        if (creationDate || expirationDate) {\n            const birthDate = this.cfToBirthDate(codiceFiscale);\n            if (birthDate) {\n                let validityCheck = true;\n                if (creationDate) {\n                    validityCheck = moment(birthDate).isSameOrAfter(moment(creationDate));\n                }\n                if (validityCheck && expirationDate) {\n                    validityCheck = moment(birthDate).isSameOrBefore(moment(expirationDate));\n                }\n                if (!validityCheck) {\n                    return null;\n                }\n            }\n        }\n        return birthPlace;\n    }\n\n    /**\n     * @param fiscalCode 16 character Codice Fiscale to decode\n     * @returns Decoded CF Info\n     */\n    public static cfDecode(fiscalCode: string): IPersonalInfo {\n        const year = this.cfToBirthYear(fiscalCode) || undefined;\n        const month = this.cfToBirthMonth(fiscalCode) || undefined;\n        const day = this.cfToBirthDay(fiscalCode) || undefined;\n        const date = DateUtils.ymdToDate(year, month, day) || undefined;\n        const place = this.cfToBirthPlace(fiscalCode);\n        const personalInfo: IPersonalInfo = {\n            firstName: this.cfToFirstName(fiscalCode) || undefined,\n            lastName: this.cfToLastName(fiscalCode) || undefined,\n\n            day,\n            month,\n            year,\n\n            date,\n\n            gender: this.cfToGender(fiscalCode) || undefined,\n            place: place ? place.name : undefined,\n\n            omocodeId: this.cfOmocodeId(fiscalCode),\n        };\n\n        if (year && month && day) {\n            personalInfo.date = new Date(Date.UTC(year, month, day));\n        }\n\n        return personalInfo;\n    }\n\n    /**\n     * Parse lastName to cf part\n     * @param lastName Partial or complete CF to parse\n     * @returns partial cf\n     */\n    public static lastNameToCf(lastName?: string | null): string | null {\n        if (!lastName || (lastName || \"\").trim().length < 2) {\n            return null;\n        }\n\n        if (!(/^[A-Z ']+$/iu).test(diacriticRemover.replace(lastName))) {\n            return null;\n        }\n\n        const consonants = this.charExtractor(lastName, CONSONANT_LIST);\n        const vowels = this.charExtractor(lastName, VOWEL_LIST);\n\n        const partialCf = (consonants + vowels)\n            .padEnd(3, \"X\").substr(0, 3);\n\n        if (partialCf.length < 3) {\n            return null;\n        }\n        return partialCf.toUpperCase();\n    }\n\n    /**\n     * Parse firstName to cf part\n     * @param firstName Partial or complete CF to parse\n     * @returns partial cf\n     */\n    public static firstNameToCf(firstName?: string | null): string | null {\n        if (!firstName || (firstName || \"\").trim().length < 2) {\n            return null;\n        }\n        const consonants = this.charExtractor(firstName, CONSONANT_LIST);\n        if (consonants.length >= 4) {\n            return (consonants[0] + consonants.substr(2, 2)).toUpperCase();\n        }\n        return this.lastNameToCf(firstName);\n    }\n\n    /**\n     * Parse year to cf part\n     * @param year Birth year 2 or 4 digit string, number above 19XX or below 100\n     * @returns partial cf\n     */\n    public static yearToCf(year: string | number): string | null {\n        let parsedYear: number;\n        if (typeof year === \"string\") {\n            parsedYear = parseInt(year, 10);\n        } else {\n            parsedYear = year;\n        }\n\n        if (!(typeof parsedYear === \"number\" && !isNaN(parsedYear) && (parsedYear >= 1900 || parsedYear < 100))) {\n            return null;\n        }\n        return `0${parsedYear}`.substr(-2);\n    }\n\n    /**\n     * Parse month information\n     * @param month Month number 0..11\n     * @returns Birth Month CF code\n     */\n    public static monthToCf(month: DateMonth | number): string | null {\n        if (month < 0 || month > 11) {\n            return null;\n        }\n\n        return BirthMonth[month] || null;\n    }\n\n    /**\n     * Parse day information\n     * @param day Day number 1..31\n     * @param gender Gender enum value\n     * @returns Birth Day CF code\n     */\n    public static dayGenderToCf(day: DateDay | number, gender: Genders): string | null {\n        if (day < 1 || day > 31) {\n            return null;\n        }\n\n        const genderValue = GenderWeight[gender as any];\n        if (typeof genderValue !== \"number\") {\n            return null;\n        }\n        return `0${day + genderValue}`.substr(-2);\n    }\n\n    /**\n     * Parse Year, Month, Day to Dated\n     * @param year 4 digits Year\n     * @param month 1 or 2 digits Month 0..11\n     * @param day 1,2 digits Day 1..31\n     * @returns Date or null if provided year/month/day are not valid\n     */\n    public static yearMonthDayToDate(\n        year: number | null | undefined,\n        month: DateMonth | null | undefined = 0,\n        day: DateDay | null | undefined = 1,\n    ): Date | null {\n        if (!year || year < 1861 || [month, day].some((param) => typeof param !== \"number\") ) {\n            return null;\n        }\n        const date = moment(Date.UTC(year, month || 0, day || 1));\n        if (!date.isValid() || date.year() !== year || date.month() !== month || date.date() !== day) {\n            return null;\n        }\n        return date.toDate();\n    }\n\n    public static parsePlace(\n        place: BelfiorePlace | string,\n        scopedBelfioreConnector: BelfioreConnector = Belfiore,\n    ): BelfiorePlace | null {\n        let verifiedBirthPlace: BelfiorePlace | null | undefined;\n        if (!place) {\n            return null;\n        } else if (typeof place === \"object\" && place.belfioreCode) {\n            verifiedBirthPlace = scopedBelfioreConnector[place.belfioreCode];\n        } else if (typeof place === \"string\") {\n            verifiedBirthPlace = scopedBelfioreConnector[place] || scopedBelfioreConnector.findByName(place);\n        }\n        return verifiedBirthPlace || null;\n    }\n\n    /**\n     * Parse a Dated and Gender information to create Date/Gender CF part\n     * @param date Date or Moment instance, ISO8601 date string or array of numbers [year, month, day]\n     * @param gender Gender enum value\n     * @returns Birth date and Gender CF code\n     */\n    public static dateGenderToCf(date: MultiFormatDate, gender: Genders): string | null {\n        const parsedDate = DateUtils.parseDate(date);\n        if (!parsedDate) {\n            return null;\n        }\n\n        const cfYear = this.yearToCf(parsedDate.getFullYear());\n        const cfMonth = this.monthToCf(parsedDate.getMonth());\n        const cfDayGender = this.dayGenderToCf(parsedDate.getDate(), gender);\n\n        return `${cfYear}${cfMonth}${cfDayGender}`;\n    }\n\n    /**\n     * Parse place name and province to Belfiore code\n     * @param cityOrCountryName City or Country name\n     * @param provinceId Province code for cities\n     * @returns Matching place belfiore code, if only once is matching criteria\n     */\n    /**\n     * Parse a Date and Gender information to create Date/Gender CF part\n     * @param birthDate Date or Moment instance, ISO8601 date string or array of numbers [year, month, day]\n     * @param cityOrCountryName City or Country name\n     * @param provinceId Province code for cities\n     * @returns Matching place belfiore code, if only once is matching criteria\n     */\n    public static placeToCf(cityOrCountryName: string, provinceId?: string): string | null;\n    public static placeToCf(birthDate: MultiFormatDate, cityOrCountryName: string, provinceId?: string): string | null;\n    public static placeToCf(dateOrName: MultiFormatDate, nameOrProvince?: string, provinceId?: string): string | null {\n        const birthDate: Date | null = DateUtils.parseDate(dateOrName);\n        let name: string;\n        let province: string | undefined;\n        if (!birthDate && typeof dateOrName === \"string\") {\n            name = dateOrName;\n            province = nameOrProvince;\n        } else if (nameOrProvince) {\n            name = nameOrProvince;\n            province = provinceId;\n        } else {\n            return null;\n        }\n\n        let placeFinder: BelfioreConnector | undefined = Belfiore;\n        if (province) {\n            placeFinder = placeFinder.byProvince(province);\n        }\n        if (birthDate && placeFinder) {\n            placeFinder = placeFinder.active(birthDate);\n        }\n        if (placeFinder) {\n            const foundPlace: BelfiorePlace | null = this.parsePlace(name, placeFinder);\n            if (foundPlace) {\n                return foundPlace.belfioreCode;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Generates full CF\n     * @returns Complete CF\n     */\n    public static encodeCf({\n        lastName,\n        firstName,\n\n        year,\n        month,\n        day,\n        date,\n\n        gender,\n        place,\n\n        omocodeId = 0,\n    }: IPersonalInfo): string | null {\n        const dtParams = DateUtils.parseDate(date) || this.yearMonthDayToDate(year, month, day);\n        if (!(dtParams && lastName && firstName && gender && place)) {\n            return null;\n        }\n        const generator = [\n            () => this.lastNameToCf(lastName),\n            () => this.firstNameToCf(firstName),\n            () => this.dateGenderToCf(dtParams, gender),\n            () => this.placeToCf(dtParams, place),\n        ];\n        let cf = \"\";\n        for (const cfPartGenerator of generator) {\n            const cfValue = cfPartGenerator();\n            if (!cfValue) {\n                return null;\n            }\n            cf += cfValue;\n        }\n\n        return this.cfOmocode(cf, omocodeId);\n    }\n\n    private static JOLLY_CHAR: string = \"*\";\n\n    private static checkBitmap(offset: number): boolean {\n        // tslint:disable-next-line: no-bitwise\n        return !!( 2 ** offset & this.OMOCODE_BITMAP);\n    }\n\n    private static charOmocode(char: string, offset: number): string {\n        if ((/^[A-Z]$/giu).test(char) && this.checkBitmap(offset)) {\n            return Omocodes[char.toUpperCase() as any];\n        }\n\n        return char;\n    }\n\n    private static charExtractor(text: string, CHAR_LIST: string): string {\n        const charMatcher = new RegExp(`[${CHAR_LIST}]+`, \"ig\");\n        const diacriticFreeText = diacriticRemover.replace(text).trim();\n        const matchingChars = diacriticFreeText.match(charMatcher);\n        return (matchingChars || []).join(\"\");\n    }\n\n    /**\n     * Convert omocode full or chunk CF into plain one\n     * @param partialCodiceFiscale Partial or complete Omocode/Regular CF to parse\n     * @param offset starting point of the given chunk in the 16 char CF\n     * @returns Regular version w/o omocodes chars of the given chunk\n     */\n    private static partialCfDeomocode(partialCodiceFiscale: string, offset: number = 0): string {\n        const charReplacer = (char: string, position: number) => this.charOmocode(char, position + offset);\n        return partialCodiceFiscale.replace(/[\\dA-Z]/giu, charReplacer);\n    }\n\n    private static appyCaseToChar(targetChar: string, counterCaseChar: string): string {\n        if (targetChar && counterCaseChar) {\n            const isUpperCase = counterCaseChar[0] === counterCaseChar[0].toUpperCase();\n            const isLowerCase = counterCaseChar[0] === counterCaseChar[0].toLowerCase();\n\n            if (isUpperCase && !isLowerCase) {\n                return targetChar[0].toUpperCase();\n            } else if (!isUpperCase && isLowerCase) {\n                return targetChar[0].toLowerCase();\n            }\n        }\n        return targetChar[0];\n    }\n}\n","const INVALID_SURNAME: string = \"Provided lastName is not valid, only letters, diacritics and apostrophe allowed\";\nconst INVALID_NAME: string = \"Provided name is not valid, only letters, diacritics and apostrophe allowed\";\nconst INVALID_DAY: string = \"Provided day is not valid\";\nconst INVALID_GENDER: string = \"Provided gender is not valid\";\nconst INVALID_DAY_OR_GENDER: string = \"Provided day and/or gender are not valid\";\nconst INVALID_YEAR: string = \"Provided year is not valid, only 2 or 4 digit numbers are allowed\";\nconst INVALID_DATE: string = \"Provided date is not valid\";\nconst INVALID_PLACE_NAME: string = \"Proviced City/Country name is not valid\";\n\nexport {\n    INVALID_DATE,\n    INVALID_DAY,\n    INVALID_DAY_OR_GENDER,\n    INVALID_GENDER,\n    INVALID_NAME,\n    INVALID_PLACE_NAME,\n    INVALID_SURNAME,\n    INVALID_YEAR,\n};\n","import * as ErrorMessages from \"../const/error-messages.const\";\n\nclass CfuError extends Error {\n    constructor(errorMessage: string)\n    constructor(errorCode: string) {\n        super((Object.entries(ErrorMessages).find(([errId]) => errId === errorCode) || [])[1] || errorCode);\n    }\n}\n\nexport default CfuError;\n","import DiacriticRemover from \"@marketto/diacritic-remover\";\nimport moment from \"moment\";\nimport {\n    INVALID_DATE,\n    INVALID_DAY,\n    INVALID_DAY_OR_GENDER,\n    INVALID_GENDER,\n    INVALID_NAME,\n    INVALID_SURNAME,\n    INVALID_YEAR,\n} from \"../const/error-messages.const\";\nimport {\n    BELFIORE_CODE_MATCHER,\n    CF_NAME_MATCHER,\n    CF_SURNAME_MATCHER,\n    CHECK_DIGIT,\n    CODICE_FISCALE,\n    CONSONANT_LIST,\n    DAY_MATCHER,\n    FEMALE_DAY_MATCHER,\n    FEMALE_FULL_DATE_MATCHER,\n    FULL_DATE_MATCHER,\n    MALE_DAY_MATCHER,\n    MALE_FULL_DATE_MATCHER,\n    MONTH_MATCHER,\n    VOWEL_LIST,\n    YEAR_MATCHER,\n} from \"../const/matcher.const\";\nimport { DATE_MATCHER, DateDay, DateMonth, DateUtils, MultiFormatDate } from \"../date-utils/\";\nimport Omocodes from \"../enums/omocodes.enum\";\nimport IPersonalInfo from \"../interfaces/personal-info.interface\";\nimport Genders from \"../types/genders.type\";\nimport CfuError from \"./cfu-error.class\";\nimport Gender from \"./gender.class\";\nimport Parser from \"./parser.class\";\n\nconst diacriticRemover = new DiacriticRemover();\n\nexport default class Pattern {\n\n    /**\n     * Validation regexp for the given lastName or generic\n     * @param lastName Optional lastName to generate validation regexp\n     * @return CF Surname matcher\n     * @throw INVALID_SURNAME\n     */\n    public static cfLastName(lastName?: string): RegExp {\n        let matcher: string = CF_SURNAME_MATCHER;\n        if (lastName) {\n            if (!this.lastName().test(lastName)) {\n                throw new CfuError(INVALID_SURNAME);\n            }\n            matcher = Parser.lastNameToCf(lastName) || matcher;\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Validation regexp for the given name or generic\n     * @param name Optional name to generate validation regexp\n     * @return CF name matcher\n     * @throw INVALID_NAME\n     */\n    public static cfFirstName(name?: string): RegExp {\n        let matcher: string = CF_NAME_MATCHER;\n        if (name) {\n            if (!this.lastName().test(name)) {\n                throw new CfuError(INVALID_NAME);\n            }\n            matcher = Parser.firstNameToCf(name) || matcher;\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param year Optional year to generate validation regexp\n     * @return CF year matcher\n     */\n    public static cfYear(year?: number): RegExp {\n        let matcher: string = YEAR_MATCHER;\n        if (year) {\n            const parsedYear = Parser.yearToCf(year);\n            if (parsedYear) {\n                matcher = this.deomocode(parsedYear);\n            } else {\n                throw new CfuError(INVALID_YEAR);\n            }\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Validation regexp for the given month or generic\n     * @param month Optional month to generate validation regexp\n     * @return CF month matcher\n     */\n    public static cfMonth(month?: DateMonth) {\n        let matcher: string = MONTH_MATCHER;\n        if (month) {\n            matcher = Parser.monthToCf(month) || matcher;\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Validation regexp for the given day or generic\n     * @param day Optional day to generate validation regexp\n     * @return CF day matcher\n     */\n    public static cfDay(day?: DateDay): RegExp {\n        let matcher = DAY_MATCHER;\n        if (day) {\n            const parsedDayM = Parser.dayGenderToCf(day, \"M\");\n            const parsedDayF = Parser.dayGenderToCf(day, \"F\");\n            if (parsedDayM && parsedDayF) {\n                const matcherM: string = this.deomocode(parsedDayM);\n                const matcherF: string = this.deomocode(parsedDayF);\n                matcher = `(?:${matcherM})|(?:${matcherF})`;\n            } else {\n                throw new CfuError(INVALID_DAY);\n            }\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param day Optional day to generate validation regexp\n     * @param gender Gender @see Genders\n     * @return CF day and gender matcher\n     */\n    public static cfDayGender(day?: DateDay, gender?: Genders): RegExp {\n        if (!gender) {\n            return this.cfDay(day);\n        }\n        let matcher;\n        if (day) {\n            const parsedDayGender = Parser.dayGenderToCf(day, gender);\n            if (parsedDayGender) {\n                matcher = this.deomocode(parsedDayGender);\n            } else {\n                throw new CfuError(INVALID_DAY_OR_GENDER);\n            }\n        } else {\n            switch (gender) {\n            case \"M\":\n                matcher = MALE_DAY_MATCHER;\n                break;\n            case \"F\":\n                matcher = FEMALE_DAY_MATCHER;\n                break;\n            default:\n                throw new CfuError(INVALID_GENDER);\n            }\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param date Optional date to generate validation regexp\n     * @param gender @see Genders\n     * @return CF date and gender matcher\n     */\n    public static cfDateGender(date?: MultiFormatDate | null, gender?: Genders | null): RegExp {\n        if (date && !DateUtils.parseDate(date)) {\n            throw new CfuError(INVALID_DATE);\n        }\n        if (gender && !Gender.toArray().includes(gender)) {\n            throw new CfuError(INVALID_GENDER);\n        }\n        let matcher = FULL_DATE_MATCHER;\n        if (date) {\n            const parsedDateGender = gender && Parser.dateGenderToCf(date, gender);\n            if (parsedDateGender) {\n                matcher = this.deomocode(parsedDateGender);\n            } else {\n                const parseDeomocode = (g: Genders): string => {\n                    const parsedGender = Parser.dateGenderToCf(date, g);\n                    if (!parsedGender) {\n                        throw new CfuError(INVALID_DATE);\n                    }\n                    return parsedGender && this.deomocode(parsedGender);\n                };\n                matcher = `(?:${Gender.toArray().map(parseDeomocode).join(\"|\")})`;\n            }\n        } else if (gender === \"M\") {\n            matcher = MALE_FULL_DATE_MATCHER;\n        } else if (gender === \"F\") {\n            matcher = FEMALE_FULL_DATE_MATCHER;\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * @param placeName Optional place name to generate validation regexp\n     * @return CF place matcher\n     */\n    /**\n     * @param date Optional date to generate validation regexp\n     * @param placeName Optional place name to generate validation regexp\n     * @return CF place matcher\n     */\n    public static cfPlace(placeName?: string | null): RegExp;\n    public static cfPlace(birthDate?: MultiFormatDate | null, placeName?: string | null): RegExp;\n    public static cfPlace(birthDateOrName?: MultiFormatDate | null, placeName?: string | null): RegExp {\n        let matcher = BELFIORE_CODE_MATCHER;\n        if (birthDateOrName) {\n            const birthDate: Date | null = DateUtils.parseDate(birthDateOrName);\n\n            if (birthDate && placeName) {\n                const place: string = placeName;\n                const parsedPlace = Parser.placeToCf(birthDate, place);\n                matcher = this.deomocode(parsedPlace || \"\");\n            } else if (!birthDate && typeof birthDateOrName === \"string\") {\n                const place: string = birthDateOrName;\n                const parsedPlace = Parser.placeToCf(place);\n                matcher = this.deomocode(parsedPlace || \"\");\n            }\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Generates full CF validator based on given optional input or generic\n     * @param personalInfo Input Object\n     * @return CodiceFiscale matcher\n     */\n    public static codiceFiscale(personalInfo?: IPersonalInfo): RegExp {\n        let matcher = CODICE_FISCALE;\n        if (personalInfo) {\n            const parsedCf = Parser.encodeCf(personalInfo);\n\n            if (parsedCf) {\n                matcher = this.deomocode(parsedCf);\n            } else {\n                const { lastName, firstName, year, month, day, date, gender, place } = personalInfo;\n                if (lastName || firstName || year || month || day || date || gender || place) {\n                    let dtParams: Date | null = null;\n                    if (date) {\n                        dtParams = DateUtils.parseDate(date);\n                    } else if (year) {\n                        dtParams = Parser.yearMonthDayToDate(year, month, day);\n                    }\n                    const generator: Array<() => RegExp> = [\n                        () => this.cfLastName(lastName),\n                        () => this.cfFirstName(firstName),\n                        () => this.cfDateGender(dtParams, gender),\n                        () => this.cfPlace(dtParams, place),\n                    ];\n\n                    matcher = \"\";\n                    for (const validator of generator) {\n                        const cfMatcher = validator().toString();\n                        const match = cfMatcher.match(/\\^(.+)\\$/);\n                        const cfValue: string | null | undefined = match && match[1];\n\n                        if (!cfValue) {\n                            throw new Error(`Unable to handle [${cfMatcher}]`);\n                        }\n                        matcher += `(?:${cfValue})`;\n                    }\n                    // Final addition of CheckDigit\n                    matcher += CHECK_DIGIT;\n                }\n            }\n        }\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Returns lastName validator based on given cf or generic\n     * @param codiceFiscale Partial or complete CF to parse\n     * @return Generic or specific regular expression\n     */\n    public static lastName(codiceFiscale?: string): RegExp {\n        const LETTER_SET: string = `[A-Z${diacriticRemover.matcherBy(/^[A-Z]$/ui)}]`;\n        const SEPARATOR_SET: string = \"[' ]\";\n        const ANY_LETTER: string = `(?:${LETTER_SET}+${SEPARATOR_SET}?)`;\n        let matcher: string = `${ANY_LETTER}+`;\n        if (codiceFiscale && (/^[A-Z]{1,3}/iu).test(codiceFiscale)) {\n            const lastNameCf: string = codiceFiscale.substr(0, 3);\n            const diacriticizer = (matchingChars: string) => matchingChars.split(\"\")\n                .map((char) => `[${diacriticRemover.insensitiveMatcher[char]}]`);\n\n            const [cons, vow] = [\n                `^[${CONSONANT_LIST}]{1,3}`,\n                `[${VOWEL_LIST}]{1,3}`,\n            ].map((charMatcher) => diacriticizer((lastNameCf.match(new RegExp(charMatcher, \"ig\")) || [])[0] || \"\"));\n\n            const diacriticsVowelList: string = VOWEL_LIST + diacriticRemover.matcherBy(new RegExp(`^[${VOWEL_LIST}]$`, \"ui\"));\n            const diacriticsVowelMatcher: string = `[${diacriticsVowelList}]`;\n            const midDiacriticVowelMatcher: string = `(?:${diacriticsVowelMatcher}${SEPARATOR_SET}?)*`;\n            const endingDiacritcVowelMatcher: string = `(?:${SEPARATOR_SET}?${midDiacriticVowelMatcher}${diacriticsVowelMatcher})?`;\n            switch (cons.length) {\n            case 3: {\n                const divider = midDiacriticVowelMatcher;\n                matcher = divider + cons.join(`${SEPARATOR_SET}?${divider}`) + `(?:${SEPARATOR_SET}?${LETTER_SET}*${LETTER_SET})?`;\n                break;\n            }\n            case 2: {\n                const possibilities = [\n                    `${vow[0]}${SEPARATOR_SET}?${cons[0]}${midDiacriticVowelMatcher}${cons[1]}`,\n                    `${cons[0]}${SEPARATOR_SET}?` + vow.join(`${SEPARATOR_SET}?`) + `${SEPARATOR_SET}?${midDiacriticVowelMatcher}${cons[1]}`,\n                    cons.join(`${SEPARATOR_SET}?`) + `${SEPARATOR_SET}?${vow[0]}`,\n                ];\n                matcher = `(?:${possibilities.join(\"|\")})${endingDiacritcVowelMatcher}`;\n                break;\n            }\n            case 1: {\n                const possibilities = [\n                    vow.slice(0, 2).join(`${SEPARATOR_SET}?`) +\n                        midDiacriticVowelMatcher + cons.join(`${SEPARATOR_SET}?`),\n                    `${vow[0]}${SEPARATOR_SET}?` + cons.join(`${SEPARATOR_SET}?`) + vow[1],\n                    [cons[0], ...vow.slice(0, 2)].join(`${SEPARATOR_SET}?`),\n                ];\n                matcher = `(?:${possibilities.join(\"|\")})${endingDiacritcVowelMatcher}`;\n                break;\n            }\n            default:\n                matcher = `${vow.join(`${SEPARATOR_SET}?`)}${endingDiacritcVowelMatcher}`;\n            }\n        }\n\n        return this.isolatedInsensitiveTailor(` *(${matcher}) *`);\n    }\n\n    /**\n     * Returns name validator based on given cf or generic\n     * @param codiceFiscale Partial or complete CF to parse\n     * @return Generic or specific regular expression\n     */\n    public static firstName(codiceFiscale?: string): RegExp {\n        if (codiceFiscale && new RegExp(`^[A-Z]{3}[${CONSONANT_LIST}]{3}`, \"iu\").test(codiceFiscale)) {\n            const ANY_LETTER: string = `[A-Z${diacriticRemover.matcherBy(/^[A-Z]$/ui)}]`;\n            const SEPARATOR_SET: string = \"(?:'? ?)\";\n\n            const nameCf: string = codiceFiscale.substr(3, 3);\n\n            const cons: string[] = ((nameCf.match(new RegExp(`^[${CONSONANT_LIST}]{1,3}`, \"ig\")) || [])[0] || \"\")\n                .split(\"\").map((char) => `[${diacriticRemover.insensitiveMatcher[char]}]`);\n\n            const [diacriticsVowelList, diacriticsConsonantList]: string[] = [VOWEL_LIST, CONSONANT_LIST]\n                .map((chars) => chars + diacriticRemover.matcherBy(new RegExp(`^[${chars}]$`, \"ui\")));\n\n            const matcher: string = `(?:[${diacriticsVowelList}]+${SEPARATOR_SET})*${cons[0]}${SEPARATOR_SET}(?:[${diacriticsVowelList}]+${SEPARATOR_SET})*(?:[${diacriticsConsonantList}]${SEPARATOR_SET}(?:[${diacriticsVowelList}]+${SEPARATOR_SET})*)?`\n                + cons.slice(1, 3).join(`(?:[${diacriticsVowelList}]+${SEPARATOR_SET})*`) + `${ANY_LETTER}*`;\n\n            return this.isolatedInsensitiveTailor(matcher);\n        }\n        return this.lastName((codiceFiscale || \"\").substr(3, 3));\n    }\n\n    /**\n     * Returns iso8601 date validator based on given cf or generic\n     * @param codiceFiscale Partial or complete CF to parse\n     * @return Generic or specific regular expression\n     */\n    public static date(codiceFiscale?: string): RegExp {\n        let matcher: string = DATE_MATCHER.ISO8601_DATE_TIME;\n        if (codiceFiscale) {\n            const parsedDate = Parser.cfToBirthDate(codiceFiscale);\n            if (parsedDate) {\n                const dateIso8601: string = parsedDate.toJSON();\n                if (moment().diff(moment(parsedDate), \"y\") < 50) {\n                    const century: number = parseInt(dateIso8601.substr(0, 2), 10);\n                    const centuries: string[] = [\n                        century - 1,\n                        century,\n                    ].map((year) => year.toString().padStart(2, \"0\"));\n                    matcher = `(?:${centuries.join(\"|\")})` + dateIso8601.substr(2, 8);\n                } else {\n                    matcher = dateIso8601.substr(0, 10);\n                }\n            }\n        }\n        return this.isolatedInsensitiveTailor(`${matcher}(?:T${DATE_MATCHER.TIME}(?:${DATE_MATCHER.TIMEZONE})?)?`);\n    }\n\n    /**\n     * Returns gender validator based on given cf or generic\n     * @param codiceFiscale Partial or complete CF to parse\n     * @return Generic or specific regular expression\n     */\n    public static gender(codiceFiscale?: string): RegExp {\n        const parsedGender = codiceFiscale && Parser.cfToGender(codiceFiscale);\n        const matcher: string = parsedGender || `[${Gender.toArray().join(\"\")}]`;\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    /**\n     * Returns place validator based on given cf or generic\n     * @param codiceFiscale Partial or complete CF to parse\n     * @return Generic or specific regular expression\n     */\n    public static place(codiceFiscale?: string): RegExp {\n        let matcher: string = \".+\";\n        const parsedPlace = codiceFiscale && Parser.cfToBirthPlace(codiceFiscale);\n\n        if (parsedPlace) {\n            const nameMatcher: string = parsedPlace.name.replace(/./gu, (c) => diacriticRemover[c] === c ? c : `[${c}${diacriticRemover[c]}]`);\n            matcher = `(?:(?:${nameMatcher})|${parsedPlace.belfioreCode})`;\n        }\n\n        return this.isolatedInsensitiveTailor(matcher);\n    }\n\n    public static deomocode(omocode: string): string {\n        return omocode.replace(/\\d/gu, (n: any) => `[${n}${Omocodes[n]}]`);\n    }\n\n    private static isolatedInsensitiveTailor(matcher: string): RegExp {\n        return new RegExp(`^(?:${matcher})$`, \"iu\");\n    }\n}\n","import moment from \"moment\";\nimport { BelfiorePlace } from \"../belfiore-connector\";\nimport {\n    CRC_OFFSET,\n    CRC_SIZE,\n    DATE_OFFSET,\n    DATE_SIZE,\n    FIRSTNAME_OFFSET,\n    FIRSTNAME_SIZE,\n    GENDER_OFFSET,\n    GENDER_SIZE,\n    LASTNAME_OFFSET,\n    LASTNAME_SIZE,\n    PLACE_OFFSET,\n    PLACE_SIZE,\n    YEAR_OFFSET,\n    YEAR_SIZE,\n} from \"../const/cf-offsets.const\";\nimport { DateUtils, MultiFormatDate } from \"../date-utils/\";\nimport IPersonalInfo from \"../interfaces/personal-info.interface\";\nimport Genders from \"../types/genders.type\";\nimport CheckDigitizer from \"./check-digitizer.class\";\nimport Parser from \"./parser.class\";\nimport Pattern from \"./pattern.class\";\n\nexport default class CFMismatchValidator {\n    constructor(private codiceFiscale: string) {}\n\n    private get hasLastName() {\n        return this.codiceFiscale.length >= (LASTNAME_OFFSET + LASTNAME_SIZE);\n    }\n\n    private get hasFirstName() {\n        return this.codiceFiscale.length >= (FIRSTNAME_OFFSET + FIRSTNAME_SIZE);\n    }\n    private get hasBirthYear() {\n        return this.codiceFiscale.length >= (YEAR_OFFSET + YEAR_SIZE);\n    }\n    private get hasBirthDate() {\n        return this.codiceFiscale.length >= (DATE_OFFSET + DATE_SIZE);\n    }\n    private get hasGender() {\n        return this.codiceFiscale.length >= (GENDER_OFFSET + GENDER_SIZE);\n    }\n    private get hasBirthPlace() {\n        return this.codiceFiscale.length >= (PLACE_OFFSET + PLACE_SIZE);\n    }\n    private get hasCRC() {\n        return this.codiceFiscale.length >= (CRC_OFFSET + CRC_SIZE);\n    }\n\n    public matchPersonalInfo(personalInfo: IPersonalInfo): boolean {\n        return Pattern.codiceFiscale(personalInfo).test(this.codiceFiscale);\n    }\n    public mismatchPersonalInfo(personalInfo: IPersonalInfo): boolean {\n        return !!(\n            this.codiceFiscale &&\n            personalInfo &&\n            personalInfo.lastName &&\n            personalInfo.firstName &&\n            (personalInfo.date || (personalInfo.day && personalInfo.month && personalInfo.year)) &&\n            personalInfo.gender &&\n            personalInfo.place &&\n            !this.matchPersonalInfo(personalInfo)\n        );\n    }\n\n    public matchLastName(lastName?: string): boolean {\n        return this.hasLastName &&\n            Pattern.lastName(this.codiceFiscale).test(lastName || \"\");\n    }\n    public mismatchLastName(lastName?: string): boolean {\n        return this.hasLastName && !!lastName && !this.matchLastName(lastName);\n    }\n\n    public matchFirstName(firstName: string): boolean {\n        return this.hasFirstName &&\n            Pattern.firstName(this.codiceFiscale).test(firstName || \"\");\n    }\n    public mismatchFirstName(firstName: string): boolean {\n        return this.hasFirstName && !!firstName && !this.matchFirstName(firstName);\n    }\n\n    public matchBirthDate(birthDate: MultiFormatDate): boolean {\n        if (this.hasBirthDate) {\n            const parsedCfDate = Parser.cfToBirthDate(this.codiceFiscale);\n            const parsedDate = DateUtils.parseDate(birthDate);\n            if (parsedCfDate && parsedDate) {\n                return moment(parsedCfDate).isSame(parsedDate, \"d\");\n            }\n        }\n        return false;\n    }\n    public mismatchBirthDate(birthDate: MultiFormatDate): boolean {\n        return this.hasBirthYear && !!DateUtils.parseDate(birthDate) && !this.matchBirthDate(birthDate);\n    }\n\n    public matchGender(gender: Genders | string): boolean {\n        return this.hasGender && Pattern.gender(this.codiceFiscale).test(gender || \"\");\n    }\n\n    public mismatchGender(gender: Genders | string): boolean {\n        return this.hasGender && !!gender && !this.matchGender(gender);\n    }\n\n    /**\n     * @param birthPlace BirthPlace, place name or BelfioreCode\n     */\n    public matchBirthPlace(birthPlace: BelfiorePlace | string): boolean {\n        if (this.hasBirthPlace && birthPlace) {\n            const matcher = Pattern.place(this.codiceFiscale);\n            const parsedBirthPlace = Parser.parsePlace(birthPlace);\n\n            return !!parsedBirthPlace && matcher.test(parsedBirthPlace.belfioreCode);\n        }\n        return false;\n    }\n    /**\n     * @param birthPlace BirthPlace, place name or BelfioreCode\n     */\n    public mismatchBirthPlace(birthPlace: BelfiorePlace | string): boolean {\n        return this.hasBirthPlace && !!birthPlace && !this.matchBirthPlace(birthPlace);\n    }\n\n    /**\n     * Check the given cf validity by form, birth date/place and digit code\n     * @param codiceFiscale Complete CF to parse\n     * @return Generic or specific regular expression\n     */\n    public get valid(): boolean {\n        if (\n            // Checking length\n            !this.hasCRC ||\n            // Checking form validity\n            !Pattern.codiceFiscale().test(this.codiceFiscale) ||\n            // Checking 16th char check digit validity\n            this.codiceFiscale.substr(CRC_OFFSET, CRC_SIZE)\n                .toUpperCase() !== CheckDigitizer.checkDigit(this.codiceFiscale) ||\n            // Checking Birth date/place validity\n            !Parser.cfToBirthPlace(this.codiceFiscale)\n        ) {\n            return false;\n        }\n        return true;\n    }\n    public get invalid(): boolean {\n        return !!this.codiceFiscale && !this.valid;\n    }\n}\n","import {\n    Belfiore,\n    BelfioreConnector,\n    BelfiorePlace,\n} from \"../belfiore-connector\";\nimport { DateUtils, MultiFormatDate } from \"../date-utils/\";\nimport Genders from \"../types/genders.type\";\nimport CFMismatchValidator from \"./cf-mismatch-validator.class\";\nimport Parser from \"./parser.class\";\nimport Pattern from \"./pattern.class\";\n\nexport default class Validator {\n    public static codiceFiscale(codiceFiscale: string): CFMismatchValidator {\n        return new CFMismatchValidator(codiceFiscale);\n    }\n\n    public static isLastNameValid(lastName: string): boolean {\n        return Pattern.lastName().test(lastName);\n    }\n    public static isLastNameInvalid(lastName: string): boolean {\n        return !!lastName && !this.isLastNameValid(lastName);\n    }\n\n    public static isFirstNameValid(firstName: string): boolean {\n        return Pattern.firstName().test(firstName);\n    }\n    public static isFirstNameInvalid(firstName: string): boolean {\n        return !!firstName && !this.isFirstNameValid(firstName);\n    }\n\n    public static isBirthDateValid(birthDate: MultiFormatDate): boolean {\n        return !!DateUtils.parseDate(birthDate);\n    }\n    public static isBirthDateInvalid(birthDate: MultiFormatDate): boolean {\n        return !!birthDate && !this.isBirthDateValid(birthDate);\n    }\n\n    public static isGenderValid(gender: Genders | string): boolean {\n        return Pattern.gender().test(gender);\n    }\n    public static isGenderInvalid(gender: Genders | string): boolean {\n        return !!gender && !this.isGenderValid(gender);\n    }\n\n    public static isBirthPlaceValid(\n        birthPlace: BelfiorePlace | string,\n        scopedBelfioreConnector: BelfioreConnector = Belfiore,\n    ): boolean {\n        const parsedBirthPlace = Parser.parsePlace(birthPlace);\n        return !!parsedBirthPlace && !!scopedBelfioreConnector[parsedBirthPlace.belfioreCode];\n    }\n    public static isBirthPlaceInvalid(\n        birthPlace: BelfiorePlace | string,\n        scopedBelfioreConnector: BelfioreConnector = Belfiore,\n    ): boolean {\n        return !!birthPlace && !this.isBirthPlaceValid(birthPlace, scopedBelfioreConnector);\n    }\n\n    public static birthDatePlaceMatch(birthDate: MultiFormatDate, birthPlace: BelfiorePlace | string): boolean {\n        const parsedPlace = Parser.parsePlace(birthPlace);\n        return this.isBirthDateValid(birthDate) && !!parsedPlace &&\n            !!Belfiore.active(birthDate)[parsedPlace.belfioreCode];\n    }\n    public static birthDatePlaceMismatch(birthDate: MultiFormatDate, birthPlace: BelfiorePlace | string): boolean {\n        const parsedPlace = Parser.parsePlace(birthPlace);\n        return this.isBirthDateValid(birthDate) && !!parsedPlace &&\n            !this.birthDatePlaceMatch(birthDate, birthPlace);\n    }\n    public static birthPlaceDateMatch(birthPlace: BelfiorePlace | string, birthDate: MultiFormatDate): boolean {\n        return this.birthDatePlaceMatch(birthDate, birthPlace);\n    }\n    public static birthPlaceDateMismatch(birthPlace: BelfiorePlace | string, birthDate: MultiFormatDate): boolean {\n        return this.birthDatePlaceMismatch(birthDate, birthPlace);\n    }\n}\n"],"names":["generatorWrapper","generator","Symbol","iterator","BelfioreConnector","[object Object]","activeDate","codeMatcher","data","licenses","province","sources","Error","this","Proxy","constructor","resource","paramName","receiver","BELFIORE_CODE_MATCHER","test","base32name","belfioreToInt","toString","padStart","sourceData","index","binaryfindIndex","belfioreCode","locationByIndex","includes","RegExp","Reflect","get","sourceString","targetText","start","end","length","rangedStart","Math","max","rangedEnd","min","currentLength","targetIndex","floor","targetValue","substr","ceil","code","upperCaseCode","toUpperCase","charCodeAt","parseInt","charIndex","String","fromCharCode","base32daysFrom1861","italyBirthDatePastDays","moment","ITALY_KINGDOM_BIRTHDATE","add","list","startIndex","endIndex","indexOf","counter","substring","scanData","provinces","COUNTRY_CODE_MATCHER","parseProvinces","name","startingNameMatcher","next","value","date","config","undefined","cities","CITY_CODE_MATCHER","countries","dataSource","matcher","entryIndex","targetName","dsLength","scanDataGenerator","nameMatcher","dataSourceScan","scanDataSourceIndex","dss","done","parsedPlace","resourceData","belfioreIndex","belFioreInt","belfioreFromInt","provinceOrCountry","dateIndex","creationDate","decodeDate","startOf","expirationDate","endOf","isBefore","isAfter","nameByIndex","licenseIndex","location","toDate","Object","iso3166","provinceList","Set","has","trim","Array","from","Belfiore","url","license","licenseUrl","termsAndConditions","authors","YEAR","MONTH","MONTH_DAY","HOURS","TIMEZONE","TIME","ISO8601_SHORT_DATE","ISO8601_DATE_TIME","DateUtils","Date","isArray","some","isNaN","parsedDate","year","month","day","UTC","isValid","err","parseDate","CONSONANT_LIST","VOWEL_LIST","CF_NAME_MATCHER","CF_SURNAME_MATCHER","CF_FULL_NAME_MATCHER","LEAP_YEAR_MATCHER","DAY_29_MATCHER","DAY_MATCHER","MONTH_DAY_MATCHER","FULL_DATE_MATCHER","MALE_FULL_DATE_MATCHER","FEMALE_FULL_DATE_MATCHER","CODICE_FISCALE","PARTIAL_CF_NAME_MATCHER","PARTIAL_CF_FULL_NAME","PARTIAL_FULL_DATE","PARTIAL_CF","CRC","BirthMonth","CheckDigitizer","codiceFiscale","partialCF","partialCfValue","charValue","evaluateChar","CRC_MOD","CHAR_OFFSET","evaluateCharGenerator","char","GenderWeight","Omocodes","Gender","genderDay","plainDay","F","MAX_MONTH_DAY","toArray","find","gender","diacriticRemover","DiacriticRemover","Parser","deomocodedCf","partialCfDeomocode","appyCaseToChar","checkDigit","omocodeId","cfDeomocode","omocodedCf","split","i","o","OMOCODE_BITMAP","crc","partialCf","slice","join","cfOmocodeBitmap","filter","map","lastNameCf","cons","match","vow","matchingLength","JOLLY_CHAR","cfToLastName","cfGenderPart","genderInt","getGender","cfBirthYearPart","birthYear","current2DigitsYear","format","century","subtract","cfBirthMonthPart","birthMonth","cfBirthDayPart","birthDay","getDay","cfToBirthDay","cfToBirthMonth","cfToBirthYear","ymdToDate","cfBirthPlacePart","birthPlace","birthDate","cfToBirthDate","validityCheck","isSameOrAfter","isSameOrBefore","fiscalCode","place","cfToBirthPlace","personalInfo","firstName","cfToFirstName","lastName","cfToGender","cfOmocodeId","replace","charExtractor","padEnd","consonants","lastNameToCf","parsedYear","genderValue","param","scopedBelfioreConnector","verifiedBirthPlace","findByName","yearToCf","getFullYear","monthToCf","getMonth","dayGenderToCf","getDate","dateOrName","nameOrProvince","provinceId","placeFinder","byProvince","active","foundPlace","parsePlace","dtParams","yearMonthDayToDate","firstNameToCf","dateGenderToCf","placeToCf","cf","cfPartGenerator","cfValue","cfOmocode","offset","checkBitmap","text","CHAR_LIST","charMatcher","partialCodiceFiscale","position","charOmocode","targetChar","counterCaseChar","isUpperCase","isLowerCase","toLowerCase","INVALID_SURNAME","INVALID_NAME","INVALID_GENDER","INVALID_YEAR","INVALID_DATE","CfuError","errorCode","super","entries","ErrorMessages","errId","Pattern","isolatedInsensitiveTailor","deomocode","parsedDayM","parsedDayF","cfDay","parsedDayGender","parsedDateGender","parseDeomocode","g","parsedGender","birthDateOrName","placeName","parsedCf","encodeCf","cfLastName","cfFirstName","cfDateGender","cfPlace","validator","cfMatcher","LETTER_SET","matcherBy","diacriticizer","matchingChars","insensitiveMatcher","diacriticsVowelMatcher","midDiacriticVowelMatcher","endingDiacritcVowelMatcher","divider","ANY_LETTER","SEPARATOR_SET","diacriticsVowelList","diacriticsConsonantList","chars","DATE_MATCHER.ISO8601_DATE_TIME","dateIso8601","toJSON","diff","DATE_MATCHER.TIME","DATE_MATCHER.TIMEZONE","c","omocode","n","CFMismatchValidator","hasLastName","hasFirstName","hasBirthYear","hasBirthDate","hasGender","hasBirthPlace","hasCRC","matchPersonalInfo","matchLastName","matchFirstName","parsedCfDate","isSame","matchBirthDate","matchGender","parsedBirthPlace","matchBirthPlace","valid","invalid","isLastNameValid","isFirstNameValid","isBirthDateValid","isGenderValid","isBirthPlaceValid","birthDatePlaceMatch","birthDatePlaceMismatch"],"mappings":"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"}