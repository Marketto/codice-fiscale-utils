{"version":3,"file":"codice-fiscale-utils.cjs.min.js","sources":["../src/birthMonth.enum.js","../src/belfiore.js","../src/validator.const.js","../src/checkDigitizer.js","../src/dateValidator.const.js","../src/gender.enum.js","../src/omocode.enum.js","../src/parser.js","../src/error.js","../src/validator.js"],"sourcesContent":["const MONTHS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'H',\n    'L',\n    'M',\n    'P',\n    'R',\n    'S',\n    'T'\n];\n/**\n * @namespace BirthMonth\n * @property {number} A 0\n * @property {number} B 1\n * @property {number} C 2\n * @property {number} D 3\n * @property {number} E 4\n * @property {number} H 5\n * @property {number} L 6\n * @property {number} M 7\n * @property {number} P 8\n * @property {number} R 9\n * @property {number} S 10\n * @property {number} T 11\n */\nexport default Object.freeze(new Proxy({ MONTHS }, {\n    get(receiver, name) {\n        if (typeof name  === 'string'){\n            const monthCode = name.toUpperCase();\n            if(receiver.MONTHS.includes(monthCode)) {\n                return receiver.MONTHS.indexOf(monthCode);\n            }\n        }\n        return this[name] || receiver.MONTHS[name] || receiver[name];\n    }\n}));","import CITIES_COUNTRIES from './asset/cities-countries.json';\nimport moment from 'moment';\n\n/**\n * Handler for cities and countries Dataset\n * \n * @namespace Belfiore\n */\nclass BelfioreConnector {\n    /**\n     * \n     * @param {Object} param Static json\n     * @param {Array<Array<Object>>} param.data Resource data\n     * @param {Array<Array<Object>>} param.licenses License array\n     * @constructor\n     * @private\n     */\n    constructor({ data, licenses, activeDate, codeMatcher, province }) {\n        if (codeMatcher && province) {\n            throw new Error('Both codeMatcher and province were provided to Bolfiore, only one is allowed');\n        }\n        const hiddenValueConf = value => ({\n            value,\n            enumerable: false,\n            configurable: false,\n            writable: false\n        });\n\n        Object.defineProperties(this, {\n            _data: hiddenValueConf(data),\n            _licenses: hiddenValueConf(licenses),\n            _activeDate: hiddenValueConf(activeDate),\n            _codeMatcher: hiddenValueConf(codeMatcher),\n            _province: hiddenValueConf(province)\n        });\n        return new Proxy(this, this.constructor);\n    }\n\n    /**\n     * @returns {Array<Object>} List of places\n     * @public\n     */\n    toArray() {\n        return this._data\n            .map(resource => Array.from(new Array(resource.belfioreCode.length / 3), (e, i) => this.constructor.locationByIndex(resource, i, {\n                activeDate: this._activeDate,\n                codeMatcher: this._codeMatcher,\n                province: this._province,\n                licenses: this._licenses\n            })))\n            .reduce((a, b) => a.concat(b))\n            .filter(e => !!e);\n    }\n\n    /**\n     * Search places matching given name\n     * @param {string} name Place name\n     * @returns {Array<Object>} List of places\n     * @public\n     */\n    searchByName(name) {\n        if (!name || typeof name !== 'string') {\n            return null;\n        }\n        let output = [];\n        for (let g = 0; g < this._data.length; g++) {\n            const resourceData = this._data[g];\n            const indexer = this.constructor.indexByName(resourceData.name, name);\n            for (let index of indexer) {\n                if (index >= 0) {\n                    const roundItem = this.constructor.locationByIndex(resourceData, index, {\n                        activeDate: this._activeDate,\n                        codeMatcher: this._codeMatcher,\n                        province: this._province,\n                        licenses: this._licenses\n                    });\n                    if (roundItem) {\n                        output.push(roundItem);\n                    }\n                }\n            }\n        }\n        return output;\n    }\n\n    /**\n     * Find place matching given name, retuns place object if provided name match only 1 result\n     * @param {string} name Place name\n     * @returns {Object|null}\n     * @public\n     */\n    findByName(name) {\n        if (!name || typeof name !== 'string') {\n            return null;\n        }\n        const matcher = new RegExp(`^${name}$`, 'i');\n        for (let g = 0; g < this._data.length; g++) {\n            const resourceData = this._data[g];\n            const indexer = this.constructor.indexByName(resourceData.name, matcher);\n            for (let index of indexer) {\n                if (index >= 0) {\n                    const roundItem = this.constructor.locationByIndex(resourceData, index, {\n                        activeDate: this._activeDate,\n                        codeMatcher: this._codeMatcher,\n                        province: this._province,\n                        licenses: this._licenses\n                    });\n                    if (roundItem) {\n                        return roundItem;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Returns a Proxied version of Belfiore which filters results by given date\n     * @param {string|Date|Moment|Array<number>} [date = moment()] Target date to filter places active only for the given date\n     * @returns {BelfioreConnector} Belfiore instance filtered by active date\n     * @public\n     */\n    active(date = moment()) {\n        const { _data, _licenses, _codeMatcher, _province } = this;\n        return new BelfioreConnector({\n            data: _data,\n            licenses: _licenses,\n            activeDate: moment(date),\n            province: _province,\n            codeMatcher: _codeMatcher\n        });\n    }\n\n    /**\n     * Returns a Belfiore instance filtered by the given province\n     * @param {string} code Province Code (2 A-Z char)\n     * @returns {BelfioreConnector} Belfiore instance filtered by province code\n     * @public\n     */\n    byProvince(code) {\n        if (!(typeof code === 'string' && (/^[A-Z]{2}$/u).test(code))) {\n            return;\n        }\n        const { _data, _licenses, _activeDate } = this;\n        return new BelfioreConnector({\n            data: _data,\n            licenses: _licenses,\n            activeDate: _activeDate,\n            province: code\n        });\n    }\n\n    /**\n     * Returns a Proxied version of Belfiore which filters results by place type\n     * @readonly\n     * @returns {Belfiore} Belfiore instance filtered by cities\n     * @public\n     */\n    get cities() {\n        const { _data, _licenses, _activeDate } = this;\n        return new BelfioreConnector({\n            data: _data,\n            licenses: _licenses,\n            activeDate: _activeDate,\n            codeMatcher: /^[A-Y]/u\n        });\n    }\n\n    /**\n     * Returns a Proxied version of Belfiore which filters results by place type\n     * @readonly\n     * @returns {BelfioreConnector} Belfiore instance filtered by countries\n     * @public\n     */\n    get countries() {\n        const { _data, _licenses, _activeDate } = this;\n        return new BelfioreConnector({\n            data: _data,\n            licenses: _licenses,\n            activeDate: _activeDate,\n            codeMatcher: /^Z/u\n        });\n    }\n\n    /**\n     * Get Proxy\n     * @param {Object} resource target resource\n     * @param {string|number|Symbol} paramName property name to proxy\n     * @returns {*} Proxied property\n     * @private\n     */\n    static get (resource, paramName) {\n        if (typeof paramName  === 'string' && (/^[A-Z]\\d{3}$/iu).test(paramName)){\n            const base32name = this.belfioreToInt(paramName).toString(32).padStart(3, '0');\n            for (let g = 0; g < resource._data.length; g++) {\n                const resourceData = resource._data[g];\n                const index = this.binaryfindIndex(resourceData.belfioreCode, base32name);\n                if (index >= 0) {\n                    return this.locationByIndex(resourceData, index, {\n                        activeDate: resource._activeDate,\n                        codeMatcher: resource._codeMatcher,\n                        province: resource._province,\n                        licenses: resource._licenses\n                    });\n                }\n            }\n        }\n\n        if (\n            \n            (resource._codeMatcher || resource._province) &&\n                ['cities', 'countries'].includes(paramName)\n             ||\n            \n                paramName === 'byProvince' &&\n                (\n                    resource._codeMatcher instanceof RegExp && resource._codeMatcher.test('Z000') \n                    || resource._province\n                )\n            \n        ) {\n            return;\n        }\n\n        return resource[paramName];\n    }\n\n    /**\n     * Binary find Index (works ONLY in sorted arrays)\n     * @param {string} text Unique string of values of the same length (step)\n     * @param {string} value Exact text to find\n     * @param {number} start text start index for seeking the value\n     * @param {number} end text end index for seeking the value\n     * @param {number} step length of a single value to seek properly the text string\n     * @returns {number} Found value Index or -1 if not found\n     * @private\n     */\n    static binaryfindIndex(text, value, start, end) {\n        if (typeof text !== 'string' || !text.length) {\n            return -1;\n        }\n        const rangedStart = !start || start < 0 ? 0 : start;\n        const rangedEnd = !end || end >= text.length ? text.length - 1 : end;\n        const currentLength = rangedEnd - rangedStart + 1;\n        if (rangedStart > rangedEnd || currentLength % value.length) {\n            return -1;\n        }\n        const targetIndex = rangedStart + Math.floor(currentLength/(2*value.length))*value.length;\n        const targetValure = text.substr(targetIndex, value.length);\n        if (targetValure === value) {\n            return Math.ceil((targetIndex + 1) / value.length) -1;\n        }\n        const goAhead = value > targetValure;\n        return this.binaryfindIndex(text, value, goAhead ? targetIndex + value.length : rangedStart, goAhead ? rangedEnd : targetIndex - 1);\n    }\n\n    /**\n     * Converts belfiore code into an int\n     * @param {string} code Belfiore Code\n     * @returns {number} Int version of belfiore code\n     * @private\n     */\n    static belfioreToInt(code) {\n        const upperCaseCode = code.toUpperCase();\n        return (upperCaseCode.charCodeAt()-65)*10**3 + parseInt(upperCaseCode.substr(1));\n    }\n\n    /**\n     * Converts int to belfiore code\n     * @param {number} code Belfiore int code\n     * @returns {string} Standard belfiore code\n     * @private\n     */\n    static belfioreFromInt(code) {\n        return `${String.fromCharCode(Math.floor(code / 10**3) + 65)}${code.toString().substr(-3).padStart(3, '0')}`;\n    }\n\n    /**\n     * Converst Base 32 number of days since 01/01/1861 to Moment instance\n     * @param {string} base32daysFrom1861 Base 32 number of days from 1861-01-01\n     * @returns {Moment} Moment instance date\n     * @private\n     */\n    static decodeDate(base32daysFrom1861) {\n        return moment('1861-01-01').add(parseInt(base32daysFrom1861, 32) ,'days');\n    }\n\n    /**\n     * Retrieve string at index posizion\n     * @param {string} list concatenation of names\n     * @param {number} index target name index\n     * @returns {string} index-th string\n     * @private\n     */\n    static nameByIndex(list, index) {\n        if (typeof list !== 'string') {\n            throw new Error('[BelfioreConnector.nameByIndex] Provided list is not a string');\n        }\n        if (!list.length) {\n            throw new Error('[BelfioreConnector.nameByIndex] Provided list empty');\n        }\n        let startIndex = 0,\n            endIndex = list.indexOf('|', startIndex + 1),\n            counter = index;\n\n        while (counter > 0 && endIndex > startIndex) {\n            counter--;\n            startIndex = endIndex + 1;\n            endIndex = list.indexOf('|', startIndex + 1);\n        }\n        \n        if (index < 0 || counter > 0) {\n            throw new Error(`[BelfioreConnector.nameByIndex] Provided index ${index} is out range`);\n        }\n\n        if (!counter && endIndex < 0) {\n            return list.substring(startIndex);\n        }\n\n        return list.substring(startIndex, endIndex);\n    }\n\n    /**\n     * Retrieve string at index posizion\n     * @generator\n     * @param {string} list concatenation of names\n     * @param {string|RegExp} matcher target name index\n     * @yields {number} index\n     * @returns {number} -1 when Done\n     * @private\n     */\n    static* indexByName(list, matcher) {\n        if (typeof list !== 'string') {\n            throw new Error('[BelfioreConnector.indexByName] Provided list is not a string');\n        }\n        if (!list.length) {\n            throw new Error('[BelfioreConnector.indexByName] Provided list empty');\n        }\n        const regExpMatcher = typeof matcher === 'string' ? new RegExp(matcher, 'i') : matcher;\n        \n        if (!(regExpMatcher instanceof RegExp)) {\n            throw new Error('Provided matcher must be of type string or RegExp');\n        }\n\n        const seekEntryEndIndex = index => list.indexOf('|', index +1) + 1 || list.length;\n        \n        for(let startIndex = 0, entryIndex = 0; startIndex < list.length; entryIndex++) {\n            const endIndex = seekEntryEndIndex(startIndex);\n            const targetName = list.substring(startIndex, endIndex -1);\n            if (regExpMatcher.test(targetName)) {\n                yield entryIndex;\n            }\n            // Moving to next entry to chgeck\n            startIndex = endIndex;\n        }\n        return -1;\n    }\n\n    /**\n     * Retrieve location for the given index in the given subset\n     * @param {string} resourceData concatenation of names\n     * @param {number} index target name index\n     * @returns {Object} location\n     * @private\n     */\n    static locationByIndex(resourceData, index, { activeDate, codeMatcher, province, licenses } = {}) {\n        const belfioreIndex = index * 3;\n        if (resourceData.belfioreCode.length - belfioreIndex < 3) {\n            return null;\n        }\n        const belFioreInt = parseInt(resourceData.belfioreCode.substr(belfioreIndex, 3), '32');\n        const belfioreCode = this.belfioreFromInt(belFioreInt);\n        if (codeMatcher && !codeMatcher.test(belfioreCode)) {\n            return null;\n        }\n        const code = resourceData.provinceOrCountry.substr(index * 2, 2);\n        if (province && province !== code) {\n            return null;\n        }\n\n        const dateIndex = index * 4;\n        const creationDate = this.decodeDate((resourceData.creationDate || '').substr(dateIndex, 4) || '0').startOf('day');\n        const expirationDate = this.decodeDate((resourceData.expirationDate || '').substr(dateIndex, 4) || '2qn13').endOf('day');\n        if (\n            activeDate && \n            (\n                resourceData.creationDate && activeDate.isBefore(creationDate, 'day') ||\n                resourceData.expirationDate &&  activeDate.isAfter(expirationDate, 'day')\n            )\n        ) {\n            return null;\n        }\n        const name = this.nameByIndex(resourceData.name, index);\n        const isCountry = belfioreCode[0] === 'Z';\n\n        const dataSource = licenses[parseInt(parseInt(resourceData.dataSource, 32).toString(2).padStart(resourceData.belfioreCode.length * 2/3, 0).substr(index * 2, 2), 2)];\n\n        return Object.assign({\n            belfioreCode,\n            name,\n            creationDate: creationDate.toDate(),\n            expirationDate: expirationDate.toDate(),\n            dataSource\n        }, isCountry ? {\n            iso3166: code\n        } : {\n            province: code\n        });\n    }\n}\n\nexport const Belfiore = new BelfioreConnector(CITIES_COUNTRIES);\nexport {BelfioreConnector};","const CONSONANT_LIST = 'B-DF-HJ-NP-TV-Z';\nconst VOWEL_LIST = 'AEIOU';\nconst OMOCODE_NUMBER_LIST = '\\\\dLMNP-V';\nconst OMOCODE_NON_ZERO_NUMBER_LIST = '1-9MNP-V';\nconst OMOCODE_ZERO_LIST = '0L';\nconst MONTH_LIST = 'A-EHLMPR-T';\nconst MONTH_30DAYS_LIST = 'DHPS';\nconst MONTH_31DAYS_LIST = 'ACELMRT';\nconst CITY_CODE_LIST = 'A-M';\nconst COUNTRY_CODE_LIST = 'Z';\n\nconst CF_NAME_MATCHER = `[A-Z][${VOWEL_LIST}][${VOWEL_LIST}X]|[${CONSONANT_LIST}]{2}[A-Z]`;\nconst CF_SURNAME_MATCHER = CF_NAME_MATCHER;\nconst CF_FULL_NAME_MATCHER = `(?:${CF_NAME_MATCHER}){2}`;\n\nconst YEAR_MATCHER = `[${OMOCODE_NUMBER_LIST}]{2}`;\nconst LEAP_YEAR_MATCHER = '[02468LNQSU][048LQU]|[13579MPRTV][26NS]';\nconst MONTH_MATCHER = `[${MONTH_LIST}]`;\nconst DAY_2X_MATCHER = '[26NS]';\nconst DAY_3X_MATCHER = '[37PT]';\nconst DAY_29_MATCHER = `[${OMOCODE_ZERO_LIST}4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[1256MNRS][${OMOCODE_NUMBER_LIST}]`;\nconst DAY_30_MATCHER = `[${DAY_3X_MATCHER}][${OMOCODE_ZERO_LIST}]`;\nconst DAY_31_MATCHER = `[${DAY_3X_MATCHER}][${OMOCODE_ZERO_LIST}1M]`;\n\nconst DAY_MATCHER = `(?:${DAY_29_MATCHER}|${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}1M])`;\nconst MALE_DAY_MATCHER = `(?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[12MN][${OMOCODE_NUMBER_LIST}]|[3P][${OMOCODE_ZERO_LIST}1M])`;\nconst FEMALE_DAY_MATCHER = `(?:[4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[56RS][${OMOCODE_NUMBER_LIST}]|[7T][${OMOCODE_ZERO_LIST}1M])`;\nconst MONTH_DAY_MATCHER = `${MONTH_MATCHER}(?:${DAY_29_MATCHER})|[${MONTH_30DAYS_LIST}]${DAY_30_MATCHER}|[${MONTH_31DAYS_LIST}]${DAY_31_MATCHER}`;\nconst FULL_DATE_MATCHER = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[${OMOCODE_ZERO_LIST}4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[15MR][${OMOCODE_NUMBER_LIST}]|${DAY_2X_MATCHER}[0-8LMNP-U])|[${MONTH_30DAYS_LIST}]${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}]${DAY_3X_MATCHER}[${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}]${DAY_2X_MATCHER}[9V])|(?:${LEAP_YEAR_MATCHER})B${DAY_2X_MATCHER}[9V]`;\nconst MALE_FULL_DATE_MATCHER = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[1M][${OMOCODE_NUMBER_LIST}]|[2N][0-8LMNP-U])|[${MONTH_30DAYS_LIST}][3P][${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}][3P][${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}][2N][9V])|(?:${LEAP_YEAR_MATCHER})B[2N][9V]`;\nconst FEMALE_FULL_DATE_MATCHER = `${YEAR_MATCHER}(?:${MONTH_MATCHER}(?:[4Q][${OMOCODE_NON_ZERO_NUMBER_LIST}]|[5R][${OMOCODE_NUMBER_LIST}]|[6S][0-8LMNP-U])|[${MONTH_30DAYS_LIST}][7T][${OMOCODE_ZERO_LIST}]|[${MONTH_31DAYS_LIST}][7T][${OMOCODE_ZERO_LIST}1M]|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}][6S][9V])|(?:${LEAP_YEAR_MATCHER})B[6S][9V]`;\n\nconst CITY_CODE_MATCHER = `[${CITY_CODE_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2}|[${OMOCODE_ZERO_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]|[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]))`;\nconst COUNTRY_CODE_MATCHER = `${COUNTRY_CODE_LIST}[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2}`;\nconst BELFIORE_CODE_MATCHER = `(?:[${CITY_CODE_LIST}${COUNTRY_CODE_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]{2})|(?:[${CITY_CODE_LIST}][${OMOCODE_ZERO_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]|[${OMOCODE_ZERO_LIST}][${OMOCODE_NON_ZERO_NUMBER_LIST}]))`;\n\nconst CHECK_DIGIT = '[A-Z]';\n\nconst CODICE_FISCALE = `${CF_FULL_NAME_MATCHER}(?:${FULL_DATE_MATCHER})(?:${BELFIORE_CODE_MATCHER})${CHECK_DIGIT}`;\n\n\nconst PARTIAL_CF_NAME_MATCHER = `[A-Z][${VOWEL_LIST}]?|[${CONSONANT_LIST}]{1,2}`;\nconst PARTIAL_CF_FULL_NAME = `(?:${PARTIAL_CF_NAME_MATCHER})|(?:(?:${CF_NAME_MATCHER})(?:${PARTIAL_CF_NAME_MATCHER})?)`;\nconst PARTIAL_YEAR = `[${OMOCODE_NUMBER_LIST}]`;\nconst PARTIAL_MONTH_DAY = `${MONTH_MATCHER}[${OMOCODE_ZERO_LIST}12456MNQRS]?|[${MONTH_30DAYS_LIST}${MONTH_31DAYS_LIST}]${DAY_3X_MATCHER}`;\nconst PARTIAL_FULL_DATE =`${PARTIAL_YEAR}|(?:${YEAR_MATCHER}(?:${PARTIAL_MONTH_DAY})?)`;\nconst PARTIAL_BELFIORE_CODE_MATCHER = `[${CITY_CODE_LIST}${COUNTRY_CODE_LIST}](?:[${OMOCODE_NON_ZERO_NUMBER_LIST}][${OMOCODE_NUMBER_LIST}]?)?|[${COUNTRY_CODE_LIST}](?:[${OMOCODE_ZERO_LIST}][${OMOCODE_NUMBER_LIST}]?)?`;\n\nconst PARTIAL_CF = `${PARTIAL_CF_FULL_NAME}|(?:${CF_FULL_NAME_MATCHER}(?:(?:${PARTIAL_FULL_DATE})|(?:${FULL_DATE_MATCHER})(?:(?:${PARTIAL_BELFIORE_CODE_MATCHER})|(?:${BELFIORE_CODE_MATCHER})${CHECK_DIGIT}?)?)?)?`;\n\n/**\n * Validator constants\n * @readonly\n * @returns {Object} VALIDATOR\n * \n * @constant {string} VALIDATOR.CONSONANT_LIST List of consonant to be used in a RegExp\n * @constant {string} VALIDATOR.VOWEL_LIST List of vowels to be used in a RegExp\n * @constant {string} VALIDATOR.OMOCODE_NUMBER_LIST List of numbers and their omocode counterparts to be used in a RegExp\n * @constant {string} VALIDATOR.OMOCODE_NON_ZERO_NUMBER_LIST List of numbers but 0 and their omocode counterparts to be used in a RegExp\n * @constant {string} VALIDATOR.OMOCODE_ZERO_LIST List of 0 and its omocode counterpart to be used in a RegExp\n * @constant {string} VALIDATOR.MONTH_LIST\n * @constant {string} VALIDATOR.MONTH_30DAYS_LIST\n * @constant {string} VALIDATOR.MONTH_31DAYS_LIST\n * @constant {string} VALIDATOR.CITY_CODE_LIST\n * @constant {string} VALIDATOR.COUNTRY_CODE_LIST\n * @constant {string} VALIDATOR.CF_NAME_MATCHER\n * @constant {string} VALIDATOR.CF_SURNAME_MATCHER\n * @constant {string} VALIDATOR.CF_FULL_NAME_MATCHER\n * @constant {string} VALIDATOR.YEAR_MATCHER\n * @constant {string} VALIDATOR.LEAP_YEAR_MATCHER\n * @constant {string} VALIDATOR.MONTH_MATCHER\n * @constant {string} VALIDATOR.DAY_29_MATCHER\n * @constant {string} VALIDATOR.DAY_30_MATCHER\n * @constant {string} VALIDATOR.DAY_31_MATCHER\n * @constant {string} VALIDATOR.DAY_MATCHER\n * @constant {string} VALIDATOR.MALE_DAY_MATCHER\n * @constant {string} VALIDATOR.FEMALE_DAY_MATCHER\n * @constant {string} VALIDATOR.MONTH_DAY_MATCHER\n * @constant {string} VALIDATOR.FULL_DATE_MATCHER\n * @constant {string} VALIDATOR.MALE_FULL_DATE_MATCHER\n * @constant {string} VALIDATOR.FEMALE_FULL_DATE_MATCHER\n * @constant {string} VALIDATOR.CITY_CODE_MATCHER\n * @constant {string} VALIDATOR.COUNTRY_CODE_MATCHER\n * @constant {string} VALIDATOR.BELFIORE_CODE_MATCHER\n * @constant {string} VALIDATOR.CHECK_DIGIT\n * @constant {string} VALIDATOR.CODICE_FISCALE\n * @constant {string} VALIDATOR.PARTIAL_CF_NAME_MATCHER\n * @constant {string} VALIDATOR.PARTIAL_CF_FULL_NAME\n * @constant {string} VALIDATOR.PARTIAL_YEAR\n * @constant {string} VALIDATOR.PARTIAL_MONTH_DAY\n * @constant {string} VALIDATOR.PARTIAL_FULL_DATE\n * @constant {string} VALIDATOR.PARTIAL_BELFIORE_CODE_MATCHER\n * @constant {string} VALIDATOR.PARTIAL_CF\n * \n * @namespace VALIDATOR\n */\nexport default Object.freeze({\n    CONSONANT_LIST,\n    VOWEL_LIST,\n    OMOCODE_NUMBER_LIST,\n    OMOCODE_NON_ZERO_NUMBER_LIST,\n    OMOCODE_ZERO_LIST,\n    MONTH_LIST,\n    MONTH_30DAYS_LIST,\n    MONTH_31DAYS_LIST,\n    CITY_CODE_LIST,\n    COUNTRY_CODE_LIST,\n    CF_NAME_MATCHER,\n    CF_SURNAME_MATCHER,\n    CF_FULL_NAME_MATCHER,\n    YEAR_MATCHER,\n    LEAP_YEAR_MATCHER,\n    MONTH_MATCHER,\n    DAY_29_MATCHER,\n    DAY_30_MATCHER,\n    DAY_31_MATCHER,\n    DAY_MATCHER,\n    MALE_DAY_MATCHER,\n    FEMALE_DAY_MATCHER,\n    MONTH_DAY_MATCHER,\n    FULL_DATE_MATCHER,\n    MALE_FULL_DATE_MATCHER,\n    FEMALE_FULL_DATE_MATCHER,\n    CITY_CODE_MATCHER,\n    COUNTRY_CODE_MATCHER,\n    BELFIORE_CODE_MATCHER,\n    CHECK_DIGIT,\n    CODICE_FISCALE,\n    PARTIAL_CF_NAME_MATCHER,\n    PARTIAL_CF_FULL_NAME,\n    PARTIAL_YEAR,\n    PARTIAL_MONTH_DAY,\n    PARTIAL_FULL_DATE,\n    PARTIAL_BELFIORE_CODE_MATCHER,\n    PARTIAL_CF\n});","import VALIDATOR from './validator.const';\n\nconst CONTROL_CODE_IN = {\n    'A': 1,\n    'B': 0,\n    'C': 5,\n    'D': 7,\n    'E': 9,\n    'F': 13,\n    'G': 15,\n    'H': 17,\n    'I': 19,\n    'J': 21,\n    'K': 2,\n    'L': 4,\n    'M': 18,\n    'N': 20,\n    'O': 11,\n    'P': 3,\n    'Q': 6,\n    'R': 8,\n    'S': 12,\n    'T': 14,\n    'U': 16,\n    'V': 10,\n    'W': 22,\n    'X': 25,\n    'Y': 24,\n    'Z': 23\n};\n\n\n/**\n * CodiceFiscal 16th char check digit calculator\n * @class\n * @public\n *//**\n *\n * @namespace CheckDigitizer\n */\nclass CheckDigitizer {\n\n    /**\n     * Partial FiscalCode Evaluator\n     * @param {string} [partialCF=''] Partial Fiscal Code to evaluate\n     * @generator\n     * @yields {number} character value odd/even\n     * @returns {number} 0\n     * @public\n     */\n    static* evaluateChar(partialCF = '') {\n        for(let index in partialCF.split('')){\n            const char = partialCF[index].toUpperCase();\n            const isNumber = (/^\\d/u).test(char);\n            //Odd/Even are shifted/swapped (array starts from 0, 'Agenzia delle Entrate' documentation counts the string from 1)\n            if (index%2) {\n                //Odd positions\n                yield char.charCodeAt(0) - (isNumber ? 48 : 65);\n            } else {\n                //Even positions\n                yield CONTROL_CODE_IN[isNumber ? String.fromCharCode(parseInt(char) + 65) : char];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Evaluate given partial CF to produce last check digit character\n     * @param {string} codiceFiscale Partial or complete Fiscal Code to evaluate to produce last character\n     * @returns {char|null} 16th CF char\n     * @public\n     */\n    static checkDigit(codiceFiscale) {\n        if (typeof codiceFiscale === 'string' && (new RegExp(VALIDATOR.PARTIAL_CF)).test(codiceFiscale)) {\n            const partialCF = codiceFiscale.substr(0, 15);\n            let partialCfValue = 0;\n            for (let charValue of this.evaluateChar(partialCF)) partialCfValue += charValue;\n            return String.fromCharCode(partialCfValue%26 + 65);\n        }\n        return null;\n    }\n}\n\nexport default CheckDigitizer;","const YEAR = '[12][0-9]{3}';\nconst MONTH = '0[1-9]|1[0-2]';\nconst DAY = '0[1-9]|[12][0-9]|3[01]';\nconst LEAP_MONTH = '02';\nconst DAYS_30_MONTHS = '0[469]|11';\nconst DAYS_31_MONTHS = '0[13578]|1[02]';\nconst MONTH_DAY = `(?:${MONTH})-(?:0[1-9]|[12]\\\\d)|(?:${DAYS_30_MONTHS})-30|(?:${DAYS_31_MONTHS})-3[01]`;\nconst HOURS = '[01]\\\\d|2[0-3]';\nconst MINUTES = '[0-5]\\\\d';\nconst SECONDS = MINUTES;\nconst MILLISECONDS = '\\\\d{3}';\nconst TIMEZONE = `Z|[-+](?:${HOURS})(?::?${MINUTES})?`;\nconst TIME = `(?:${HOURS})(?::${MINUTES}(?::${SECONDS}(\\\\.${MILLISECONDS})?)?(?:${TIMEZONE})?)?`;\nconst ISO8601_SHORT_DATE = `${YEAR}-(?:${MONTH_DAY})(?:T${TIME})?`;\nconst ISO8601_DATE_TIME = `${YEAR}(?:-(?:(?:${MONTH})|(?:${MONTH_DAY})(?:T${TIME})?))?`;\n\n/**\n * Date Validator propertys\n * @namespace DATE_VALIDATOR\n * @property {Object} DATE_VALIDATOR\n * @property {string} DATE_VALIDATOR.YEAR String matcher for ISO8601 4 digits year (limited to 1000-2999)\n * @property {string} DATE_VALIDATOR.MONTH String matcher for ISO8601 2 digits month (01-12)\n * @property {string} DATE_VALIDATOR.DAY String matcher for ISO8601 2 digits day (01-31)\n * @property {string} DATE_VALIDATOR.LEAP_MONTH String matcher for ISO8601 2 digits leap month\n * @property {string} DATE_VALIDATOR.DAYS_30_MONTHS String matcher for ISO8601 2 digits 30 days month\n * @property {string} DATE_VALIDATOR.DAYS_31_MONTHS String matcher for ISO8601 2 digits 31 days month\n * @property {string} DATE_VALIDATOR.MONTH_DAY String matcher for ISO8601 2 digits month + 2 digit day tailored for 28/29, 30 and 31 days months (##-##)\n * @property {string} DATE_VALIDATOR.ISO8601_SHORT_DATE String matcher for ISO8601 date: 4 digits year, 2 digits month and 2 digit day tailored for 28/29, 30 and 31 days months (####-##-##)\n * @property {string} DATE_VALIDATOR.HOURS String matcher for ISO8601 2 digits hours (00-23)\n * @property {string} DATE_VALIDATOR.MINUTES String matcher for ISO8601 2 digits minutes (00-59)\n * @property {string} DATE_VALIDATOR.SECONDS String matcher for ISO8601 2 digits seconds (00-59)\n * @property {string} DATE_VALIDATOR.MILLISECONDS String matcher for ISO8601 3 digits milliseconds (000-999)\n * @property {string} DATE_VALIDATOR.TIMEZONE String matcher for ISO8601 timezone (Z or ±## or ±##:## or ±####)\n * @property {string} DATE_VALIDATOR.TIME String matcher for ISO8601 for time (T## , T##:## , T##:##:## , T##:##:##.###)\n * @property {string} DATE_VALIDATOR.ISO8601_DATE_TIME String matcher for ISO8601 date/time format\n*/\nexport default Object.freeze({\n    YEAR,\n    MONTH,\n    DAY,\n    LEAP_MONTH,\n    DAYS_30_MONTHS,\n    DAYS_31_MONTHS,\n    MONTH_DAY,\n    ISO8601_SHORT_DATE,\n    HOURS,\n    MINUTES,\n    SECONDS,\n    MILLISECONDS,\n    TIMEZONE,\n    TIME,\n    ISO8601_DATE_TIME\n});","const GENDERS = {\n    M: 0,\n    F: 40\n};\n\n/**\n * @namespace Gender\n * @property {number} M 0\n * @property {number} F 40\n * @property {function({number})} parseNumberToGender\n */\nexport default Object.freeze(new Proxy(Object.assign({}, GENDERS), {\n    get(receiver, name) {\n        if (typeof name  === 'string') {\n            const index = parseInt(name);\n            const values = this.toArray.apply(receiver);\n            if (!isNaN(index) && (index >= 0 && index <= 31 || index >= 40 && index <= 71)) {\n                return values[Math.floor(index/40)];\n            }\n            if (typeof this[name] === 'function') {\n                return (...args) => this[name].apply(receiver, args);\n            }\n        }\n        return this[name] || receiver[name];\n    },\n\n    /**\n     * Return an array of Gender constants\n     *\n     * @returns {Array<string>} List of Gender keys\n     * @memberof Gender\n     */\n    toArray(){\n        return Object.keys(this);\n    }\n}));","const OMOCODE = [\n    'L',\n    'M',\n    'N',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V'\n];\n\n/**\n * @namespace Omocode\n * @returns {Proxy}\n * @property {number} L\n * @property {number} M\n * @property {number} N\n * @property {number} P\n * @property {number} Q\n * @property {number} R\n * @property {number} S\n * @property {number} T\n * @property {number} U\n * @property {number} V\n */\nexport default Object.freeze(new Proxy({ OMOCODE }, {\n    get(receiver, name) {\n        if(typeof name  === 'string'){\n            const omocodeChar = name.toUpperCase();\n            if (receiver.OMOCODE.includes(omocodeChar)) {\n                return receiver.OMOCODE.indexOf(omocodeChar);\n            }\n        }\n        return this[name] || receiver.OMOCODE[name] || receiver[name];\n    }\n}));","import {Belfiore} from './belfiore';\nimport BirthMonth from './birthMonth.enum';\nimport CheckDigitizer from './checkDigitizer';\nimport DATE_VALIDATOR from './dateValidator.const';\nimport DiacriticRemover from '@marketto/diacritic-remover';\nimport Gender from './gender.enum';\nimport moment from 'moment';\nimport Omocode from './omocode.enum';\nimport VALIDATOR from './validator.const';\n\n/**\n * @namespace Parser\n */\nclass Parser {\n\n    /**\n     * Default omocode bitmap\n     * @readonly\n     * @returns {number} Omocode bitmap number\n     * @public\n     */\n    static get OMOCODE_BITMAP(){\n        return 0b0111011011000000;\n    }\n\n    /**\n     * Parse surname information\n     * \n     * @param {string} codiceFiscale Partial or complete Omocode/Regular CF to parse\n     * @returns {string|null} Regular CF w/o omocodes chars\n     * @public\n     */\n    static cfDeomocode(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 7) {\n            return codiceFiscale;\n        }\n\n        const checkBitmap = offset => !!(2**offset & this.OMOCODE_BITMAP);\n\n        return codiceFiscale.replace(/[\\dA-Z]/giu, (match, offset) => (/^[A-Z]$/giu).test(match) && checkBitmap(offset) ? Omocode[match] : match);\n    }\n\n    /**\n     * Parse surname information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {string|null} Partial/possible surname\n     * @public\n     */\n    static cfToSurname(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 3 || !(/^[A-Z]{3}/iu).test(codiceFiscale)) {\n            return null;\n        }\n\n        const surnameCf = codiceFiscale.substr(0,3);\n\n        const [cons = ''] = surnameCf.match(new RegExp(`^[${VALIDATOR.CONSONANT_LIST}]{1,3}`, 'ig')) || [];\n        const [vow = ''] = surnameCf.match(new RegExp(`[${VALIDATOR.VOWEL_LIST}]{1,3}`, 'ig')) || [];\n\n        const matchingLength = cons.length + vow.length;\n\n        if (matchingLength < 2 || matchingLength < 3 && surnameCf[2].toUpperCase() !== 'X') {\n            return null;\n        }\n\n        switch(cons.length) {\n        case 3:\n            return (cons + vow).split('').join('*') + '*';\n        case 2:\n            return `${cons[0]}${vow[0]}*${cons[1]}*`;\n        case 1:\n            return `${cons[0]}${vow}*`;\n        default:\n            return `${vow}${vow.length === 3 ? '*': ''}`;\n        }\n    }\n\n    /**\n     * Parse name information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {string|null} Partial/possible name\n     * @public\n     */\n    static cfToName(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 3 || !(/^[A-Z]{6}/iu).test(codiceFiscale)) {\n            return null;\n        }\n        return this.cfToSurname(codiceFiscale.substr(3, 3));\n    }\n\n    /**\n     * Parse gender information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {'M'|'F'|null} Male or female\n     * @public\n     */\n    static cfToGender(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 11) {\n            return null;\n        }\n        const birthDay = parseInt(codiceFiscale.substr(9,2));\n        if (birthDay === 0 || birthDay === 40) {\n            return null;\n        }\n        return Gender[birthDay];\n    }\n\n    /**\n     * Parse birth year information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {number|null} Birth Year (4 digits)\n     * @public\n     */\n    static cfToBirthYear(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 8) {\n            return null;\n        }\n        const birthYear = parseInt(codiceFiscale.substr(6,2));\n\n        if (isNaN(birthYear)) {\n            return null;\n        }\n\n        const current2DigitsYear = parseInt(moment().format('YY'));\n\n        const century = (birthYear > current2DigitsYear) * 100;\n        return moment().subtract(current2DigitsYear - birthYear + century, 'years').year();\n    }\n\n    /**\n     * Parse birth month information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {number|null} Birth Month (0...11 - Date notation)\n     * @public\n     */\n    static cfToBirthMonth(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 9) {\n            return null;\n        }\n\n        const birthMonth = BirthMonth[codiceFiscale.substr(8,1)];\n        if (!birthMonth && birthMonth !== 0) {\n            return null;\n        }\n        return birthMonth;\n    }\n\n    /**\n     * Parse birth day information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {number|null} Birth day (1..31)\n     * @public\n     */\n    static cfToBirthDay(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 11) {\n            return null;\n        }\n        let birthDay = parseInt(codiceFiscale.substr(9,2));\n\n        if (isNaN(birthDay)) {\n            return null;\n        }\n\n        birthDay -= birthDay >= 40 ? 40 : 0;\n\n        if (birthDay < 1 || birthDay > 31) {\n            return null;\n        }\n        return birthDay;\n    }\n\n    /**\n     * Parse birth date information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {Date|null} Birth Date\n     * @public\n     */\n    static cfToBirthDate(codiceFiscale) {\n        const birthDay = this.cfToBirthDay(codiceFiscale);\n        if (!birthDay) {\n            return null;\n        }\n\n        const birthMonth = this.cfToBirthMonth(codiceFiscale);\n        if (!birthMonth && birthMonth !== 0) {\n            return null;\n        }\n\n        const birthYear = this.cfToBirthYear(codiceFiscale);\n        if (!birthYear) {\n            return null;\n        }\n\n        const dt = moment(Date.UTC(birthYear, birthMonth, birthDay));\n        if (!dt.isValid()) {\n            return null;\n        }\n        return dt.toDate();\n    }\n\n    /**\n     * Parse birth place information\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {Object} {name, belfioreCode} Birth place\n     * @public\n     */\n    static cfToBirthPlace(codiceFiscale) {\n        if (typeof codiceFiscale !== 'string' || codiceFiscale.length < 15) {\n            return null;\n        }\n\n\n        const birthPlace = Belfiore[codiceFiscale.substr(11,4).toUpperCase()];\n        if (!birthPlace) {\n            return null;\n        }\n\n        const {creationDate, expirationDate} = birthPlace;\n        if (creationDate || expirationDate) {\n            const birthDate = this.cfToBirthDate(codiceFiscale);\n            if (!birthDate) {\n                return null;\n            }\n            let validityCheck = true;\n            if (creationDate) {\n                validityCheck = moment(birthDate).isSameOrAfter(moment(creationDate));\n            }\n            if(validityCheck && expirationDate) {\n                validityCheck = moment(birthDate).isSameOrBefore(moment(expirationDate));\n            }\n            if (!validityCheck) {\n                return null;\n            }\n        }\n        return birthPlace;\n    }\n\n    /**\n     * @param {string} fiscalCode 16 character Codice Fiscale to decode\n     * @returns {Object} {surname, name, year, month, day, gender, place} Decoded CF Info\n     */\n    static cfDecode(fiscalCode) {\n        const year = this.cfToBirthYear(fiscalCode),\n            month = this.cfToBirthMonth(fiscalCode),\n            day = this.cfToBirthDay(fiscalCode);\n        return {\n            surname: this.cfToSurname(fiscalCode),\n            name: this.cfToName(fiscalCode),\n\n            year,\n            month,\n            day,\n            date: new Date(Date.UTC(year, month, day)),\n\n            gender: this.cfToGender(fiscalCode),\n            place: (this.cfToBirthPlace(fiscalCode) || {}).name\n        };\n    }\n\n    /**\n     * Parse surname to cf part\n     * \n     * @param {string} surname Partial or complete CF to parse\n     * @returns {string|null} partial cf\n     * @public\n     */\n    static surnameToCf(surname) {\n        if ((surname || '').trim().length < 2) {\n            return null;\n        }\n        const diacriticRemover = new DiacriticRemover();\n        const noDiacriticsSurname = diacriticRemover.replace(surname).trim();\n        if (!(/^[A-Z ']+$/iu).test(noDiacriticsSurname)) {\n            return null;\n        }\n        const consonants = (noDiacriticsSurname.match(new RegExp(`[${VALIDATOR.CONSONANT_LIST}]+`, 'ig')) || []).join('');\n        const vowels = (noDiacriticsSurname.match(new RegExp(`[${VALIDATOR.VOWEL_LIST}]+`, 'ig')) || []).join('');\n\n        const partialCf = (consonants + vowels).padEnd(3, 'X').substr(0, 3);\n\n        if (partialCf.length < 3) {\n            return null;\n        }\n        return partialCf.toUpperCase();\n    }\n\n    /**\n     * Parse name to cf part\n     * \n     * @param {string} name Partial or complete CF to parse\n     * @returns {string|null} partial cf\n     * @public\n     */\n    static nameToCf(name) {\n        if ((name || '').trim().length < 2) {\n            return null;\n        }\n        \n        const diacriticRemover = new DiacriticRemover();\n        const noDiacriticsName = diacriticRemover.replace(name);\n        const consonants = (noDiacriticsName.match(new RegExp(`[${VALIDATOR.CONSONANT_LIST}]+`, 'ig')) || []).join('');\n\n        if (consonants.length >= 4) {\n            return (consonants[0] + consonants.substr(2, 2)).toUpperCase();\n        }\n        return this.surnameToCf(name);\n    }\n\n    /**\n     * Parse year to cf part\n     * \n     * @param {string|number} year Birth year 2 or 4 digit string, number above 19XX or below 100\n     * @returns {string|null} partial cf\n     * @public\n     */\n    static yearToCf(year) {\n        let parsedYear = year;\n        if (typeof year === 'string') {\n            parsedYear = parseInt(year);\n        }\n        if (!(typeof parsedYear === 'number' && !isNaN(parsedYear) &&(parsedYear >= 1900 || parsedYear < 100))) {\n            return null;\n        }\n        return `0${parsedYear}`.substr(-2);\n    }\n\n    /**\n     * Parse month information\n     * \n     * @param {number} month Month number 0..11\n     * @returns {string|null} Birth Month CF code\n     * @public\n     */\n    static monthToCf(month) {\n        if (!(typeof month === 'number' && !isNaN(month))) {\n            return null;\n        }\n\n        return BirthMonth[month] || null;\n    }\n\n    /**\n     * Parse day information\n     * \n     * @param {number} day Day number 1..31\n     * @param {Gender|string} gender Gender enum value\n     * @returns {string|null} Birth Day CF code\n     * @public\n     */\n    static dayGenderToCf(day, gender) {\n        if (!(typeof day === 'number' && !isNaN(day) && (day > 0 && day < 32))) {\n            return null;\n        }\n        const genderValue = Gender[gender];\n        if (typeof genderValue !== 'number') {\n            return null;\n        }\n        return `0${day + genderValue}`.substr(-2);\n    }\n\n    /**\n     * Parse Year, Month, Day to Dated\n     * \n     * @param {number} year 4 digits Year\n     * @param {number} [month = 0] 1 or 2 digits Month 0..11\n     * @param {number} [day = 1] 1,2 digits Day 1..31\n     * @returns {Date|null} Date or null if provided year/month/day are not valid\n     */\n    static yearMonthDayToDate(year, month = 0, day = 1) {\n        if ([year, month, day].some(param => typeof param !== 'number') || year < 1861) {\n            return null;\n        }\n        const date = moment(Date.UTC(year, month, day));\n        if (!date.isValid() || date.year() !== year || date.month() !== month || date.date() !== day) {\n            return null;\n        }\n        return date.toDate();\n    }\n\n    /**\n     * Parse a Dated and Gender information to create Date/Gender CF part\n     * \n     * @param {Date|Moment|string|Array<number>} date Date or Moment instance, ISO8601 date string or array of numbers [year, month, day]\n     * @returns {Date|null} Parsed Date or null if not valid\n     * @public\n     */\n    static parseDate(date) {\n        if (!(\n            date instanceof Date ||\n            date instanceof moment ||\n            typeof date === 'string' && (new RegExp(DATE_VALIDATOR.ISO8601_SHORT_DATE)).test(date) ||\n            Array.isArray(date) && !date.some(value => typeof value !== 'number')\n        )) {\n            return null;\n        }\n\n        const parsedDate = moment(date);\n        if (!parsedDate.isValid()){\n            return null;\n        }\n        return parsedDate.toDate();\n    }\n\n    /**\n     * Parse a Dated and Gender information to create Date/Gender CF part\n     * \n     * @param {Date|Moment|string|Array<number>} date Date or Moment instance, ISO8601 date string or array of numbers [year, month, day]\n     * @param {Gender|string} gender Gender enum value\n     * @returns {string|null} Birth date and Gender CF code\n     * @public\n     */\n    static dateGenderToCf(date, gender) {\n        if (!Gender.hasOwnProperty(gender)) {\n            return null;\n        }\n        const parsedDate = this.parseDate(date);\n        if (!parsedDate) {\n            return null;\n        }\n        \n        const cfYear = this.yearToCf(parsedDate.getFullYear());\n        const cfMonth = this.monthToCf(parsedDate.getMonth());\n        const cfDayGender = this.dayGenderToCf(parsedDate.getDate(), gender);\n\n        return `${cfYear}${cfMonth}${cfDayGender}`;\n    }\n\n    /**\n     * Parse a Dated and Gender information to create Date/Gender CF part\n     * \n     * @param {Date|Moment|string|Array<number>} date Date or Moment instance, ISO8601 date string or array of numbers [year, month, day]\n     * @param {string} name City or Country name\n     * @param {string} [province] Province code for cities\n     * @returns {string|null} Matching place belfiore code, if only once is matching criteria\n     * @public\n     *//**\n     * Parse place name and province to Belfiore code\n     * @param {string} name City or Country name\n     * @param {string} [province] Province code for cities\n     * @returns {string|null} Matching place belfiore code, if only once is matching criteria\n     * @public\n     */\n    static placeToCf(...args) {\n        let targetDate = this.parseDate(args[0]);\n\n        let [name, province] = args.filter(input => typeof input === 'string');\n        if (!province) {\n            return (Belfiore.active(targetDate).findByName(name) || {}).belfioreCode;\n        }\n        const results = Belfiore.searchByName(name).toArray().filter(place => province.trim().toUpperCase() === place.province);\n        if (results.length === 1) {\n            return results[0].belfioreCode;\n        }\n        return null;\n    }\n\n    /**\n     * Generates full CF\n     * \n     * @param {Object} input Input Object\n     * @param {string} input.surname Surname\n     * @param {string} input.name Name\n     * @param {number} [input.year] Birth Year\n     * @param {number} [input.month] Birth Month\n     * @param {number} [input.day] Birth Day\n     * @param {Date|Moment} [input.date] Birth Date\n     * @param {Gender|string} input.gender Gender M|F\n     * @param {string} input.place Place name\n     * @returns {string|null} Complete CF\n     */\n    static encodeCf({\n        surname,\n        name,\n\n        year,\n        month,\n        day,\n        date,\n\n        gender,\n        place\n    }) {\n        const dtParams = this.parseDate(date) || this.yearMonthDayToDate(year, month, day);\n        const generator = [\n            () => this.surnameToCf(surname),\n            () => this.nameToCf(name),\n            () => this.dateGenderToCf(dtParams, gender),\n            () => this.placeToCf(dtParams, place),\n            () => CheckDigitizer.checkDigit(cf)\n        ];\n        let cf = '';\n        for (let i=0; i<generator.length; i++) {\n            const cfValue = generator[i]();\n            if (!cfValue) {\n                return null;\n            }\n            cf += cfValue;\n        }\n\n        return cf;\n    }\n}\n\nexport default Parser;","const ERRORS = Object.freeze({\n    INVALID_SURNAME: 'Provided surname is not valid, only letters, diacritics and apostrophe allowed',\n    INVALID_NAME: 'Provided name is not valid, only letters, diacritics and apostrophe allowed',\n    INVALID_DAY: 'Provided day is not valid',\n    INVALID_GENDER: 'Provided gender is not valid',\n    INVALID_DAY_OR_GENDER: 'Provided day and/or gender are not valid',\n    INVALID_YEAR: 'Provided year is not valid, only 2 or 4 digit numbers are allowed',\n    INVALID_DATE: 'Provided date is not valid',\n});\n\nclass Errors {\n    /**\n     * \n     * @param {string} className \n     * @param {string} methodName \n     */\n    constructor(className, methodName) {\n        Object.assign(\n            this,\n            Object.entries(ERRORS)\n                .map(([key, name]) => [key, new Error(`[${className}.${methodName}] ${name}`)])\n                .reduce((accumulator, [key, err]) => Object.assign(accumulator, { [key]: err }), {})\n        );\n    }\n}\n\nexport default Errors;","import CheckDigitizer from './checkDigitizer';\nimport DATE_VALIDATOR from './dateValidator.const';\nimport DiacriticRemover from '@marketto/diacritic-remover';\nimport Gender from './gender.enum';\nimport moment from 'moment';\nimport Omocode from './omocode.enum';\nimport Parser from './parser';\nimport VALIDATOR from './validator.const';\nimport Error from './error';\n/**\n * @namespace Validator\n */\nclass Validator {\n\n    /**\n     * Validation regexp for the given surname or generic\n     * @param {string} surname Optional surname to generate validation regexp\n     * @returns {RegExp} CF Surname matcher\n     * @public\n     */\n    static cfSurname(surname) {\n        const error =  new Error('Validator', 'cfSurname');\n        let matcher = VALIDATOR.CF_NAME_MATCHER;\n        if (surname) {\n            if (!this.surname().test(surname)) {\n                throw error.INVALID_SURNAME;\n            }\n            matcher = Parser.surnameToCf(surname) || matcher;\n        }\n        return new RegExp(`^(?:${matcher})$`, 'iu');\n    }\n\n    /**\n     * Validation regexp for the given name or generic\n     * @param {string} name Optional name to generate validation regexp\n     * @returns {RegExp} CF name matcher\n     * @public\n     */\n    static cfName(name) {\n        const error =  new Error('Validator', 'cfName');\n        let matcher = VALIDATOR.CF_NAME_MATCHER;\n        if (name) {\n            if (!this.surname().test(name)) {\n                throw error.INVALID_NAME;\n            }\n            matcher = Parser.nameToCf(name) || matcher;\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param {number} year Optional year to generate validation regexp\n     * @returns {RegExp} CF year matcher\n     * @public\n     */\n    static cfYear(year) {\n        const error =  new Error(this.constructor.name, 'cfYear');\n        let matcher = VALIDATOR.YEAR_MATCHER;\n        if (year) {\n            const parsedYear = Parser.yearToCf(year);\n            if (parsedYear) {\n                matcher = parsedYear.replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n            } else {\n                throw error.INVALID_YEAR;\n            }\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * Validation regexp for the given month or generic\n     * @param {number} month Optional month to generate validation regexp\n     * @returns {RegExp} CF month matcher\n     * @public\n     */\n    static cfMonth(month) {\n        let matcher = VALIDATOR.MONTH_MATCHER;\n        if (month) {\n            matcher = Parser.monthToCf(month) || matcher;\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param {number} day Optional day to generate validation regexp\n     * @returns {RegExp} CF day matcher\n     * @public\n     */\n    static cfDay(day) {\n        const error =  new Error('Validator', 'cfDayGender');\n        let matcher = VALIDATOR.DAY_MATCHER;\n        if (day) {\n            const parsedDayM = Parser.dayGenderToCf(day, 'M');\n            if (parsedDayM) {\n                const matcherM = parsedDayM.replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n                const matcherF = Parser.dayGenderToCf(day, 'F').replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n                matcher = `(?:${matcherM})|(?:${matcherF})`;\n            } else {\n                throw error.INVALID_DAY;\n            }\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param {number|null} [day] Optional day to generate validation regexp\n     * @param {'M'|'F'} [gender] Gender @see Gender\n     * @returns {RegExp} CF day and gender matcher\n     * @public\n     */\n    static cfDayGender(day, gender) {\n        const error =  new Error('Validator', 'cfDayGender');\n        if (!gender) {\n            return this.cfDay(day);\n        }\n        let matcher;\n        if (day) {\n            const parsedDayGender = Parser.dayGenderToCf(day, gender);\n            if (parsedDayGender) {\n                matcher = parsedDayGender.replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n            } else {\n                throw error.INVALID_DAY_OR_GENDER;\n            }\n        } else {\n            switch (gender) {\n            case 'M':\n                matcher = VALIDATOR.MALE_DAY_MATCHER;\n                break;\n            case 'F':\n                matcher = VALIDATOR.FEMALE_DAY_MATCHER;\n                break;\n            default:\n                throw error.INVALID_GENDER;\n            }\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * Validation regexp for the given year or generic\n     * @param {Date|Moment|Array<number>} date Optional date to generate validation regexp\n     * @param {'M'|'F'} [gender] @see Gender\n     * @returns {RegExp} CF date and gender matcher\n     * @public\n     */\n    static cfDateGender(date, gender) {\n        const error =  new Error('Validator', 'cfDateGender');\n        if (date && !Parser.parseDate(date)) {\n            throw error.INVALID_DATE;\n        }\n        if (gender && !Gender.toArray().includes(gender)) {\n            throw error.INVALID_GENDER;\n        }\n        let matcher = VALIDATOR.FULL_DATE_MATCHER;\n        if (date) {\n            const omocodeReplacer = parsedDateGender => parsedDateGender.replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n            matcher = gender ?\n                omocodeReplacer(Parser.dateGenderToCf(date, gender)) :\n                `(?:${omocodeReplacer(Parser.dateGenderToCf(date, 'M'))}|${omocodeReplacer(Parser.dateGenderToCf(date, 'm'))})`;\n        } else {\n            switch (gender) {\n            case 'M':\n                matcher = VALIDATOR.MALE_FULL_DATE_MATCHER;\n                break;\n            case 'F':\n                matcher = VALIDATOR.FEMALE_FULL_DATE_MATCHER;\n                break;\n            }\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * @param {string} placeName Optional place name to generate validation regexp\n     * @returns {RegExp} CF place matcher\n     * @public\n     *//**\n     * @param {Date|Moment|Array<number>} [date] Optional date to generate validation regexp\n     * @param {string} placeName Optional place name to generate validation regexp\n     * @returns {RegExp} CF place matcher\n     * @public\n     */\n    static cfPlace(...args) {\n        let matcher = VALIDATOR.BELFIORE_CODE_MATCHER;\n        if (args.filter(param => !!param).length > moment(args[0]).isValid()) {\n            const parsedPlace = Parser.placeToCf(...args);\n            if (parsedPlace) {\n                matcher = parsedPlace.replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n            } else {\n                matcher = '';\n            }\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n    /**\n     * Generates full CF validator based on given optional input or generic\n     * \n     * @param {Object} input Input Object\n     * @param {string} input.surname Surname\n     * @param {string} input.name Name\n     * @param {number} [input.year] Birth Year\n     * @param {number} [input.month] Birth Month\n     * @param {number} [input.day] Birth Day\n     * @param {Date|Moment} [input.date] Birth Date\n     * @param {Gender|string} input.gender Gender M|F\n     * @param {string} input.place Place name\n     * @returns {RegExp} CodiceFiscale matcher\n     */\n    static codiceFiscale(input) {\n        let matcher = VALIDATOR.CODICE_FISCALE;\n        if (input) {\n            const parsedCf = Parser.encodeCf(input);\n\n            if (parsedCf) {\n                matcher = parsedCf.replace(/\\d/gu, n => `[${n}${Omocode[n]}]`);\n            } else {\n                const { surname, name, year, month, day, date, gender, place } = input;\n                if (surname || name || year || month || day || date || gender || place) {\n                    const dtParams = Parser.parseDate(date) || Parser.yearMonthDayToDate(year, month, day);\n                    const generator = [\n                        () => this.cfSurname(surname),\n                        () => this.cfName(name),\n                        () => this.cfDateGender(dtParams, gender),\n                        () => this.cfPlace(dtParams, place)\n                    ];\n\n                    matcher = '';\n                    for (let i=0; i<generator.length; i++) {\n                        const cfPartValidator = generator[i]();\n                        const cfValue = cfPartValidator.toString().match(/\\^(.+)\\$/)[1];\n                        matcher += `(?:${cfValue})`;\n                    }\n                    // Final addition of CheckDigit\n                    matcher += VALIDATOR.CHECK_DIGIT;\n                }\n            }\n        }\n        return new RegExp(`^${matcher}$`, 'iu');\n    }\n\n\n    /**\n     * Returns surname validator based on given cf or generic\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {RegExp} Generic or specific regular expression\n     * @public\n     */\n    static surname(codiceFiscale) {\n        const diacriticRemover = new DiacriticRemover();\n        const LETTER_SET = `[A-Z${diacriticRemover.matcherBy(/^[A-Z]$/ui)}]`;\n        const SEPARATOR_SET = '[\\' ]';\n        const ANY_LETTER = `(?:${LETTER_SET}+${SEPARATOR_SET}?)`;\n        let matcher = `${ANY_LETTER}+`;\n        if (typeof codiceFiscale === 'string' && (/^[A-Z]{1,3}/iu).test(codiceFiscale)) {\n            const surnameCf = codiceFiscale.substr(0,3);\n            \n            const diacriticizer = matchingChars => (matchingChars || '').split('').map(char => `[${diacriticRemover.insensitiveMatcher[char]}]`);\n\n            const matchFromCf = (cf, charMatcher) => diacriticizer((cf.match(new RegExp(charMatcher, 'ig')) || [])[0]);\n\n            const cons = matchFromCf(surnameCf, `^[${VALIDATOR.CONSONANT_LIST}]{1,3}`);\n            const vow = matchFromCf(surnameCf, `[${VALIDATOR.VOWEL_LIST}]{1,3}`);\n            \n            const diacriticsVowelList = VALIDATOR.VOWEL_LIST + diacriticRemover.matcherBy(new RegExp(`^[${VALIDATOR.VOWEL_LIST}]$`, 'ui'));\n            const diacriticsVowelMatcher = `[${diacriticsVowelList}]`;\n            const midDiacriticVowelMatcher = `(?:${diacriticsVowelMatcher}${SEPARATOR_SET}?)*`;\n            const endingDiacritcVowelMatcher = `(?:${SEPARATOR_SET}?${midDiacriticVowelMatcher}${diacriticsVowelMatcher})?`;\n            switch(cons.length) {\n            case 3: {\n                const divider = midDiacriticVowelMatcher;\n                matcher = divider + cons.join(`${SEPARATOR_SET}?${divider}`) + `(?:${SEPARATOR_SET}?${LETTER_SET}*${LETTER_SET})?`;\n                break;\n            }\n            case 2: {\n                const possibilities = [\n                    `${vow[0]}${SEPARATOR_SET}?${cons[0]}${midDiacriticVowelMatcher}${cons[1]}`,\n                    `${cons[0]}${SEPARATOR_SET}?` + vow.join(`${SEPARATOR_SET}?`) + `${SEPARATOR_SET}?${midDiacriticVowelMatcher}${cons[1]}`,\n                    cons.join(`${SEPARATOR_SET}?`) + `${SEPARATOR_SET}?${vow[0]}`\n                ];\n                matcher = `(?:${possibilities.join('|')})${endingDiacritcVowelMatcher}`;\n                break;\n            }\n            case 1: {\n                const possibilities = [\n                    vow.slice(0,2).join(`${SEPARATOR_SET}?`) + midDiacriticVowelMatcher + cons.join(`${SEPARATOR_SET}?`),\n                    `${vow[0]}${SEPARATOR_SET}?` + cons.join(`${SEPARATOR_SET}?`) + vow[1],\n                    [cons[0], ...vow.slice(0,2)].join(`${SEPARATOR_SET}?`)\n                ];\n                matcher = `(?:${possibilities.join('|')})${endingDiacritcVowelMatcher}`;\n                break;\n            }\n            default:\n                matcher = `${vow.join(`${SEPARATOR_SET}?`)}${endingDiacritcVowelMatcher}`;\n            }\n        }\n\n        return new RegExp(`^ *(${matcher}) *$`, 'iu');\n    }\n\n    /**\n     * Returns name validator based on given cf or generic\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {RegExp} Generic or specific regular expression\n     * @public\n     */\n    static name(codiceFiscale) {\n        if (typeof codiceFiscale === 'string' && (new RegExp(`^[A-Z]{3}[${VALIDATOR.CONSONANT_LIST}]{3}`, 'iu')).test(codiceFiscale)) {\n            const diacriticRemover = new DiacriticRemover();\n            const ANY_LETTER = `[A-Z${diacriticRemover.matcherBy(/^[A-Z]$/ui)}]`;\n\n            const nameCf = codiceFiscale.substr(3,3);\n\n            const cons = ((nameCf.match(new RegExp(`^[${VALIDATOR.CONSONANT_LIST}]{1,3}`, 'ig')) || [])[0] || '')\n                .split('').map(char => `[${diacriticRemover.insensitiveMatcher[char]}]`);\n\n            const diacriticizer = chars => chars + diacriticRemover.matcherBy(new RegExp(`^[${chars}]$`, 'ui'));\n\n            const diacriticsVowelList = diacriticizer(VALIDATOR.VOWEL_LIST);\n            const diacriticsConsonantList = diacriticizer(VALIDATOR.CONSONANT_LIST);\n\n            const matcher = `[${diacriticsVowelList}]*${cons[0]}[${diacriticsVowelList}]*(?:[${diacriticsConsonantList}][${diacriticsVowelList}]*)?`\n                + cons.slice(1,3).join(`[${diacriticsVowelList}]*`) + `${ANY_LETTER}*`;\n            \n            return new RegExp(`^${matcher}$`, 'iu');\n        }\n        return this.surname((codiceFiscale || '').substr(3,3));\n    }\n\n    /**\n     * Returns iso8601 date validator based on given cf or generic\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {RegExp} Generic or specific regular expression\n     * @public\n     */\n    static date(codiceFiscale){\n        let matcher = DATE_VALIDATOR.ISO8601_DATE_TIME;\n        if (codiceFiscale) {\n            const parsedDate = Parser.cfToBirthDate(codiceFiscale);\n            if (parsedDate) {\n                const dateIso8601 = parsedDate.toJSON();\n                if (moment().diff(moment(parsedDate), 'y') < 50) {\n                    const century = parseInt(dateIso8601.substr(0,2));\n                    const centuries = [\n                        century -1,\n                        century\n                    ].map(year => year.toString().padStart(2, 0));\n                    matcher = `(?:${centuries.join('|')})` + dateIso8601.substr(2,8);\n                } else {\n                    matcher = dateIso8601.substr(0,10);\n                }\n            }\n        }\n        return new RegExp(`^${matcher}(?:T${DATE_VALIDATOR.TIME}(?:${DATE_VALIDATOR.TIMEZONE})?)?$`, 'iu');\n    }\n\n    /**\n     * Returns gender validator based on given cf or generic\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {RegExp} Generic or specific regular expression\n     * @public\n     */\n    static gender(codiceFiscale) {\n        const parsedGender = Parser.cfToGender(codiceFiscale);\n        const matcher = parsedGender || `[${Gender.toArray().join('')}]`;\n        return new RegExp(`^${matcher}$`, 'u');\n    }\n\n    \n\n    /**\n     * Returns place validator based on given cf or generic\n     * \n     * @param {string} codiceFiscale Partial or complete CF to parse\n     * @returns {RegExp} Generic or specific regular expression\n     * @public\n     */\n    static place(codiceFiscale) {\n        let matcher = '.+';\n        const parsedPlace = Parser.cfToBirthPlace(codiceFiscale);\n\n        if (parsedPlace) {\n            const diacriticRemover = new DiacriticRemover();\n            const nameMatcher = parsedPlace.name.replace(/./gu, c => diacriticRemover[c]===c ? c : `[${c}${diacriticRemover[c]}]`);\n            matcher = `(?:(?:${nameMatcher})|${parsedPlace.belfioreCode})`;\n        }\n\n        return new RegExp(`^${matcher}$`, 'ui');\n    }\n\n    /**\n     * Check the given cf validity by form, birth date/place and digit code\n     * \n     * @param {string} codiceFiscale Complete CF to parse\n     * @returns {boolean} Generic or specific regular expression\n     * @public\n     */\n    static isValid(codiceFiscale) {\n        const matcher = new RegExp(`^(?:${VALIDATOR.CODICE_FISCALE})$`, 'ui');\n        if (\n            // Checking form validity\n            !matcher.test(codiceFiscale) ||\n            //Checking 16th char check digit validity\n            codiceFiscale.substr(15, 1).toUpperCase() !== CheckDigitizer.checkDigit(codiceFiscale) ||\n            //Checking Birth date/place validity\n            !Parser.cfToBirthPlace(codiceFiscale)\n        ) {\n            return false;\n        }\n        return true;\n    }\n}\n\nexport default Validator;"],"names":["MONTHS","Object","freeze","Proxy","get","receiver","name","monthCode","toUpperCase","includes","indexOf","this","BelfioreConnector","data","licenses","activeDate","codeMatcher","province","Error","hiddenValueConf","value","enumerable","configurable","writable","defineProperties","_data","_licenses","_activeDate","_codeMatcher","_province","constructor","map","resource","Array","from","belfioreCode","length","e","i","_this","locationByIndex","reduce","a","b","concat","filter","output","g","resourceData","indexer","indexByName","index","roundItem","push","matcher","RegExp","date","moment","code","test","paramName","base32name","belfioreToInt","toString","padStart","binaryfindIndex","text","start","end","rangedStart","rangedEnd","currentLength","targetIndex","Math","floor","targetValure","substr","ceil","goAhead","upperCaseCode","charCodeAt","parseInt","String","fromCharCode","base32daysFrom1861","add","list","startIndex","endIndex","counter","substring","regExpMatcher","seekEntryEndIndex","entryIndex","targetName","belfioreIndex","belFioreInt","belfioreFromInt","provinceOrCountry","dateIndex","creationDate","decodeDate","startOf","expirationDate","endOf","isBefore","isAfter","nameByIndex","isCountry","dataSource","assign","toDate","iso3166","Belfiore","CITIES_COUNTRIES","CONSONANT_LIST","VOWEL_LIST","OMOCODE_NUMBER_LIST","OMOCODE_NON_ZERO_NUMBER_LIST","OMOCODE_ZERO_LIST","MONTH_LIST","MONTH_30DAYS_LIST","MONTH_31DAYS_LIST","CITY_CODE_LIST","COUNTRY_CODE_LIST","CF_NAME_MATCHER","CF_SURNAME_MATCHER","CF_FULL_NAME_MATCHER","YEAR_MATCHER","LEAP_YEAR_MATCHER","MONTH_MATCHER","DAY_2X_MATCHER","DAY_3X_MATCHER","DAY_29_MATCHER","DAY_30_MATCHER","DAY_31_MATCHER","DAY_MATCHER","MALE_DAY_MATCHER","FEMALE_DAY_MATCHER","MONTH_DAY_MATCHER","FULL_DATE_MATCHER","MALE_FULL_DATE_MATCHER","FEMALE_FULL_DATE_MATCHER","CITY_CODE_MATCHER","COUNTRY_CODE_MATCHER","BELFIORE_CODE_MATCHER","CHECK_DIGIT","CODICE_FISCALE","PARTIAL_CF_NAME_MATCHER","PARTIAL_CF_FULL_NAME","PARTIAL_YEAR","PARTIAL_MONTH_DAY","PARTIAL_FULL_DATE","PARTIAL_BELFIORE_CODE_MATCHER","PARTIAL_CF","CONTROL_CODE_IN","CheckDigitizer","partialCF","split","char","isNumber","codiceFiscale","VALIDATOR","partialCfValue","evaluateChar","YEAR","MONTH","DAY","LEAP_MONTH","DAYS_30_MONTHS","DAYS_31_MONTHS","MONTH_DAY","HOURS","MINUTES","SECONDS","MILLISECONDS","TIMEZONE","TIME","ISO8601_SHORT_DATE","ISO8601_DATE_TIME","GENDERS","M","F","values","toArray","apply","isNaN","args","keys","OMOCODE","omocodeChar","Parser","replace","match","offset","OMOCODE_BITMAP","checkBitmap","Omocode","surnameCf","cons","vow","matchingLength","join","cfToSurname","birthDay","Gender","birthYear","current2DigitsYear","format","century","subtract","year","birthMonth","BirthMonth","cfToBirthDay","cfToBirthMonth","cfToBirthYear","dt","Date","UTC","isValid","birthPlace","birthDate","cfToBirthDate","validityCheck","isSameOrAfter","isSameOrBefore","fiscalCode","month","day","surname","cfToName","gender","cfToGender","place","cfToBirthPlace","trim","noDiacriticsSurname","DiacriticRemover","partialCf","padEnd","consonants","surnameToCf","parsedYear","genderValue","some","param","DATE_VALIDATOR","isArray","parsedDate","hasOwnProperty","parseDate","cfYear","yearToCf","getFullYear","cfMonth","monthToCf","getMonth","cfDayGender","dayGenderToCf","getDate","targetDate","input","active","findByName","results","searchByName","dtParams","yearMonthDayToDate","generator","_this2","nameToCf","dateGenderToCf","placeToCf","checkDigit","cf","cfValue","ERRORS","INVALID_SURNAME","INVALID_NAME","INVALID_DAY","INVALID_GENDER","INVALID_DAY_OR_GENDER","INVALID_YEAR","INVALID_DATE","Errors","className","methodName","entries","key","accumulator","err","Validator","error","n","parsedDayM","matcherM","matcherF","cfDay","parsedDayGender","omocodeReplacer","parsedDateGender","parsedPlace","parsedCf","encodeCf","cfSurname","cfName","cfDateGender","cfPlace","diacriticRemover","LETTER_SET","matcherBy","ANY_LETTER","matchFromCf","charMatcher","insensitiveMatcher","diacriticsVowelList","diacriticsVowelMatcher","midDiacriticVowelMatcher","endingDiacritcVowelMatcher","divider","possibilities","slice","diacriticizer","chars","diacriticsConsonantList","dateIso8601","toJSON","diff","centuries","nameMatcher","c"],"mappings":"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"}